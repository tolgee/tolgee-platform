apply from: './gradle/utils.gradle'

import groovy.io.FileType

import java.time.Duration

ext {
    E2E_DIR = "${project.projectDir}/e2e"
    BILLING_E2E_DIR = "${project.projectDir}/../billing/e2e"
    WEBAPP_DIR = "${project.projectDir}/webapp"
}


def getE2eChunks() {
    def totalJobs = System.getenv("E2E_TOTAL_JOBS")
    def list = []

    def dir = new File("$E2E_DIR/cypress/e2e")
    dir.eachFileRecurse(FileType.FILES) { file ->
        if (file.path.matches("^.*\\.tsx?${'$'}")) {
            list.add(file.path.replace("$E2E_DIR/", ""))
        }
    }

    list.sort()

    if (totalJobs == null) {
        return List.of(list)
    }

    def remainingChunks = Integer.parseInt(totalJobs)
    def chunks = [] as ArrayList<List<String>>
    while (remainingChunks > 0) {
        def toIndex = Math.ceil(list.size().toFloat() / remainingChunks.toFloat()).toInteger()
        chunks.add(list.subList(0, toIndex))
        list = list.subList(toIndex, list.size())
        remainingChunks--
    }
    return chunks
}

def getE2eTestsToRun() {
    def chunks = getE2eChunks()

    def jobIndex = System.getenv("E2E_JOB_INDEX")

    if (jobIndex == null) {
        return chunks.flatten()
    }

    return chunks[Integer.parseInt(jobIndex)]
}

task waitForRunningContainer(type: Task, group: "e2e") {
    doLast {
        while (true) {
            def pb = new ProcessBuilder("docker", "compose", "logs", "-f")
            pb.directory(new File(E2E_DIR))
            def proc = pb.start()
            BufferedReader stdInput = new BufferedReader(new InputStreamReader(proc.getInputStream()))
            String s = null
            while ((s = stdInput.readLine()) != null) {
                println(s)
                if (s.contains("Tomcat started on port")) {
                    return
                }
            }
            if (proc.exitValue() != 0) {
                throw new RuntimeException("docker compose logs returned non zero exit code")
            }
        }
    }
    timeout = Duration.ofSeconds(120)
}

task installE2eDeps(type: Exec, group: "e2e") {
    onlyIf { System.getenv("SKIP_INSTALL_E2E_DEPS") != "true" }
    inputs.file("$E2E_DIR/package.json")
    inputs.file("$E2E_DIR/package-lock.json")
    outputs.dir("$E2E_DIR/node_modules")

    commandLine npmCommandName, "install"
    workingDir E2E_DIR
}

task runE2e(type: Exec, group: "e2e") {
    dependsOn "runDockerE2e", "installE2eDeps"
    def specs = getE2eTestsToRun().join(",")

    commandLine npmCommandName, "run", "cy:run", "--", "--spec", specs

    workingDir E2E_DIR

    finalizedBy "saveServerLogs", "stopDockerE2e", "cleanupDockerE2e"
}

task printE2eGroups() {
    doLast {
        getE2eChunks().indexed().forEach { index, chunk ->
            println("Chunk: $index")
            chunk.forEach { println(" $it") }
        }
    }
}

task saveServerLogs(type: Exec, group: "e2E") {
    commandLine "bash", "-c", "docker compose logs > server.log"
    workingDir E2E_DIR
}

task openE2e(type: Exec, group: "e2e") {
    dependsOn "runDockerE2e", "installE2eDeps"

    commandLine npmCommandName, "run", "cy:open"

    workingDir E2E_DIR

    finalizedBy "stopDockerE2e", "cleanupDockerE2e"
}

task openE2eDev(type: Exec, group: "e2e") {
    commandLine npmCommandName, "run", "cy:open"

    environment "CYPRESS_HOST", "http://localhost:8081"

    workingDir E2E_DIR
}

task runDockerE2e(type: Exec, group: "e2e") {
    dependsOn "tagDockerLocal"
    commandLine "docker", "compose", "up", "-d"
    workingDir E2E_DIR
    finalizedBy "waitForRunningContainer"
}

task runDockerE2eDev(type: Exec, group: "e2e") {
    commandLine "docker", "compose", "up", "-d", "fakesmtp"
    workingDir E2E_DIR
}

task stopDockerE2e(type: Exec, group: "e2e") {
    commandLine "docker", "compose", "stop"
    workingDir E2E_DIR
}

task cleanupDockerE2e(type: Exec, group: "e2e") {
    commandLine "docker", "compose", "rm", "-f"
    workingDir E2E_DIR
}

task tagDockerLocal(type: Exec) {
    dependsOn "docker"
    commandLine "docker", "tag", "tolgee/tolgee", "tolgee/tolgee:local"
}
