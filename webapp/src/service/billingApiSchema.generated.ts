/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/v2/administration/billing/add-usage-items-to-invoice-and-finalize-it/{invoiceId}": {
    put: operations["addUsageItemsToInvoiceAndFinalizeIt"];
  };
  "/v2/administration/billing/cancel-local-subscriptions": {
    /** Cancel local subscriptions */
    put: operations["cancelLocalSubscriptions"];
  };
  "/v2/administration/billing/cloud-plans": {
    get: operations["getPlans_2"];
    post: operations["create_2"];
  };
  "/v2/administration/billing/cloud-plans/{planId}": {
    get: operations["getPlan_1"];
    put: operations["updatePlan_1"];
    delete: operations["deletePlan_1"];
  };
  "/v2/administration/billing/cloud-plans/{planId}/organizations": {
    get: operations["getPlanOrganizations_1"];
  };
  "/v2/administration/billing/features": {
    get: operations["getAllFeatures"];
  };
  "/v2/administration/billing/inconsistent-subscriptions": {
    /** Returns active cloud subscriptions, which have inconsistent state in Tolgee and Stripe */
    get: operations["getInconsistentSubscriptions"];
  };
  "/v2/administration/billing/organizations": {
    get: operations["getOrganizations"];
  };
  "/v2/administration/billing/self-hosted-ee-plans": {
    get: operations["getPlans_1"];
    post: operations["create_1"];
  };
  "/v2/administration/billing/self-hosted-ee-plans/{planId}": {
    get: operations["getPlan"];
    put: operations["updatePlan"];
    delete: operations["deletePlan"];
  };
  "/v2/administration/billing/self-hosted-ee-plans/{planId}/organizations": {
    get: operations["getPlanOrganizations"];
  };
  "/v2/administration/billing/stripe-products": {
    get: operations["getStripeProducts"];
  };
  "/v2/administration/billing/translation-agency": {
    get: operations["getAll_1"];
    post: operations["create"];
  };
  "/v2/administration/billing/translation-agency/{agencyId}": {
    get: operations["get_1"];
    put: operations["update"];
    delete: operations["delete"];
  };
  "/v2/administration/billing/translation-agency/{agencyId}/avatar": {
    put: operations["uploadAvatar"];
    delete: operations["removeAvatar"];
  };
  "/v2/administration/organizations/{organizationId}/billing/assign-cloud-plan": {
    /** Assigns a private free plan or trial plan to an organization. */
    put: operations["assignCloudPlan"];
  };
  "/v2/administration/organizations/{organizationId}/billing/update-trial-end-date": {
    put: operations["updateTrialEndDAte"];
  };
  "/v2/billing/translation-agency": {
    get: operations["getAll"];
  };
  "/v2/billing/translation-agency/{agencyId}": {
    get: operations["get"];
  };
  "/v2/organizations/{organizationId}/billing/billing-info": {
    get: operations["getBillingInfo"];
  };
  "/v2/organizations/{organizationId}/billing/buy-more-credits": {
    post: operations["getBuyMoreCreditsCheckoutSessionUrl"];
  };
  "/v2/organizations/{organizationId}/billing/cancel-subscription": {
    /** When applied, current subscription will be cancelled at the period end. */
    put: operations["cancelSubscription"];
  };
  "/v2/organizations/{organizationId}/billing/customer-portal": {
    get: operations["goToCustomerPortal"];
  };
  "/v2/organizations/{organizationId}/billing/expected-usage": {
    get: operations["getExpectedUsage_1"];
  };
  "/v2/organizations/{organizationId}/billing/expected-usage/{type}.csv": {
    /** Returns CSV file with usage detail for each time period and it's usage. */
    get: operations["getExpectedUsageDetail"];
  };
  "/v2/organizations/{organizationId}/billing/invoices": {
    get: operations["getInvoices"];
  };
  "/v2/organizations/{organizationId}/billing/invoices/{invoiceId}/pdf": {
    get: operations["getInvoicePdf"];
  };
  "/v2/organizations/{organizationId}/billing/invoices/{invoiceId}/usage": {
    get: operations["getUsage"];
  };
  "/v2/organizations/{organizationId}/billing/invoices/{invoiceId}/usage/{type}.csv": {
    /** Returns CSV file with usage detail for each time period and it's usage. */
    get: operations["getUsageDetail"];
  };
  "/v2/organizations/{organizationId}/billing/plans": {
    /** Returns list of available cloud plans for specific organization.) */
    get: operations["getCloudPlans"];
  };
  "/v2/organizations/{organizationId}/billing/prepare-update-subscription": {
    put: operations["prepareUpdateSubscription"];
  };
  "/v2/organizations/{organizationId}/billing/refresh-subscription": {
    put: operations["refresh"];
  };
  "/v2/organizations/{organizationId}/billing/restore-cancelled-subscription": {
    /** When subscription is scheduled to cancel on the period end, it can be restored. */
    put: operations["restoreSubscription"];
  };
  "/v2/organizations/{organizationId}/billing/self-hosted-ee/plans": {
    get: operations["getSelfHostedPlans"];
  };
  "/v2/organizations/{organizationId}/billing/self-hosted-ee/refresh-subscriptions": {
    put: operations["refreshSelfHostedEeSubscriptions"];
  };
  "/v2/organizations/{organizationId}/billing/self-hosted-ee/subscribe-free": {
    post: operations["setupFreeEeSubscription"];
  };
  "/v2/organizations/{organizationId}/billing/self-hosted-ee/subscriptions": {
    get: operations["getSelfHostedEeSubscriptions"];
    post: operations["setupEeSubscription"];
  };
  "/v2/organizations/{organizationId}/billing/self-hosted-ee/subscriptions/{subscriptionId}": {
    delete: operations["cancelEeSubscription"];
  };
  "/v2/organizations/{organizationId}/billing/self-hosted-ee/subscriptions/{subscriptionId}/expected-usage": {
    get: operations["getExpectedUsage"];
  };
  "/v2/organizations/{organizationId}/billing/subscribe": {
    post: operations["subscribe"];
  };
  "/v2/organizations/{organizationId}/billing/subscription": {
    get: operations["getSubscription"];
  };
  "/v2/organizations/{organizationId}/billing/update-subscription": {
    put: operations["updateSubscription"];
  };
  "/v2/projects/{projectId}/billing/order-translation": {
    post: operations["createTranslationOrder"];
  };
  "/v2/projects/{projectId}/billing/order-translation/preferred-agency": {
    get: operations["getPreferredAgency"];
  };
  "/v2/public/billing/mt-credit-prices": {
    get: operations["getMtCreditPrices"];
  };
  "/v2/public/billing/plans": {
    get: operations["getPlans"];
  };
  "/v2/public/licensing/prepare-set-key": {
    post: operations["prepareSetLicenseKey"];
  };
  "/v2/public/licensing/release-key": {
    post: operations["releaseKey"];
  };
  "/v2/public/licensing/report-error": {
    post: operations["reportError"];
  };
  "/v2/public/licensing/report-usage": {
    post: operations["reportUsage"];
  };
  "/v2/public/licensing/set-key": {
    post: operations["onLicenceSetKey"];
  };
  "/v2/public/licensing/subscription": {
    post: operations["getMySubscription"];
  };
  "/v2/public/telemetry/report": {
    post: operations["report"];
  };
  "/v2/public/translator/translate": {
    post: operations["translate"];
  };
}

export interface components {
  schemas: {
    AdministrationCloudPlanModel: {
      canEditPrices: boolean;
      enabledFeatures: (
        | "GRANULAR_PERMISSIONS"
        | "PRIORITIZED_FEATURE_REQUESTS"
        | "PREMIUM_SUPPORT"
        | "DEDICATED_SLACK_CHANNEL"
        | "ASSISTED_UPDATES"
        | "DEPLOYMENT_ASSISTANCE"
        | "BACKUP_CONFIGURATION"
        | "TEAM_TRAINING"
        | "ACCOUNT_MANAGER"
        | "STANDARD_SUPPORT"
        | "PROJECT_LEVEL_CONTENT_STORAGES"
        | "WEBHOOKS"
        | "MULTIPLE_CONTENT_DELIVERY_CONFIGS"
        | "AI_PROMPT_CUSTOMIZATION"
        | "SLACK_INTEGRATION"
        | "TASKS"
        | "SSO"
        | "ORDER_TRANSLATION"
      )[];
      /**
       * Format: int64
       * @description If only single organization is using this plan or can see this plan, this is the organization id, null otherwise.When provided, we are sure that no other organization is currently using or have been invoiced with this plan.
       */
      exclusiveForOrganizationId?: number;
      forOrganizationIds: number[];
      free: boolean;
      hasYearlyPrice: boolean;
      /** Format: int64 */
      id: number;
      includedUsage: components["schemas"]["PlanIncludedUsageModel"];
      name: string;
      nonCommercial: boolean;
      prices: components["schemas"]["PlanPricesModel"];
      public: boolean;
      stripeProductId: string;
      type: "PAY_AS_YOU_GO" | "FIXED" | "SLOTS_FIXED";
    };
    AdministrationCloudSubscriptionModel: {
      cancelAtPeriodEnd: boolean;
      /** Format: int64 */
      createdAt: number;
      currentBillingPeriod?: "MONTHLY" | "YEARLY";
      /** Format: int64 */
      currentPeriodEnd?: number;
      /** Format: int64 */
      currentPeriodStart?: number;
      estimatedCosts?: number;
      /** Format: int64 */
      organizationId: number;
      plan: components["schemas"]["AdministrationCloudPlanModel"];
      status:
        | "ACTIVE"
        | "CANCELED"
        | "PAST_DUE"
        | "UNPAID"
        | "ERROR"
        | "TRIALING"
        | "KEY_USED_BY_ANOTHER_INSTANCE"
        | "UNKNOWN";
      stripeSubscriptionId?: string;
      /** Format: int64 */
      trialEnd?: number;
    };
    AssignPlanRequest: {
      customPlan?: components["schemas"]["CloudPlanRequest"];
      /** Format: int64 */
      planId?: number;
      /** Format: int64 */
      trialEnd?: number;
    };
    Avatar: {
      large: string;
      thumbnail: string;
    };
    AverageProportionalUsageItemModel: {
      total: number;
      unusedQuantity: number;
      usedQuantity: number;
      usedQuantityOverPlan: number;
    };
    BillingInfoModel: {
      city?: string;
      countryIso?: string;
      email?: string;
      name?: string;
      registrationNo?: string;
      state?: string;
      street?: string;
      street2?: string;
      vatNo?: string;
      zip?: string;
    };
    BuyMoreCreditsModel: {
      url: string;
    };
    BuyMoreCreditsRequest: {
      /** Format: int64 */
      amount: number;
      /** Format: int64 */
      priceId: number;
    };
    CancelLocalSubscriptionsRequest: {
      ids: components["schemas"]["SubscriptionId"][];
    };
    CloudPlanModel: {
      enabledFeatures: (
        | "GRANULAR_PERMISSIONS"
        | "PRIORITIZED_FEATURE_REQUESTS"
        | "PREMIUM_SUPPORT"
        | "DEDICATED_SLACK_CHANNEL"
        | "ASSISTED_UPDATES"
        | "DEPLOYMENT_ASSISTANCE"
        | "BACKUP_CONFIGURATION"
        | "TEAM_TRAINING"
        | "ACCOUNT_MANAGER"
        | "STANDARD_SUPPORT"
        | "PROJECT_LEVEL_CONTENT_STORAGES"
        | "WEBHOOKS"
        | "MULTIPLE_CONTENT_DELIVERY_CONFIGS"
        | "AI_PROMPT_CUSTOMIZATION"
        | "SLACK_INTEGRATION"
        | "TASKS"
        | "SSO"
        | "ORDER_TRANSLATION"
      )[];
      free: boolean;
      hasYearlyPrice: boolean;
      /** Format: int64 */
      id: number;
      includedUsage: components["schemas"]["PlanIncludedUsageModel"];
      name: string;
      nonCommercial: boolean;
      prices: components["schemas"]["PlanPricesModel"];
      public: boolean;
      type: "PAY_AS_YOU_GO" | "FIXED" | "SLOTS_FIXED";
    };
    CloudPlanRequest: {
      /** Format: date-time */
      availableUntil?: string;
      enabledFeatures: (
        | "GRANULAR_PERMISSIONS"
        | "PRIORITIZED_FEATURE_REQUESTS"
        | "PREMIUM_SUPPORT"
        | "DEDICATED_SLACK_CHANNEL"
        | "ASSISTED_UPDATES"
        | "DEPLOYMENT_ASSISTANCE"
        | "BACKUP_CONFIGURATION"
        | "TEAM_TRAINING"
        | "ACCOUNT_MANAGER"
        | "STANDARD_SUPPORT"
        | "PROJECT_LEVEL_CONTENT_STORAGES"
        | "WEBHOOKS"
        | "MULTIPLE_CONTENT_DELIVERY_CONFIGS"
        | "AI_PROMPT_CUSTOMIZATION"
        | "SLACK_INTEGRATION"
        | "TASKS"
        | "SSO"
        | "ORDER_TRANSLATION"
      )[];
      forOrganizationIds: number[];
      free: boolean;
      includedUsage: components["schemas"]["PlanIncludedUsageRequest"];
      name: string;
      nonCommercial: boolean;
      /** Format: date-time */
      notAvailableBefore?: string;
      prices: components["schemas"]["PlanPricesRequest"];
      public: boolean;
      stripeProductId: string;
      type: "PAY_AS_YOU_GO" | "FIXED" | "SLOTS_FIXED";
      /** Format: date-time */
      usableUntil?: string;
    };
    CloudSubscribeRequest: {
      period: "MONTHLY" | "YEARLY";
      /**
       * Format: int64
       * @description Id of the subscription plan
       */
      planId: number;
    };
    CloudSubscriptionModel: {
      cancelAtPeriodEnd: boolean;
      /** Format: int64 */
      createdAt: number;
      currentBillingPeriod?: "MONTHLY" | "YEARLY";
      /** Format: int64 */
      currentPeriodEnd?: number;
      /** Format: int64 */
      currentPeriodStart?: number;
      estimatedCosts?: number;
      /** Format: int64 */
      organizationId: number;
      plan: components["schemas"]["CloudPlanModel"];
      status:
        | "ACTIVE"
        | "CANCELED"
        | "PAST_DUE"
        | "UNPAID"
        | "ERROR"
        | "TRIALING"
        | "KEY_USED_BY_ANOTHER_INSTANCE"
        | "UNKNOWN";
      /** Format: int64 */
      trialEnd?: number;
    };
    CollectionModelAdministrationCloudPlanModel: {
      _embedded?: {
        plans?: components["schemas"]["AdministrationCloudPlanModel"][];
      };
    };
    CollectionModelCloudPlanModel: {
      _embedded?: {
        plans?: components["schemas"]["CloudPlanModel"][];
      };
    };
    CollectionModelInconsistentSubscriptionModel: {
      _embedded?: {
        subscription?: components["schemas"]["InconsistentSubscriptionModel"][];
      };
    };
    CollectionModelMtCreditsPriceModel: {
      _embedded?: {
        prices?: components["schemas"]["MtCreditsPriceModel"][];
      };
    };
    CollectionModelSelfHostedEePlanAdministrationModel: {
      _embedded?: {
        plans?: components["schemas"]["SelfHostedEePlanAdministrationModel"][];
      };
    };
    CollectionModelSelfHostedEePlanModel: {
      _embedded?: {
        plans?: components["schemas"]["SelfHostedEePlanModel"][];
      };
    };
    CollectionModelSelfHostedEeSubscriptionModel: {
      _embedded?: {
        subscriptions?: components["schemas"]["SelfHostedEeSubscriptionModel"][];
      };
    };
    CollectionModelStripeProductModel: {
      _embedded?: {
        stripeProducts?: components["schemas"]["StripeProductModel"][];
      };
    };
    CreateTaskRequest: {
      assignees: number[];
      description: string;
      /**
       * Format: int64
       * @description Due to date in epoch format (milliseconds).
       * @example 1661172869000
       */
      dueDate?: number;
      keys: number[];
      /**
       * Format: int64
       * @description Id of language, this task is attached to.
       * @example 1
       */
      languageId: number;
      name: string;
      type: "TRANSLATE" | "REVIEW";
    };
    CreateTranslationAgencyRequest: {
      description: string;
      email: string;
      emailBcc: string[];
      name: string;
      services: string[];
      url: string;
    };
    CreateTranslationOrderRequest: {
      /** Format: int64 */
      agencyId: number;
      sendReadOnlyInvitation: boolean;
      tasks: components["schemas"]["CreateTaskRequest"][];
    };
    ErrorResponseBody: {
      code: string;
      params?: { [key: string]: unknown }[];
    };
    ErrorResponseTyped: {
      code:
        | "unauthenticated"
        | "api_access_forbidden"
        | "api_key_not_found"
        | "invalid_api_key"
        | "invalid_project_api_key"
        | "project_api_key_expired"
        | "bad_credentials"
        | "mfa_enabled"
        | "invalid_otp_code"
        | "mfa_not_enabled"
        | "can_not_revoke_own_permissions"
        | "data_corrupted"
        | "invitation_code_does_not_exist_or_expired"
        | "language_tag_exists"
        | "language_name_exists"
        | "language_not_found"
        | "operation_not_permitted"
        | "registrations_not_allowed"
        | "project_not_found"
        | "resource_not_found"
        | "scope_not_found"
        | "key_exists"
        | "third_party_auth_error_message"
        | "third_party_auth_no_email"
        | "third_party_auth_non_matching_email"
        | "third_party_auth_no_sub"
        | "third_party_auth_unknown_error"
        | "email_already_verified"
        | "third_party_unauthorized"
        | "third_party_google_workspace_mismatch"
        | "third_party_switch_initiated"
        | "username_already_exists"
        | "username_or_password_invalid"
        | "user_already_has_permissions"
        | "user_already_has_role"
        | "user_not_found"
        | "file_not_image"
        | "file_too_big"
        | "invalid_timestamp"
        | "email_not_verified"
        | "missing_callback_url"
        | "invalid_jwt_token"
        | "expired_jwt_token"
        | "general_jwt_error"
        | "cannot_find_suitable_address_part"
        | "slug_not_unique"
        | "user_is_not_member_of_organization"
        | "organization_has_no_other_owner"
        | "user_has_no_project_access"
        | "user_is_organization_owner"
        | "cannot_set_your_own_permissions"
        | "user_is_organization_member"
        | "property_not_mutable"
        | "import_language_not_from_project"
        | "existing_language_not_selected"
        | "conflict_is_not_resolved"
        | "language_already_selected"
        | "cannot_parse_file"
        | "could_not_resolve_property"
        | "cannot_add_more_then_100_languages"
        | "no_languages_provided"
        | "language_with_base_language_tag_not_found"
        | "language_not_from_project"
        | "namespace_not_from_project"
        | "cannot_delete_base_language"
        | "key_not_from_project"
        | "max_screenshots_exceeded"
        | "translation_not_from_project"
        | "can_edit_only_own_comment"
        | "request_parse_error"
        | "filter_by_value_state_not_valid"
        | "import_has_expired"
        | "tag_not_from_project"
        | "translation_text_too_long"
        | "invalid_recaptcha_token"
        | "cannot_leave_owning_project"
        | "cannot_leave_project_with_organization_role"
        | "dont_have_direct_permissions"
        | "tag_too_log"
        | "too_many_uploaded_images"
        | "one_or_more_images_not_found"
        | "screenshot_not_of_key"
        | "service_not_found"
        | "too_many_requests"
        | "translation_not_found"
        | "out_of_credits"
        | "key_not_found"
        | "organization_not_found"
        | "cannot_find_base_language"
        | "base_language_not_found"
        | "no_exported_result"
        | "cannot_set_your_own_role"
        | "only_translate_review_or_view_permission_accepts_view_languages"
        | "oauth2_token_url_not_set"
        | "oauth2_user_url_not_set"
        | "email_already_invited_or_member"
        | "price_not_found"
        | "invoice_not_from_organization"
        | "invoice_not_found"
        | "plan_not_found"
        | "plan_not_available_any_more"
        | "no_auto_translation_method"
        | "cannot_translate_base_language"
        | "pat_not_found"
        | "invalid_pat"
        | "pat_expired"
        | "operation_unavailable_for_account_type"
        | "validation_email_is_not_valid"
        | "current_password_required"
        | "cannot_create_organization"
        | "wrong_current_password"
        | "wrong_param_type"
        | "expired_super_jwt_token"
        | "cannot_delete_your_own_account"
        | "cannot_sort_by_this_column"
        | "namespace_not_found"
        | "namespace_exists"
        | "invalid_authentication_method"
        | "unknown_sort_property"
        | "only_review_permission_accepts_state_change_languages"
        | "only_translate_or_review_permission_accepts_translate_languages"
        | "cannot_set_language_permissions_for_admin_scope"
        | "cannot_set_view_languages_without_translations_view_scope"
        | "cannot_set_translate_languages_without_translations_edit_scope"
        | "cannot_set_state_change_languages_without_translations_state_edit_scope"
        | "language_not_permitted"
        | "scopes_has_to_be_set"
        | "set_exactly_one_of_scopes_or_type"
        | "translation_exists"
        | "import_keys_error"
        | "provide_only_one_of_screenshots_and_screenshot_uploaded_image_ids"
        | "multiple_projects_not_supported"
        | "plan_translation_limit_exceeded"
        | "feature_not_enabled"
        | "license_key_not_found"
        | "cannot_set_view_languages_without_for_level_based_permissions"
        | "cannot_set_different_translate_and_state_change_languages_for_level_based_permissions"
        | "cannot_disable_your_own_account"
        | "subscription_not_found"
        | "invoice_does_not_have_usage"
        | "customer_not_found"
        | "subscription_not_active"
        | "organization_already_subscribed"
        | "organization_not_subscribed"
        | "license_key_used_by_another_instance"
        | "translation_spending_limit_exceeded"
        | "credit_spending_limit_exceeded"
        | "seats_spending_limit_exceeded"
        | "this_instance_is_already_licensed"
        | "big_meta_not_from_project"
        | "mt_service_not_enabled"
        | "project_not_selected"
        | "organization_not_selected"
        | "plan_has_subscribers"
        | "translation_failed"
        | "batch_job_not_found"
        | "key_exists_in_namespace"
        | "tag_is_blank"
        | "execution_failed_on_management_error"
        | "translation_api_rate_limit"
        | "cannot_finalize_activity"
        | "formality_not_supported_by_service"
        | "language_not_supported_by_service"
        | "rate_limited"
        | "pat_access_not_allowed"
        | "pak_access_not_allowed"
        | "cannot_modify_disabled_translation"
        | "azure_config_required"
        | "s3_config_required"
        | "content_storage_config_required"
        | "content_storage_test_failed"
        | "content_storage_config_invalid"
        | "invalid_connection_string"
        | "cannot_create_azure_storage_client"
        | "s3_access_key_required"
        | "azure_connection_string_required"
        | "s3_secret_key_required"
        | "cannot_store_file_to_content_storage"
        | "unexpected_error_while_publishing_to_content_storage"
        | "webhook_responded_with_non_200_status"
        | "unexpected_error_while_executing_webhook"
        | "content_storage_is_in_use"
        | "cannot_set_state_for_missing_translation"
        | "no_project_id_provided"
        | "license_key_not_provided"
        | "subscription_already_canceled"
        | "user_is_subscribed_to_paid_plan"
        | "cannot_create_free_plan_without_fixed_type"
        | "cannot_modify_plan_free_status"
        | "key_id_not_provided"
        | "free_self_hosted_seat_limit_exceeded"
        | "advanced_params_not_supported"
        | "plural_forms_not_found_for_language"
        | "nested_plurals_not_supported"
        | "message_is_not_plural"
        | "content_outside_plural_forms"
        | "invalid_plural_form"
        | "multiple_plurals_not_supported"
        | "custom_values_json_too_long"
        | "unsupported_po_message_format"
        | "plural_forms_data_loss"
        | "current_user_does_not_own_image"
        | "user_cannot_view_this_organization"
        | "user_is_not_owner_of_organization"
        | "pak_created_for_different_project"
        | "custom_slug_is_only_applicable_for_custom_storage"
        | "invalid_slug_format"
        | "batch_job_cancellation_timeout"
        | "import_failed"
        | "cannot_add_more_then_1000_languages"
        | "no_data_to_import"
        | "multiple_namespaces_mapped_to_single_file"
        | "multiple_mappings_for_same_file_language_name"
        | "multiple_mappings_for_null_file_language_name"
        | "too_many_mappings_for_file"
        | "missing_placeholder_in_template"
        | "tag_not_found"
        | "cannot_parse_encrypted_slack_login_data"
        | "slack_workspace_not_found"
        | "cannot_fetch_user_details_from_slack"
        | "slack_missing_scope"
        | "slack_not_connected_to_your_account"
        | "slack_invalid_command"
        | "slack_not_subscribed_yet"
        | "slack_connection_failed"
        | "tolgee_account_already_connected"
        | "slack_not_configured"
        | "slack_workspace_already_connected"
        | "slack_connection_error"
        | "email_verification_code_not_valid"
        | "cannot_subscribe_to_free_plan"
        | "plan_auto_assignment_only_for_free_plans"
        | "plan_auto_assignment_only_for_private_plans"
        | "task_not_found"
        | "task_not_finished"
        | "task_not_open"
        | "translation_agency_not_found"
        | "this_feature_is_not_implemented_in_oss"
        | "sso_token_exchange_failed"
        | "sso_user_info_retrieval_failed"
        | "sso_id_token_expired"
        | "sso_user_cannot_create_organization"
        | "sso_cant_verify_user"
        | "sso_auth_missing_domain"
        | "sso_domain_not_found_or_disabled"
        | "native_authentication_disabled"
        | "invitation_organization_mismatch"
        | "user_is_managed_by_organization"
        | "cannot_set_sso_provider_missing_fields"
        | "namespaces_cannot_be_disabled_when_namespace_exists"
        | "namespace_cannot_be_used_when_feature_is_disabled"
        | "sso_domain_not_allowed"
        | "sso_login_forced_for_this_account"
        | "date_has_to_be_in_the_future"
        | "custom_plan_and_plan_id_cannot_be_set_together"
        | "specify_plan_id_or_custom_plan"
        | "custom_plans_has_to_be_private"
        | "cannot_create_free_plan_with_prices"
        | "subscription_not_scheduled_for_cancellation"
        | "cannot_cancel_trial"
        | "cannot_update_without_modification"
        | "current_subscription_is_not_trialing";
      params?: { [key: string]: unknown }[];
    };
    ExampleItem: {
      key: string;
      keyNamespace?: string;
      source: string;
      target: string;
    };
    GetMySubscriptionDto: {
      instanceId: string;
      licenseKey: string;
    };
    GoToCustomerPortalModel: {
      url: string;
    };
    InconsistentSubscriptionModel: {
      id: components["schemas"]["SubscriptionId"];
      organization?: components["schemas"]["SimpleOrganizationModel"];
      /** Format: int64 */
      organizationId: number;
      stripeSubscriptionId: string;
      stripeSubscriptionStatus: string;
      tolgeeSubscriptionStatus:
        | "ACTIVE"
        | "CANCELED"
        | "PAST_DUE"
        | "UNPAID"
        | "ERROR"
        | "TRIALING"
        | "KEY_USED_BY_ANOTHER_INSTANCE"
        | "UNKNOWN";
    };
    InvoiceModel: {
      /** Format: int64 */
      createdAt: number;
      hasUsage: boolean;
      /** Format: int64 */
      id: number;
      /** @description The number on the invoice */
      number: string;
      /** @description Whether pdf is ready to download. If not, wait around few minutes until it's generated. */
      pdfReady: boolean;
      taxRatePercentage?: number;
      /** @description The Total amount with tax */
      total: number;
    };
    Metadata: {
      closeItems: components["schemas"]["ExampleItem"][];
      examples: components["schemas"]["ExampleItem"][];
      keyDescription?: string;
      languageDescription?: string;
      projectDescription?: string;
    };
    MtCreditsPriceModel: {
      /** Format: int64 */
      amount: number;
      /** Format: int64 */
      id: number;
      price: number;
    };
    MtResult: {
      contextDescription?: string;
      /** Format: int32 */
      price: number;
      translated?: string;
    };
    OrganizationWithSubscriptionsModel: {
      cloudSubscription?: components["schemas"]["AdministrationCloudSubscriptionModel"];
      organization: components["schemas"]["SimpleOrganizationModel"];
      selfHostedSubscriptions: components["schemas"]["SelfHostedEeSubscriptionModel"][];
    };
    PageMetadata: {
      /** Format: int64 */
      number?: number;
      /** Format: int64 */
      size?: number;
      /** Format: int64 */
      totalElements?: number;
      /** Format: int64 */
      totalPages?: number;
    };
    PagedModelInvoiceModel: {
      _embedded?: {
        invoices?: components["schemas"]["InvoiceModel"][];
      };
      page?: components["schemas"]["PageMetadata"];
    };
    PagedModelOrganizationWithSubscriptionsModel: {
      _embedded?: {
        organizations?: components["schemas"]["OrganizationWithSubscriptionsModel"][];
      };
      page?: components["schemas"]["PageMetadata"];
    };
    PagedModelSimpleOrganizationModel: {
      _embedded?: {
        organizations?: components["schemas"]["SimpleOrganizationModel"][];
      };
      page?: components["schemas"]["PageMetadata"];
    };
    PagedModelTranslationAgencyModel: {
      _embedded?: {
        translationAgencies?: components["schemas"]["TranslationAgencyModel"][];
      };
      page?: components["schemas"]["PageMetadata"];
    };
    PagedModelTranslationAgencyPublicModel: {
      _embedded?: {
        translationAgencies?: components["schemas"]["TranslationAgencyPublicModel"][];
      };
      page?: components["schemas"]["PageMetadata"];
    };
    PermissionModel: {
      /**
       * @deprecated
       * @description Deprecated (use translateLanguageIds).
       *
       * List of languages current user has TRANSLATE permission to. If null, all languages edition is permitted.
       * @example 200001,200004
       */
      permittedLanguageIds?: number[];
      /**
       * @description Granted scopes to the user. When user has type permissions, this field contains permission scopes of the type.
       * @example KEYS_EDIT,TRANSLATIONS_VIEW
       */
      scopes: (
        | "translations.view"
        | "translations.edit"
        | "keys.edit"
        | "screenshots.upload"
        | "screenshots.delete"
        | "screenshots.view"
        | "activity.view"
        | "languages.edit"
        | "admin"
        | "project.edit"
        | "members.view"
        | "members.edit"
        | "translation-comments.add"
        | "translation-comments.edit"
        | "translation-comments.set-state"
        | "translations.state-edit"
        | "keys.view"
        | "keys.delete"
        | "keys.create"
        | "batch-jobs.view"
        | "batch-jobs.cancel"
        | "translations.batch-by-tm"
        | "translations.batch-machine"
        | "content-delivery.manage"
        | "content-delivery.publish"
        | "webhooks.manage"
        | "tasks.view"
        | "tasks.edit"
      )[];
      /**
       * @description List of languages user can change state to. If null, changing state of all language values is permitted.
       * @example 200001,200004
       */
      stateChangeLanguageIds?: number[];
      /**
       * @description List of languages user can translate to. If null, all languages editing is permitted.
       * @example 200001,200004
       */
      translateLanguageIds?: number[];
      /** @description The user's permission type. This field is null if uses granular permissions */
      type?: "NONE" | "VIEW" | "TRANSLATE" | "REVIEW" | "EDIT" | "MANAGE";
      /**
       * @description List of languages user can view. If null, all languages view is permitted.
       * @example 200001,200004
       */
      viewLanguageIds?: number[];
    };
    PlanIncludedUsageModel: {
      /** Format: int64 */
      mtCredits: number;
      /** Format: int64 */
      seats: number;
      /** Format: int64 */
      translationSlots: number;
      /** Format: int64 */
      translations: number;
    };
    PlanIncludedUsageRequest: {
      /** Format: int64 */
      mtCredits: number;
      /** Format: int64 */
      seats: number;
      /** Format: int64 */
      translations: number;
    };
    PlanPricesModel: {
      perSeat: number;
      perThousandMtCredits?: number;
      perThousandTranslations?: number;
      subscriptionMonthly: number;
      subscriptionYearly: number;
    };
    PlanPricesRequest: {
      perSeat?: number;
      perThousandMtCredits?: number;
      perThousandTranslations?: number;
      subscriptionMonthly: number;
      subscriptionYearly: number;
    };
    PreferredAgencyResponse: {
      /** Format: int64 */
      preferredAgencyId?: number;
    };
    PrepareSetEeLicenceKeyModel: {
      plan: components["schemas"]["SelfHostedEePlanModel"];
      usage: components["schemas"]["UsageModel"];
    };
    PrepareSetLicenseKeyDto: {
      licenseKey: string;
      /** Format: int64 */
      seats: number;
    };
    ReleaseKeyDto: {
      licenseKey: string;
    };
    ReportErrorDto: {
      licenseKey: string;
      stackTrace: string;
    };
    ReportUsageDto: {
      licenseKey: string;
      /** Format: int64 */
      seats: number;
    };
    SelfHostedEeFreeSubscribeRequest: {
      /**
       * Format: int64
       * @description Id of the subscription plan
       */
      planId: number;
    };
    SelfHostedEePlanAdministrationModel: {
      enabledFeatures: (
        | "GRANULAR_PERMISSIONS"
        | "PRIORITIZED_FEATURE_REQUESTS"
        | "PREMIUM_SUPPORT"
        | "DEDICATED_SLACK_CHANNEL"
        | "ASSISTED_UPDATES"
        | "DEPLOYMENT_ASSISTANCE"
        | "BACKUP_CONFIGURATION"
        | "TEAM_TRAINING"
        | "ACCOUNT_MANAGER"
        | "STANDARD_SUPPORT"
        | "PROJECT_LEVEL_CONTENT_STORAGES"
        | "WEBHOOKS"
        | "MULTIPLE_CONTENT_DELIVERY_CONFIGS"
        | "AI_PROMPT_CUSTOMIZATION"
        | "SLACK_INTEGRATION"
        | "TASKS"
        | "SSO"
        | "ORDER_TRANSLATION"
      )[];
      forOrganizationIds: number[];
      free: boolean;
      hasYearlyPrice: boolean;
      /** Format: int64 */
      id: number;
      includedUsage: components["schemas"]["PlanIncludedUsageModel"];
      name: string;
      nonCommercial: boolean;
      prices: components["schemas"]["PlanPricesModel"];
      public: boolean;
      stripeProductId: string;
    };
    SelfHostedEePlanModel: {
      enabledFeatures: (
        | "GRANULAR_PERMISSIONS"
        | "PRIORITIZED_FEATURE_REQUESTS"
        | "PREMIUM_SUPPORT"
        | "DEDICATED_SLACK_CHANNEL"
        | "ASSISTED_UPDATES"
        | "DEPLOYMENT_ASSISTANCE"
        | "BACKUP_CONFIGURATION"
        | "TEAM_TRAINING"
        | "ACCOUNT_MANAGER"
        | "STANDARD_SUPPORT"
        | "PROJECT_LEVEL_CONTENT_STORAGES"
        | "WEBHOOKS"
        | "MULTIPLE_CONTENT_DELIVERY_CONFIGS"
        | "AI_PROMPT_CUSTOMIZATION"
        | "SLACK_INTEGRATION"
        | "TASKS"
        | "SSO"
        | "ORDER_TRANSLATION"
      )[];
      free: boolean;
      hasYearlyPrice: boolean;
      /** Format: int64 */
      id: number;
      includedUsage: components["schemas"]["PlanIncludedUsageModel"];
      name: string;
      nonCommercial: boolean;
      prices: components["schemas"]["PlanPricesModel"];
      public: boolean;
    };
    SelfHostedEePlanRequest: {
      /** Format: date-time */
      availableUntil?: string;
      enabledFeatures: (
        | "GRANULAR_PERMISSIONS"
        | "PRIORITIZED_FEATURE_REQUESTS"
        | "PREMIUM_SUPPORT"
        | "DEDICATED_SLACK_CHANNEL"
        | "ASSISTED_UPDATES"
        | "DEPLOYMENT_ASSISTANCE"
        | "BACKUP_CONFIGURATION"
        | "TEAM_TRAINING"
        | "ACCOUNT_MANAGER"
        | "STANDARD_SUPPORT"
        | "PROJECT_LEVEL_CONTENT_STORAGES"
        | "WEBHOOKS"
        | "MULTIPLE_CONTENT_DELIVERY_CONFIGS"
        | "AI_PROMPT_CUSTOMIZATION"
        | "SLACK_INTEGRATION"
        | "TASKS"
        | "SSO"
        | "ORDER_TRANSLATION"
      )[];
      forOrganizationIds: number[];
      free: boolean;
      includedUsage: components["schemas"]["PlanIncludedUsageRequest"];
      name: string;
      nonCommercial: boolean;
      /** Format: date-time */
      notAvailableBefore?: string;
      prices: components["schemas"]["PlanPricesRequest"];
      public: boolean;
      stripeProductId?: string;
      /** Format: date-time */
      usableUntil?: string;
    };
    SelfHostedEeSubscribeRequest: {
      period: "MONTHLY" | "YEARLY";
      /**
       * Format: int64
       * @description Id of the subscription plan
       */
      planId: number;
    };
    SelfHostedEeSubscriptionModel: {
      /** Format: int64 */
      createdAt: number;
      currentBillingPeriod: "MONTHLY" | "YEARLY";
      /** Format: int64 */
      currentPeriodEnd?: number;
      /** Format: int64 */
      currentPeriodStart?: number;
      estimatedCosts?: number;
      /** Format: int64 */
      id: number;
      licenseKey?: string;
      plan: components["schemas"]["SelfHostedEePlanModel"];
      status:
        | "ACTIVE"
        | "CANCELED"
        | "PAST_DUE"
        | "UNPAID"
        | "ERROR"
        | "TRIALING"
        | "KEY_USED_BY_ANOTHER_INSTANCE"
        | "UNKNOWN";
    };
    SetLicenseKeyLicensingDto: {
      instanceId: string;
      licenseKey: string;
      /** Format: int64 */
      seats: number;
    };
    SimpleOrganizationModel: {
      avatar?: components["schemas"]["Avatar"];
      basePermissions: components["schemas"]["PermissionModel"];
      /** @example This is a beautiful organization full of beautiful and clever people */
      description?: string;
      /** Format: int64 */
      id: number;
      /** @example Beautiful organization */
      name: string;
      /** @example btforg */
      slug: string;
    };
    StripeProductModel: {
      /** Format: int64 */
      created: number;
      id: string;
      name: string;
    };
    SubscribeModel: {
      url: string;
    };
    SubscriptionId: {
      /** Format: int64 */
      id: number;
      type: "CLOUD" | "SELF_HOSTED";
    };
    SubscriptionUpdatePreviewItem: {
      amount: number;
      description: string;
      taxRate: number;
    };
    SubscriptionUpdatePreviewModel: {
      amountDue: number;
      endingBalance: number;
      items: components["schemas"]["SubscriptionUpdatePreviewItem"][];
      /** Format: int64 */
      prorationDate: number;
      total: number;
      updateToken: string;
    };
    SumUsageItemModel: {
      total: number;
      /** Format: int64 */
      unusedQuantity: number;
      /** Format: int64 */
      usedQuantity: number;
      /** Format: int64 */
      usedQuantityOverPlan: number;
    };
    TelemetryReportRequest: {
      /** Format: int64 */
      distinctLanguagesCount: number;
      instanceId: string;
      /** Format: int64 */
      languagesCount: number;
      /** Format: int64 */
      projectsCount: number;
      /** Format: int64 */
      translationsCount: number;
      /** Format: int64 */
      usersCount: number;
    };
    TolgeeTranslateParams: {
      formality?: "FORMAL" | "INFORMAL" | "DEFAULT";
      isBatch: boolean;
      keyName?: string;
      metadata?: components["schemas"]["Metadata"];
      pluralFormExamples?: { [key: string]: string };
      pluralForms?: { [key: string]: string };
      sourceTag: string;
      targetTag: string;
      text: string;
    };
    TranslationAgencyModel: {
      avatar?: components["schemas"]["Avatar"];
      description?: string;
      email?: string;
      emailBcc: string[];
      /** Format: int64 */
      id: number;
      name: string;
      services: string[];
      url?: string;
    };
    TranslationAgencyPublicModel: {
      avatar?: components["schemas"]["Avatar"];
      description?: string;
      /** Format: int64 */
      id: number;
      name: string;
      services: string[];
      url?: string;
    };
    UpdateSubscriptionPrepareRequest: {
      period: "MONTHLY" | "YEARLY";
      /**
       * Format: int64
       * @description Id of the subscription plan
       */
      planId: number;
    };
    UpdateSubscriptionRequest: {
      token: string;
    };
    UpdateTranslationAgencyRequest: {
      description: string;
      email: string;
      emailBcc: string[];
      name: string;
      services: string[];
      url: string;
    };
    UpdateTrialEndDateRequest: {
      /** Format: int64 */
      trialEnd: number;
    };
    UsageModel: {
      /** @description Relevant for invoices only. When there are applied stripe credits, we need to reduce the total price by this amount. */
      appliedStripeCredits?: number;
      credits?: components["schemas"]["SumUsageItemModel"];
      seats: components["schemas"]["AverageProportionalUsageItemModel"];
      subscriptionPrice?: number;
      total: number;
      translations: components["schemas"]["AverageProportionalUsageItemModel"];
    };
  };
}

export interface operations {
  addUsageItemsToInvoiceAndFinalizeIt: {
    parameters: {
      path: {
        invoiceId: string;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  /** Cancel local subscriptions */
  cancelLocalSubscriptions: {
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CancelLocalSubscriptionsRequest"];
      };
    };
  };
  getPlans_2: {
    parameters: {
      query: {
        /**
         * Filters only plans which can be assignable to the provided organization it.
         *
         * Plan can be assignable to organization because of one of these reasons:
         * - plan is private free, visible to organization
         * - plan is paid (Assignable as trial)
         */
        filterAssignableToOrganization?: number;
        filterPlanIds?: number[];
        filterPublic?: boolean;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["CollectionModelAdministrationCloudPlanModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  create_2: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["AdministrationCloudPlanModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CloudPlanRequest"];
      };
    };
  };
  getPlan_1: {
    parameters: {
      path: {
        planId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["AdministrationCloudPlanModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  updatePlan_1: {
    parameters: {
      path: {
        planId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["AdministrationCloudPlanModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CloudPlanRequest"];
      };
    };
  };
  deletePlan_1: {
    parameters: {
      path: {
        planId: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  getPlanOrganizations_1: {
    parameters: {
      path: {
        planId: number;
      };
      query: {
        /** Zero-based page index (0..N) */
        page?: number;
        /** The size of the page to be returned */
        size?: number;
        /** Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        sort?: string[];
        search?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["PagedModelSimpleOrganizationModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  getAllFeatures: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": (
            | "GRANULAR_PERMISSIONS"
            | "PRIORITIZED_FEATURE_REQUESTS"
            | "PREMIUM_SUPPORT"
            | "DEDICATED_SLACK_CHANNEL"
            | "ASSISTED_UPDATES"
            | "DEPLOYMENT_ASSISTANCE"
            | "BACKUP_CONFIGURATION"
            | "TEAM_TRAINING"
            | "ACCOUNT_MANAGER"
            | "STANDARD_SUPPORT"
            | "PROJECT_LEVEL_CONTENT_STORAGES"
            | "WEBHOOKS"
            | "MULTIPLE_CONTENT_DELIVERY_CONFIGS"
            | "AI_PROMPT_CUSTOMIZATION"
            | "SLACK_INTEGRATION"
            | "TASKS"
            | "SSO"
            | "ORDER_TRANSLATION"
          )[];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  /** Returns active cloud subscriptions, which have inconsistent state in Tolgee and Stripe */
  getInconsistentSubscriptions: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["CollectionModelInconsistentSubscriptionModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  getOrganizations: {
    parameters: {
      query: {
        /** Zero-based page index (0..N) */
        page?: number;
        /** The size of the page to be returned */
        size?: number;
        /** Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        sort?: string[];
        search?: string;
        withCloudPlanId?: number;
        hasSelfHostedSubscription?: boolean;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["PagedModelOrganizationWithSubscriptionsModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  getPlans_1: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["CollectionModelSelfHostedEePlanAdministrationModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  create_1: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["SelfHostedEePlanAdministrationModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SelfHostedEePlanRequest"];
      };
    };
  };
  getPlan: {
    parameters: {
      path: {
        planId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["SelfHostedEePlanAdministrationModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  updatePlan: {
    parameters: {
      path: {
        planId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["SelfHostedEePlanAdministrationModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SelfHostedEePlanRequest"];
      };
    };
  };
  deletePlan: {
    parameters: {
      path: {
        planId: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  getPlanOrganizations: {
    parameters: {
      path: {
        planId: number;
      };
      query: {
        /** Zero-based page index (0..N) */
        page?: number;
        /** The size of the page to be returned */
        size?: number;
        /** Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        sort?: string[];
        search?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["PagedModelSimpleOrganizationModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  getStripeProducts: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["CollectionModelStripeProductModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  getAll_1: {
    parameters: {
      query: {
        /** Zero-based page index (0..N) */
        page?: number;
        /** The size of the page to be returned */
        size?: number;
        /** Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        sort?: string[];
        search?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["PagedModelTranslationAgencyModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  create: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["TranslationAgencyModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateTranslationAgencyRequest"];
      };
    };
  };
  get_1: {
    parameters: {
      path: {
        agencyId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["TranslationAgencyModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  update: {
    parameters: {
      path: {
        agencyId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["TranslationAgencyModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateTranslationAgencyRequest"];
      };
    };
  };
  delete: {
    parameters: {
      path: {
        agencyId: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  uploadAvatar: {
    parameters: {
      path: {
        agencyId: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
    requestBody: {
      content: {
        "multipart/form-data": {
          /** Format: binary */
          avatar: string;
        };
      };
    };
  };
  removeAvatar: {
    parameters: {
      path: {
        agencyId: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  /** Assigns a private free plan or trial plan to an organization. */
  assignCloudPlan: {
    parameters: {
      path: {
        organizationId: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AssignPlanRequest"];
      };
    };
  };
  updateTrialEndDAte: {
    parameters: {
      path: {
        organizationId: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateTrialEndDateRequest"];
      };
    };
  };
  getAll: {
    parameters: {
      query: {
        /** Zero-based page index (0..N) */
        page?: number;
        /** The size of the page to be returned */
        size?: number;
        /** Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        sort?: string[];
        search?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["PagedModelTranslationAgencyPublicModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  get: {
    parameters: {
      path: {
        agencyId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["TranslationAgencyPublicModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  getBillingInfo: {
    parameters: {
      path: {
        organizationId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["BillingInfoModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  getBuyMoreCreditsCheckoutSessionUrl: {
    parameters: {
      path: {
        organizationId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["BuyMoreCreditsModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["BuyMoreCreditsRequest"];
      };
    };
  };
  /** When applied, current subscription will be cancelled at the period end. */
  cancelSubscription: {
    parameters: {
      path: {
        organizationId: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  goToCustomerPortal: {
    parameters: {
      path: {
        organizationId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["GoToCustomerPortalModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  getExpectedUsage_1: {
    parameters: {
      path: {
        organizationId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["UsageModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  /** Returns CSV file with usage detail for each time period and it's usage. */
  getExpectedUsageDetail: {
    parameters: {
      path: {
        organizationId: number;
        type: "SEATS" | "TRANSLATIONS";
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "text/csv": string;
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  getInvoices: {
    parameters: {
      path: {
        organizationId: number;
      };
      query: {
        /** Zero-based page index (0..N) */
        page?: number;
        /** The size of the page to be returned */
        size?: number;
        /** Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        sort?: string[];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["PagedModelInvoiceModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  getInvoicePdf: {
    parameters: {
      path: {
        organizationId: number;
        invoiceId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/pdf": string;
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  getUsage: {
    parameters: {
      path: {
        organizationId: number;
        invoiceId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["UsageModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  /** Returns CSV file with usage detail for each time period and it's usage. */
  getUsageDetail: {
    parameters: {
      path: {
        organizationId: number;
        invoiceId: number;
        type: "SEATS" | "TRANSLATIONS";
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "text/csv": string;
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  /** Returns list of available cloud plans for specific organization.) */
  getCloudPlans: {
    parameters: {
      path: {
        organizationId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["CollectionModelCloudPlanModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  prepareUpdateSubscription: {
    parameters: {
      path: {
        organizationId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["SubscriptionUpdatePreviewModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateSubscriptionPrepareRequest"];
      };
    };
  };
  refresh: {
    parameters: {
      path: {
        organizationId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["CloudSubscriptionModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  /** When subscription is scheduled to cancel on the period end, it can be restored. */
  restoreSubscription: {
    parameters: {
      path: {
        organizationId: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  getSelfHostedPlans: {
    parameters: {
      path: {
        organizationId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["CollectionModelSelfHostedEePlanModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  refreshSelfHostedEeSubscriptions: {
    parameters: {
      path: {
        organizationId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["CollectionModelSelfHostedEeSubscriptionModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  setupFreeEeSubscription: {
    parameters: {
      path: {
        organizationId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["SelfHostedEeSubscriptionModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SelfHostedEeFreeSubscribeRequest"];
      };
    };
  };
  getSelfHostedEeSubscriptions: {
    parameters: {
      path: {
        organizationId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["CollectionModelSelfHostedEeSubscriptionModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  setupEeSubscription: {
    parameters: {
      path: {
        organizationId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["SubscribeModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SelfHostedEeSubscribeRequest"];
      };
    };
  };
  cancelEeSubscription: {
    parameters: {
      path: {
        organizationId: number;
        subscriptionId: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  getExpectedUsage: {
    parameters: {
      path: {
        organizationId: number;
        subscriptionId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["UsageModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  subscribe: {
    parameters: {
      path: {
        organizationId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["SubscribeModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CloudSubscribeRequest"];
      };
    };
  };
  getSubscription: {
    parameters: {
      path: {
        organizationId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["CloudSubscriptionModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  updateSubscription: {
    parameters: {
      path: {
        organizationId: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateSubscriptionRequest"];
      };
    };
  };
  createTranslationOrder: {
    parameters: {
      query: {
        filterState?: (
          | "UNTRANSLATED"
          | "TRANSLATED"
          | "REVIEWED"
          | "DISABLED"
        )[];
        filterOutdated?: boolean;
      };
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateTranslationOrderRequest"];
      };
    };
  };
  getPreferredAgency: {
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["PreferredAgencyResponse"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  getMtCreditPrices: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["CollectionModelMtCreditsPriceModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  getPlans: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["CollectionModelCloudPlanModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  prepareSetLicenseKey: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["PrepareSetEeLicenceKeyModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PrepareSetLicenseKeyDto"];
      };
    };
  };
  releaseKey: {
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ReleaseKeyDto"];
      };
    };
  };
  reportError: {
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ReportErrorDto"];
      };
    };
  };
  reportUsage: {
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ReportUsageDto"];
      };
    };
  };
  onLicenceSetKey: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["SelfHostedEeSubscriptionModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SetLicenseKeyLicensingDto"];
      };
    };
  };
  getMySubscription: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["SelfHostedEeSubscriptionModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["GetMySubscriptionDto"];
      };
    };
  };
  report: {
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TelemetryReportRequest"];
      };
    };
  };
  translate: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["MtResult"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TolgeeTranslateParams"];
      };
    };
  };
}

export interface external {}
