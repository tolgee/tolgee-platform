/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/api/project/{projectId}/export/jsonZip": {
    /** Exports data as ZIP of jsons */
    get: operations["doExportJsonZip"];
  };
  "/api/public/authorize_oauth/sso/authentication-url": {
    post: operations["getAuthenticationUrl"];
  };
  "/api/public/authorize_oauth/{serviceType}": {
    /** Authenticates user using third party oAuth service */
    get: operations["authenticateUser_1"];
  };
  "/api/public/configuration": {
    get: operations["getPublicConfiguration"];
  };
  "/api/public/generatetoken": {
    post: operations["authenticateUser"];
  };
  "/api/public/invitation_info/{code}": {
    get: operations["invitationInfo"];
  };
  "/api/public/reset_password_request": {
    post: operations["resetPasswordRequest"];
  };
  "/api/public/reset_password_set": {
    /** Checks the password reset code from e-mail */
    post: operations["resetPasswordSet"];
  };
  "/api/public/reset_password_validate/{email}/{code}": {
    get: operations["resetPasswordValidate"];
  };
  "/api/public/sign_up": {
    /** When E-mail verification is enabled, null is returned. Otherwise JWT token is provided. */
    post: operations["signUp"];
  };
  "/api/public/validate_email": {
    post: operations["validateEmail"];
  };
  "/api/public/verify_email/{userId}/{code}": {
    /** It checks whether the code from email is valid */
    get: operations["verifyEmail"];
  };
  "/v2/administration/organizations": {
    get: operations["getOrganizations"];
  };
  "/v2/administration/users": {
    get: operations["getUsers"];
  };
  "/v2/administration/users/{userId}": {
    delete: operations["deleteUser"];
  };
  "/v2/administration/users/{userId}/disable": {
    /** Disables user account. User will not be able to log in, but their user data will be preserved, so you can enable the user later using the `enable` endpoint. */
    put: operations["disableUser"];
  };
  "/v2/administration/users/{userId}/enable": {
    /** Enables previously disabled user. */
    put: operations["enableUser"];
  };
  "/v2/administration/users/{userId}/generate-token": {
    /** Generates a JWT token for the user with provided ID. This is useful, when need to debug of the user's account. Or when an operation is required to be executed on behalf of the user. */
    get: operations["generateUserToken"];
  };
  "/v2/administration/users/{userId}/set-role/{role}": {
    /** Set's the global role on the Tolgee Platform server. */
    put: operations["setRole"];
  };
  "/v2/announcement": {
    /** Returns the latest announcement for the currently authenticated user */
    get: operations["getLatest"];
  };
  "/v2/announcement/dismiss": {
    /** Dismisses the latest announcement for the currently authenticated user */
    post: operations["dismiss"];
  };
  "/v2/api-keys": {
    get: operations["allByUser"];
    /** Creates new API key with provided scopes */
    post: operations["create_13"];
  };
  "/v2/api-keys/availableScopes": {
    get: operations["getScopes"];
  };
  "/v2/api-keys/current": {
    /** Returns info the API key which user currently authenticated with. Otherwise responds with 400 status code. */
    get: operations["getCurrent_1"];
  };
  "/v2/api-keys/{apiKeyId}": {
    put: operations["update_9"];
    delete: operations["delete_13"];
  };
  "/v2/api-keys/{apiKeyId}/regenerate": {
    put: operations["regenerate_1"];
  };
  "/v2/api-keys/{keyId}": {
    /** Returns specific API key info */
    get: operations["get_21"];
  };
  "/v2/auth-provider/changed": {
    get: operations["getChangedAuthProvider"];
  };
  "/v2/auth-provider/changed/accept": {
    post: operations["acceptChangeAuthProvider"];
  };
  "/v2/auth-provider/changed/reject": {
    post: operations["rejectChangeAuthProvider"];
  };
  "/v2/auth-provider/current": {
    get: operations["getCurrentAuthProvider"];
  };
  "/v2/ee-license/info": {
    get: operations["getInfo_5"];
  };
  "/v2/ee-license/prepare-set-license-key": {
    /** Get info about the upcoming EE subscription. This will show, how much the subscription will cost when key is applied. */
    post: operations["prepareSetLicenseKey"];
  };
  "/v2/ee-license/refresh": {
    /** This will refresh the subscription information from the license server and update the subscription info. */
    put: operations["refreshSubscription"];
  };
  "/v2/ee-license/release-license-key": {
    /** This will remove the licence key from the instance. */
    put: operations["release"];
  };
  "/v2/ee-license/set-license-key": {
    put: operations["setLicenseKey"];
  };
  "/v2/image-upload": {
    post: operations["upload"];
  };
  "/v2/image-upload/{ids}": {
    delete: operations["delete_12"];
  };
  "/v2/invitations/{code}/accept": {
    get: operations["acceptInvitation"];
  };
  "/v2/invitations/{invitationId}": {
    delete: operations["deleteInvitation"];
  };
  "/v2/organizations": {
    /** Returns all organizations, which is current user allowed to view */
    get: operations["getAll_10"];
    post: operations["create_12"];
  };
  "/v2/organizations/{id}": {
    get: operations["get_20"];
    put: operations["update_8"];
    /** Deletes organization and all its data including projects */
    delete: operations["delete_11"];
  };
  "/v2/organizations/{id}/avatar": {
    put: operations["uploadAvatar_2"];
    delete: operations["removeAvatar_2"];
  };
  "/v2/organizations/{id}/invite": {
    /** Generates invitation link for organization, so users can join organization. The invitation can also be sent to an e-mail address. */
    put: operations["inviteUser_1"];
  };
  "/v2/organizations/{id}/leave": {
    /** Remove current user from organization */
    put: operations["leaveOrganization"];
  };
  "/v2/organizations/{id}/projects": {
    /** Returns all organization projects the user has access to */
    get: operations["getAllProjects_1"];
  };
  "/v2/organizations/{id}/users": {
    /** Returns all users in organization. The result also contains users who are only members of projects in the organization. */
    get: operations["getAllUsers_1"];
  };
  "/v2/organizations/{organizationId}/invitations": {
    get: operations["getInvitations"];
  };
  "/v2/organizations/{organizationId}/machine-translation-credit-balance": {
    /** Returns machine translation credit balance for organization */
    get: operations["getOrganizationCredits"];
  };
  "/v2/organizations/{organizationId}/projects-with-stats": {
    /** Returns all projects (including statistics) where current user has any permission (except none) */
    get: operations["getAllWithStatistics_2"];
  };
  "/v2/organizations/{organizationId}/set-base-permissions": {
    /** Set default granular (scope-based) permissions for organization users, who don't have direct project permissions set. */
    put: operations["setBasePermissions"];
  };
  "/v2/organizations/{organizationId}/set-base-permissions/{permissionType}": {
    /** Sets default (level-based) permission for organization */
    put: operations["setBasePermissions_1"];
  };
  "/v2/organizations/{organizationId}/slack/connect": {
    /**
     * This endpoint allows the owner of an organization to connect a Slack workspace to their organization.
     * Checks if the Slack integration feature is enabled for the organization and proceeds with the connection.
     */
    post: operations["connectWorkspace"];
  };
  "/v2/organizations/{organizationId}/slack/get-connect-url": {
    /** Returns URL to which user should be redirected to connect Slack workspace */
    get: operations["connectToSlack"];
  };
  "/v2/organizations/{organizationId}/slack/workspaces": {
    /** Returns a list of workspaces connected to the organization */
    get: operations["getConnectedWorkspaces"];
  };
  "/v2/organizations/{organizationId}/slack/workspaces/{workspaceId}": {
    /** Disconnects a workspace from the organization */
    delete: operations["disconnectWorkspace"];
  };
  "/v2/organizations/{organizationId}/sso": {
    get: operations["findProvider"];
    put: operations["setProvider"];
  };
  "/v2/organizations/{organizationId}/usage": {
    get: operations["getUsage"];
  };
  "/v2/organizations/{organizationId}/users/{userId}": {
    delete: operations["removeUser"];
  };
  "/v2/organizations/{organizationId}/users/{userId}/set-role": {
    /** Sets user role in organization. Owner or Member. */
    put: operations["setUserRole"];
  };
  "/v2/organizations/{slug}": {
    get: operations["get_19"];
  };
  "/v2/organizations/{slug}/projects": {
    /** Returns all organization projects the user has access to */
    get: operations["getAllProjects"];
  };
  "/v2/organizations/{slug}/projects-with-stats": {
    /** Returns all projects (including statistics) where current user has any permission (except none) */
    get: operations["getAllWithStatistics_1"];
  };
  "/v2/pats": {
    get: operations["getAll_9"];
    post: operations["create_11"];
  };
  "/v2/pats/current": {
    /** Returns current Personal Access Token. If the request is not authenticated with a Personal Access Token, it will return 400 response status. */
    get: operations["getCurrent"];
  };
  "/v2/pats/{id}": {
    get: operations["get_18"];
    /** Updates Personal Access Token */
    put: operations["update_7"];
    /** Deletes Personal Access Token */
    delete: operations["delete_10"];
  };
  "/v2/pats/{id}/regenerate": {
    /** Regenerates Personal Access Token. It generates new token value and updates its time of expiration. */
    put: operations["regenerate"];
  };
  "/v2/preferred-organization": {
    /** Returns preferred organization. If server allows users to create organization, preferred organization is automatically created if user doesn't have access to any organization. */
    get: operations["getPreferred"];
  };
  "/v2/projects": {
    /** Returns all projects where current user has any permission */
    get: operations["getAll"];
    /** Creates a new project with languages and initial settings. */
    post: operations["createProject"];
  };
  "/v2/projects/with-stats": {
    /** Returns all projects (including statistics) where current user has any permission */
    get: operations["getAllWithStatistics"];
  };
  "/v2/projects/{projectId}": {
    get: operations["get_4"];
    put: operations["editProject"];
    delete: operations["deleteProject"];
  };
  "/v2/projects/{projectId}/activity": {
    get: operations["getActivity"];
  };
  "/v2/projects/{projectId}/activity/revisions/{revisionId}": {
    get: operations["getSingleRevision"];
  };
  "/v2/projects/{projectId}/activity/revisions/{revisionId}/modified-entities": {
    get: operations["getModifiedEntitiesByRevision"];
  };
  "/v2/projects/{projectId}/ai-prompt-customization": {
    get: operations["getPromptProjectCustomization"];
    put: operations["setPromptProjectCustomization"];
  };
  "/v2/projects/{projectId}/all-keys": {
    get: operations["getAllKeys"];
  };
  "/v2/projects/{projectId}/all-keys-with-disabled-languages": {
    /**
     * Returns all project key with any disabled language.
     *
     * If key has no disabled language, it is not returned.
     */
    get: operations["getDisabledLanguages_2"];
  };
  "/v2/projects/{projectId}/api-keys": {
    /** Returns all API keys for specified project */
    get: operations["allByProject"];
  };
  "/v2/projects/{projectId}/auto-translation-settings": {
    /** Returns default auto translation settings for project (deprecated: use per language config with null language id) */
    get: operations["getAutoTranslationSettings"];
    /** Sets default auto-translation settings for project (deprecated: use per language config with null language id) */
    put: operations["setAutoTranslationSettings"];
  };
  "/v2/projects/{projectId}/avatar": {
    put: operations["uploadAvatar_1"];
    delete: operations["removeAvatar_1"];
  };
  "/v2/projects/{projectId}/batch-jobs": {
    get: operations["list_3"];
  };
  "/v2/projects/{projectId}/batch-jobs/{id}": {
    get: operations["get_12"];
  };
  "/v2/projects/{projectId}/batch-jobs/{id}/cancel": {
    /** Stops batch operation if possible. */
    put: operations["cancel"];
  };
  "/v2/projects/{projectId}/big-meta": {
    /** Stores a bigMeta for a project */
    post: operations["store_2"];
  };
  "/v2/projects/{projectId}/content-delivery-configs": {
    get: operations["list_2"];
    post: operations["create_6"];
  };
  "/v2/projects/{projectId}/content-delivery-configs/{id}": {
    get: operations["get_9"];
    put: operations["update_4"];
    /** Immediately publishes content to the configured Content Delivery */
    post: operations["post"];
    delete: operations["delete_7"];
  };
  "/v2/projects/{projectId}/content-storages": {
    get: operations["list_1"];
    post: operations["create_5"];
  };
  "/v2/projects/{projectId}/content-storages/test": {
    post: operations["test_1"];
  };
  "/v2/projects/{projectId}/content-storages/{contentStorageId}": {
    get: operations["get_8"];
    put: operations["update_3"];
    delete: operations["delete_6"];
  };
  "/v2/projects/{projectId}/content-storages/{id}/test": {
    /** Tests existing Content Storage with new configuration. (Uses existing secrets, if nulls provided) */
    post: operations["testExisting"];
  };
  "/v2/projects/{projectId}/current-batch-jobs": {
    /** Returns all running and pending batch operations. Completed batch operations are returned only if they are not older than 1 hour. If user doesn't have permission to view all batch operations, only their operations are returned. */
    get: operations["currentJobs"];
  };
  "/v2/projects/{projectId}/export": {
    get: operations["exportData"];
    /** Exports data (post). Useful when exceeding allowed URL size. */
    post: operations["exportPost"];
  };
  "/v2/projects/{projectId}/import": {
    /** Prepares provided files to import. */
    post: operations["addFiles"];
    /** Deletes prepared import data. */
    delete: operations["cancelImport"];
  };
  "/v2/projects/{projectId}/import-settings": {
    /** Returns import settings for the authenticated user and the project. */
    get: operations["get_10"];
    /** Stores import settings for the authenticated user and the project. */
    put: operations["store"];
  };
  "/v2/projects/{projectId}/import/all-namespaces": {
    /** Returns all existing and imported namespaces */
    get: operations["getAllNamespaces_2"];
  };
  "/v2/projects/{projectId}/import/apply": {
    /** Imports the data prepared in previous step */
    put: operations["applyImport"];
  };
  "/v2/projects/{projectId}/import/apply-streaming": {
    /** Imports the data prepared in previous step. Streams current status. */
    put: operations["applyImportStreaming"];
  };
  "/v2/projects/{projectId}/import/result": {
    /** Returns the result of preparation. */
    get: operations["getImportResult"];
  };
  "/v2/projects/{projectId}/import/result/files/{fileId}/select-namespace": {
    /** Sets namespace for file to import. */
    put: operations["selectNamespace"];
  };
  "/v2/projects/{projectId}/import/result/files/{importFileId}/issues": {
    /** Returns issues for uploaded file. */
    get: operations["getImportFileIssues"];
  };
  "/v2/projects/{projectId}/import/result/languages/{importLanguageId}/reset-existing": {
    /** Resets existing language paired with language to import. */
    put: operations["resetExistingLanguage"];
  };
  "/v2/projects/{projectId}/import/result/languages/{importLanguageId}/select-existing/{existingLanguageId}": {
    /** Sets existing language to pair with language to import. Data will be imported to selected existing language when applied. */
    put: operations["selectExistingLanguage"];
  };
  "/v2/projects/{projectId}/import/result/languages/{languageId}": {
    /** Returns language prepared to import. */
    get: operations["getImportLanguage"];
    /** Deletes language prepared to import. */
    delete: operations["deleteLanguage"];
  };
  "/v2/projects/{projectId}/import/result/languages/{languageId}/resolve-all/set-keep-existing": {
    /** Resolves all translation conflicts for provided language. The old translations will be kept. */
    put: operations["resolveTranslationSetKeepExisting_2"];
  };
  "/v2/projects/{projectId}/import/result/languages/{languageId}/resolve-all/set-override": {
    /** Resolves all translation conflicts for provided language. The old translations will be overridden. */
    put: operations["resolveTranslationSetOverride_2"];
  };
  "/v2/projects/{projectId}/import/result/languages/{languageId}/translations": {
    /** Returns translations prepared to import. */
    get: operations["getImportTranslations"];
  };
  "/v2/projects/{projectId}/import/result/languages/{languageId}/translations/{translationId}/resolve/set-keep-existing": {
    /** Resolves translation conflict. The old translation will be kept. */
    put: operations["resolveTranslationSetKeepExisting"];
  };
  "/v2/projects/{projectId}/import/result/languages/{languageId}/translations/{translationId}/resolve/set-override": {
    /** Resolves translation conflict. The old translation will be overridden. */
    put: operations["resolveTranslationSetOverride"];
  };
  "/v2/projects/{projectId}/invitations": {
    get: operations["getProjectInvitations"];
  };
  "/v2/projects/{projectId}/invite": {
    put: operations["inviteUser"];
  };
  "/v2/projects/{projectId}/keys": {
    get: operations["getAll_1"];
    post: operations["create_2"];
    /** Delete one or multiple keys by their IDs in request body. Useful for larger requests esxceeding allowed URL length. */
    delete: operations["delete_4"];
  };
  "/v2/projects/{projectId}/keys/create": {
    post: operations["create_1"];
  };
  "/v2/projects/{projectId}/keys/import": {
    /** Imports new keys with translations. If key already exists, its translations and tags are not updated. */
    post: operations["importKeys_2"];
  };
  "/v2/projects/{projectId}/keys/import-resolvable": {
    /** Import's new keys with translations. Translations can be updated, when specified. */
    post: operations["importKeys"];
  };
  "/v2/projects/{projectId}/keys/info": {
    /** Returns information about keys. (KeyData, Screenshots, Translation in specified language)If key is not found, it's not included in the response. */
    post: operations["getInfo"];
  };
  "/v2/projects/{projectId}/keys/search": {
    /**
     * This endpoint helps you to find desired key by keyName, base translation or translation in specified language.
     *
     * Sort is ignored for this request.
     */
    get: operations["searchForKey"];
  };
  "/v2/projects/{projectId}/keys/select": {
    /** Returns all key IDs for specified filter values. This way, you can apply the same filter as in the translation view and get the resulting key IDs for future use. */
    get: operations["selectKeys_2"];
  };
  "/v2/projects/{projectId}/keys/{ids}": {
    delete: operations["delete_2"];
  };
  "/v2/projects/{projectId}/keys/{id}": {
    get: operations["get_6"];
    put: operations["edit"];
  };
  "/v2/projects/{projectId}/keys/{id}/big-meta": {
    get: operations["getBigMeta"];
  };
  "/v2/projects/{projectId}/keys/{id}/complex-update": {
    /** Edits key name, translations, tags, screenshots, and other data */
    put: operations["complexEdit"];
  };
  "/v2/projects/{projectId}/keys/{id}/disabled-languages": {
    /** Returns languages, in which key is disabled */
    get: operations["getDisabledLanguages"];
    /** Sets languages, in which key is disabled */
    put: operations["setDisabledLanguages"];
  };
  "/v2/projects/{projectId}/keys/{keyId}/auto-translate": {
    /**
     * Uses enabled auto-translation methods.
     * You need to set at least one of useMachineTranslation or useTranslationMemory to true.
     *
     * This will replace the the existing translation with the result obtained from specified source!
     */
    put: operations["autoTranslate"];
  };
  "/v2/projects/{projectId}/keys/{keyId}/screenshots": {
    get: operations["getKeyScreenshots_1"];
    post: operations["uploadScreenshot_1"];
  };
  "/v2/projects/{projectId}/keys/{keyId}/screenshots/{ids}": {
    delete: operations["deleteScreenshots_1"];
  };
  "/v2/projects/{projectId}/keys/{keyId}/tags": {
    /** Tags a key with tag. If tag with provided name doesn't exist, it is created */
    put: operations["tagKey"];
  };
  "/v2/projects/{projectId}/keys/{keyId}/tags/{tagId}": {
    /** Removes tag with provided id from key with provided id */
    delete: operations["removeTag"];
  };
  "/v2/projects/{projectId}/language-ai-prompt-customizations": {
    get: operations["getLanguagePromptCustomizations"];
  };
  "/v2/projects/{projectId}/languages": {
    get: operations["getAll_7"];
    post: operations["createLanguage"];
  };
  "/v2/projects/{projectId}/languages/{languageId}": {
    get: operations["get_16"];
    put: operations["editLanguage"];
    delete: operations["deleteLanguage_2"];
  };
  "/v2/projects/{projectId}/languages/{languageId}/ai-prompt-customization": {
    put: operations["setLanguagePromptCustomization"];
  };
  "/v2/projects/{projectId}/leave": {
    put: operations["leaveProject"];
  };
  "/v2/projects/{projectId}/machine-translation-credit-balance": {
    /** Returns machine translation credit balance for specified project */
    get: operations["getProjectCredits"];
  };
  "/v2/projects/{projectId}/machine-translation-language-info": {
    /** Get enabled services and configured formality for each language */
    get: operations["getMachineTranslationLanguageInfo"];
  };
  "/v2/projects/{projectId}/machine-translation-service-settings": {
    get: operations["getMachineTranslationSettings"];
    put: operations["setMachineTranslationSettings"];
  };
  "/v2/projects/{projectId}/my-batch-jobs": {
    /** List all batch operations started by current user */
    get: operations["myList"];
  };
  "/v2/projects/{projectId}/namespace-by-name/{name}": {
    /** Returns information about a namespace by its name */
    get: operations["getByName"];
  };
  "/v2/projects/{projectId}/namespaces": {
    get: operations["getAllNamespaces"];
  };
  "/v2/projects/{projectId}/namespaces/{id}": {
    put: operations["update_1"];
  };
  "/v2/projects/{projectId}/per-language-auto-translation-settings": {
    get: operations["getPerLanguageAutoTranslationSettings"];
    put: operations["setPerLanguageAutoTranslationSettings"];
  };
  "/v2/projects/{projectId}/single-step-import": {
    /** Unlike the /v2/projects/{projectId}/import endpoint, imports the data in single request by provided files and parameters. This is useful for automated importing via API or CLI. */
    post: operations["doImport"];
  };
  "/v2/projects/{projectId}/start-batch-job/clear-translations": {
    /** Clear translation values for provided keys in selected languages. */
    post: operations["clearTranslations"];
  };
  "/v2/projects/{projectId}/start-batch-job/copy-translations": {
    /** Copy translation values from one language to other languages. */
    post: operations["copyTranslations"];
  };
  "/v2/projects/{projectId}/start-batch-job/delete-keys": {
    post: operations["deleteKeys"];
  };
  "/v2/projects/{projectId}/start-batch-job/machine-translate": {
    /** Translate provided keys to provided languages through primary MT provider. */
    post: operations["machineTranslation"];
  };
  "/v2/projects/{projectId}/start-batch-job/pre-translate-by-tm": {
    /** Pre-translate provided keys to provided languages by TM. */
    post: operations["translate"];
  };
  "/v2/projects/{projectId}/start-batch-job/set-keys-namespace": {
    post: operations["setKeysNamespace"];
  };
  "/v2/projects/{projectId}/start-batch-job/set-translation-state": {
    post: operations["setTranslationState_2"];
  };
  "/v2/projects/{projectId}/start-batch-job/tag-keys": {
    post: operations["tagKeys"];
  };
  "/v2/projects/{projectId}/start-batch-job/untag-keys": {
    post: operations["untagKeys"];
  };
  "/v2/projects/{projectId}/stats": {
    get: operations["getProjectStats"];
  };
  "/v2/projects/{projectId}/stats/daily-activity": {
    get: operations["getProjectDailyActivity"];
  };
  "/v2/projects/{projectId}/suggest/machine-translations": {
    /** Suggests machine translations from enabled services */
    post: operations["suggestMachineTranslations"];
  };
  "/v2/projects/{projectId}/suggest/machine-translations-streaming": {
    /** Suggests machine translations from enabled services. The results are streamed to the output in ndjson format. If an error occurs when for any service provider used, the error information is returned as a part of the result item, while the response has 200 status code. */
    post: operations["suggestMachineTranslationsStreaming"];
  };
  "/v2/projects/{projectId}/suggest/translation-memory": {
    /** Suggests machine translations from translation memory. The result is always sorted by similarity, so sorting is not supported. */
    post: operations["suggestTranslationMemory"];
  };
  "/v2/projects/{projectId}/tag-complex": {
    put: operations["executeComplexTagOperation"];
  };
  "/v2/projects/{projectId}/tags": {
    get: operations["getAll_3"];
  };
  "/v2/projects/{projectId}/tasks": {
    get: operations["getTasks_1"];
    post: operations["createTask"];
  };
  "/v2/projects/{projectId}/tasks/calculate-scope": {
    post: operations["calculateScope"];
  };
  "/v2/projects/{projectId}/tasks/create-multiple-tasks": {
    post: operations["createTasks"];
  };
  "/v2/projects/{projectId}/tasks/possible-assignees": {
    get: operations["getPossibleAssignees"];
  };
  "/v2/projects/{projectId}/tasks/{taskNumber}": {
    get: operations["getTask"];
    put: operations["updateTask"];
  };
  "/v2/projects/{projectId}/tasks/{taskNumber}/blocking-tasks": {
    /** If the tasks is blocked by other tasks, it returns numbers of these tasks. */
    get: operations["getBlockingTasks"];
  };
  "/v2/projects/{projectId}/tasks/{taskNumber}/close": {
    put: operations["closeTask"];
  };
  "/v2/projects/{projectId}/tasks/{taskNumber}/finish": {
    put: operations["finishTask"];
  };
  "/v2/projects/{projectId}/tasks/{taskNumber}/keys": {
    get: operations["getTaskKeys"];
    put: operations["updateTaskKeys"];
  };
  "/v2/projects/{projectId}/tasks/{taskNumber}/keys/{keyId}": {
    /** Mark key as done, which updates task progress. */
    put: operations["updateTaskKey"];
  };
  "/v2/projects/{projectId}/tasks/{taskNumber}/per-user-report": {
    /** Detailed statistics for every assignee */
    get: operations["getPerUserReport"];
  };
  "/v2/projects/{projectId}/tasks/{taskNumber}/reopen": {
    put: operations["reopenTask"];
  };
  "/v2/projects/{projectId}/tasks/{taskNumber}/xlsx-report": {
    /** Detailed statistics about the task results */
    get: operations["getXlsxReport"];
  };
  "/v2/projects/{projectId}/transfer-options": {
    /** Returns organizations to which project can be transferred */
    get: operations["getTransferOptions"];
  };
  "/v2/projects/{projectId}/transfer-to-organization/{organizationId}": {
    /** Transfers project's ownership to organization */
    put: operations["transferProjectToOrganization"];
  };
  "/v2/projects/{projectId}/translations": {
    get: operations["getTranslations"];
    /** Sets translations for existing key */
    put: operations["setTranslations"];
    /** Sets translations for existing key or creates new key and sets the translations to it. */
    post: operations["createOrUpdateTranslations"];
  };
  "/v2/projects/{projectId}/translations/create-comment": {
    /** Creates a translation comment. Empty translation is stored, when not exists. */
    post: operations["create_9"];
  };
  "/v2/projects/{projectId}/translations/select-all": {
    /** Returns all key IDs for specified filter values. This way, you can apply the same filter as in the translation view and get the resulting key IDs for future use. */
    get: operations["selectKeys"];
  };
  "/v2/projects/{projectId}/translations/{languages}": {
    /** Returns all translations for specified languages */
    get: operations["getAllTranslations"];
  };
  "/v2/projects/{projectId}/translations/{translationId}/comments": {
    /** Returns translation comments of translation */
    get: operations["getAll_5"];
    post: operations["create_7"];
  };
  "/v2/projects/{projectId}/translations/{translationId}/comments/{commentId}": {
    get: operations["get_14"];
    put: operations["update_5"];
    delete: operations["delete_8"];
  };
  "/v2/projects/{projectId}/translations/{translationId}/comments/{commentId}/set-state/{state}": {
    put: operations["setState"];
  };
  "/v2/projects/{projectId}/translations/{translationId}/dismiss-auto-translated-state": {
    /** Removes "auto translated" indication */
    put: operations["dismissAutoTranslatedState"];
  };
  "/v2/projects/{projectId}/translations/{translationId}/history": {
    /** Sorting is not supported for supported. It is automatically sorted from newest to oldest. */
    get: operations["getTranslationHistory"];
  };
  "/v2/projects/{projectId}/translations/{translationId}/set-outdated-flag/{state}": {
    /** Set's "outdated" flag indicating the base translation was changed without updating current translation. */
    put: operations["setOutdated"];
  };
  "/v2/projects/{projectId}/translations/{translationId}/set-state/{state}": {
    put: operations["setTranslationState"];
  };
  "/v2/projects/{projectId}/used-namespaces": {
    /** Returns all used project namespaces. Response contains default (null) namespace if used. */
    get: operations["getUsedNamespaces"];
  };
  "/v2/projects/{projectId}/users": {
    /** Returns all project users, who have permission to access project */
    get: operations["getAllUsers"];
  };
  "/v2/projects/{projectId}/users/{userId}/revoke-access": {
    put: operations["revokePermission"];
  };
  "/v2/projects/{projectId}/users/{userId}/set-by-organization": {
    /** Removes user's direct project permission, explicitly set for the project. User will have now base permissions from organization or no permission if they're not organization member. */
    put: operations["setOrganizationBase"];
  };
  "/v2/projects/{projectId}/users/{userId}/set-permissions": {
    /** Set user's granular (scope-based) direct project permission */
    put: operations["setUsersPermissions"];
  };
  "/v2/projects/{projectId}/users/{userId}/set-permissions/{permissionType}": {
    put: operations["setUsersPermissions_1"];
  };
  "/v2/projects/{projectId}/webhook-configs": {
    get: operations["list"];
    post: operations["create"];
  };
  "/v2/projects/{projectId}/webhook-configs/{id}": {
    get: operations["get_5"];
    put: operations["update"];
    delete: operations["delete_1"];
  };
  "/v2/projects/{projectId}/webhook-configs/{id}/test": {
    /** Sends a test request to the webhook */
    post: operations["test"];
  };
  "/v2/public/business-events/identify": {
    post: operations["identify"];
  };
  "/v2/public/business-events/report": {
    post: operations["report"];
  };
  "/v2/public/configuration-properties": {
    /** Return server configuration properties documentation */
    get: operations["get_3"];
  };
  "/v2/public/export-info/formats": {
    get: operations["get_2"];
  };
  "/v2/public/initial-data": {
    /** Returns initial data required by the UI to load */
    get: operations["get_1"];
  };
  "/v2/public/machine-translation-providers": {
    /** Get machine translation providers */
    get: operations["getInfo_4"];
  };
  "/v2/public/scope-info/hierarchy": {
    get: operations["getHierarchy"];
  };
  "/v2/public/scope-info/roles": {
    get: operations["getRoles"];
  };
  "/v2/public/slack": {
    post: operations["slackCommand"];
  };
  "/v2/public/slack/on-bot-event": {
    /**
     * This is triggered when bot event is triggered. E.g., when app is uninstalled from workspace.
     *
     * Heads up! The events have to be configured via Slack App configuration in Event Subscription section.
     */
    post: operations["fetchBotEvent"];
  };
  "/v2/public/slack/on-event": {
    /** This is triggered when interactivity event is triggered. E.g., when user clicks button provided in previous messages. */
    post: operations["onInteractivityEvent"];
  };
  "/v2/quick-start/set-finished/{finished}": {
    /** Sets finished state of the quick start guide */
    put: operations["setFinishedState"];
  };
  "/v2/quick-start/set-open/{open}": {
    /** Sets open state of the quick start guide */
    put: operations["setOpenState"];
  };
  "/v2/quick-start/steps/{step}/complete": {
    /** Marks guide step as completed */
    put: operations["completeGuideStep"];
  };
  "/v2/slack/user-login": {
    /** Pairs user account with slack account. */
    post: operations["userLogin"];
  };
  "/v2/slack/user-login-info": {
    /**
     * Returns information about the connection between Slack account and Tolgee account which user is performing. The flow is the following.
     *
     * 1. User executes slash command in Slack and gets link with encrypted Slack user ID, workspace ID and the Channel ID (to send success response to)
     *
     * 2. User gets opens the link and the Tolgee Platform frontend and it uses this endpoint to get the data info about the future connection
     */
    get: operations["getInfo_3"];
  };
  "/v2/slug/generate-organization": {
    post: operations["generateOrganizationSlug"];
  };
  "/v2/slug/generate-project": {
    post: operations["generateProjectSlug"];
  };
  "/v2/slug/validate-organization/{slug}": {
    get: operations["validateOrganizationSlug"];
  };
  "/v2/slug/validate-project/{slug}": {
    get: operations["validateProjectSlug"];
  };
  "/v2/user": {
    /** Returns information about currently authenticated user. */
    get: operations["getInfo_2"];
    /** Updates current user's profile information. */
    put: operations["updateUser"];
    post: operations["updateUserOld"];
    delete: operations["delete"];
  };
  "/v2/user-preferences": {
    get: operations["get"];
  };
  "/v2/user-preferences/set-language/{languageTag}": {
    put: operations["setLanguage"];
  };
  "/v2/user-preferences/set-preferred-organization/{organizationId}": {
    put: operations["setPreferredOrganization"];
  };
  "/v2/user-tasks": {
    get: operations["getTasks"];
  };
  "/v2/user/avatar": {
    put: operations["uploadAvatar"];
    delete: operations["removeAvatar"];
  };
  "/v2/user/generate-super-token": {
    /** Generates new JWT token permitted to sensitive operations */
    post: operations["getSuperToken"];
  };
  "/v2/user/mfa/recovery": {
    /** Regenerates multi-factor authentication recovery codes */
    put: operations["regenerateRecoveryCodes"];
  };
  "/v2/user/mfa/totp": {
    /** Enables TOTP-based two-factor authentication. Invalidates all previous sessions upon success. */
    put: operations["enableMfa"];
    /** Disables TOTP-based two-factor authentication. Invalidates all previous sessions upon success. */
    delete: operations["disableMfa"];
  };
  "/v2/user/password": {
    /** Updates current user's password. Invalidates all previous sessions upon success. */
    put: operations["updateUserPassword"];
  };
  "/v2/user/send-email-verification": {
    /** Resends email verification email to currently authenticated user. */
    post: operations["sendEmailVerification"];
  };
  "/v2/user/single-owned-organizations": {
    /** Returns all organizations owned only by current user */
    get: operations["getAllSingleOwnedOrganizations"];
  };
}

export interface components {
  schemas: {
    AnnouncementDto: {
      type:
        | "FEATURE_BATCH_OPERATIONS"
        | "FEATURE_MT_FORMALITY"
        | "FEATURE_CONTENT_DELIVERY_AND_WEBHOOKS"
        | "NEW_PRICING"
        | "FEATURE_AI_CUSTOMIZATION"
        | "FEATURE_VISUAL_EDITOR"
        | "FEATURE_CLI_2"
        | "FEATURE_TASKS";
    };
    ApiKeyModel: {
      /** @description Description */
      description: string;
      /**
       * Format: int64
       * @description Timestamp of API key expiraion
       */
      expiresAt?: number;
      /**
       * Format: int64
       * @description ID of the API key
       */
      id: number;
      /**
       * Format: int64
       * @description Timestamp of API key last usage
       */
      lastUsedAt?: number;
      /**
       * Format: int64
       * @description Api key's project ID
       */
      projectId: number;
      /** @description Api key's project name */
      projectName: string;
      /**
       * @description Api key's permission scopes
       * @example screenshots.upload,screenshots.delete,translations.edit,screenshots.view,translations.view,keys.edit
       */
      scopes: string[];
      /** @description Full name of user owner */
      userFullName?: string;
      /** @description Username of user owner */
      username?: string;
    };
    ApiKeyWithLanguagesModel: {
      description: string;
      /** Format: int64 */
      expiresAt?: number;
      /** Format: int64 */
      id: number;
      /** Format: int64 */
      lastUsedAt?: number;
      /**
       * @deprecated
       * @description Languages for which user has translate permission.
       */
      permittedLanguageIds?: number[];
      /** Format: int64 */
      projectId: number;
      projectName: string;
      scopes: string[];
      userFullName?: string;
      username?: string;
    };
    AuthMethodsDTO: {
      github: components["schemas"]["OAuthPublicConfigDTO"];
      google: components["schemas"]["OAuthPublicConfigDTO"];
      oauth2: components["schemas"]["OAuthPublicExtendsConfigDTO"];
      ssoGlobal: components["schemas"]["SsoGlobalPublicConfigDTO"];
      ssoOrganizations: components["schemas"]["SsoOrganizationsPublicConfigDTO"];
    };
    AuthProviderDto: {
      accountType?: "LOCAL" | "MANAGED" | "THIRD_PARTY";
      authType?: "GOOGLE" | "GITHUB" | "OAUTH2" | "SSO" | "SSO_GLOBAL";
      ssoDomain?: string;
    };
    AutoTranslationConfigModel: {
      /**
       * @description If true, import will trigger batch operation to translate the new new keys.
       * It includes also the data imported via CLI, Figma, or other integrations using batch key import.
       */
      enableForImport: boolean;
      /** Format: int64 */
      languageId?: number;
      /** @description If true, new keys will be automatically translated via batch operationusing primary machine translation service.When "usingTranslationMemory" is enabled, it tries to translate it with translation memory first. */
      usingMachineTranslation: boolean;
      /** @description If true, new keys will be automatically translated via batch operation using translation memory when 100% match is found */
      usingTranslationMemory: boolean;
    };
    AutoTranslationSettingsDto: {
      /**
       * @description If true, import will trigger batch operation to translate the new new keys.
       * It includes also the data imported via CLI, Figma, or other integrations using batch key import.
       */
      enableForImport: boolean;
      /** Format: int64 */
      languageId?: number;
      /** @description If true, new keys will be automatically translated via batch operationusing primary machine translation service.When "usingTranslationMemory" is enabled, it tries to translate it with translation memory first. */
      usingMachineTranslation: boolean;
      /** @description If true, new keys will be automatically translated via batch operation using translation memory when 100% match is found */
      usingTranslationMemory: boolean;
    };
    Avatar: {
      large: string;
      thumbnail: string;
    };
    AverageProportionalUsageItemModel: {
      total: number;
      unusedQuantity: number;
      usedQuantity: number;
      usedQuantityOverPlan: number;
    };
    AzureContentStorageConfigDto: {
      connectionString?: string;
      containerName: string;
    };
    AzureContentStorageConfigModel: {
      containerName?: string;
    };
    BatchJobModel: {
      /**
       * Format: int64
       * @description The activity revision id, that stores the activity details of the job
       */
      activityRevisionId?: number;
      author?: components["schemas"]["SimpleUserAccountModel"];
      /**
       * Format: int64
       * @description The time when the job created
       */
      createdAt: number;
      /** @description If the job failed, this is the error message */
      errorMessage?: string;
      /**
       * Format: int64
       * @description Batch job id
       */
      id: number;
      /**
       * Format: int32
       * @description Total items, that have been processed so far
       */
      progress: number;
      /** @description Status of the batch job */
      status:
        | "PENDING"
        | "RUNNING"
        | "SUCCESS"
        | "FAILED"
        | "CANCELLED"
        | "DEBOUNCED";
      /**
       * Format: int32
       * @description Total items
       */
      totalItems: number;
      /** @description Type of the batch job */
      type:
        | "PRE_TRANSLATE_BT_TM"
        | "MACHINE_TRANSLATE"
        | "AUTO_TRANSLATE"
        | "DELETE_KEYS"
        | "SET_TRANSLATIONS_STATE"
        | "CLEAR_TRANSLATIONS"
        | "COPY_TRANSLATIONS"
        | "TAG_KEYS"
        | "UNTAG_KEYS"
        | "SET_KEYS_NAMESPACE"
        | "AUTOMATION"
        | "BILLING_TRIAL_EXPIRATION_NOTICE";
      /**
       * Format: int64
       * @description The time when the job was last updated (status change)
       */
      updatedAt: number;
    };
    BigMetaDto: {
      /** @description Keys in the document used as a context for machine translation. Keys in the same order as they appear in the document. The order is important! We are using it for graph distance calculation. */
      relatedKeysInOrder?: components["schemas"]["RelatedKeyDto"][];
    };
    BusinessEventReportRequest: {
      anonymousUserId?: string;
      data?: { [key: string]: { [key: string]: unknown } };
      eventName: string;
      /** Format: int64 */
      organizationId?: number;
      /** Format: int64 */
      projectId?: number;
    };
    CalculateScopeRequest: {
      keys: number[];
      /** Format: int64 */
      languageId: number;
      type: "TRANSLATE" | "REVIEW";
    };
    ClearTranslationsRequest: {
      keyIds: number[];
      languageIds: number[];
    };
    CollectionModelAutoTranslationConfigModel: {
      _embedded?: {
        configs?: components["schemas"]["AutoTranslationConfigModel"][];
      };
    };
    CollectionModelBatchJobModel: {
      _embedded?: {
        batchJobs?: components["schemas"]["BatchJobModel"][];
      };
    };
    CollectionModelExportFormatModel: {
      _embedded?: {
        exportFormats?: components["schemas"]["ExportFormatModel"][];
      };
    };
    CollectionModelImportNamespaceModel: {
      _embedded?: {
        namespaces?: components["schemas"]["ImportNamespaceModel"][];
      };
    };
    CollectionModelKeyDisabledLanguagesModel: {
      _embedded?: {
        keys?: components["schemas"]["KeyDisabledLanguagesModel"][];
      };
    };
    CollectionModelKeyModel: {
      _embedded?: {
        keys?: components["schemas"]["KeyModel"][];
      };
    };
    CollectionModelKeyWithBaseTranslationModel: {
      _embedded?: {
        keys?: components["schemas"]["KeyWithBaseTranslationModel"][];
      };
    };
    CollectionModelKeyWithDataModel: {
      _embedded?: {
        keys?: components["schemas"]["KeyWithDataModel"][];
      };
    };
    CollectionModelLanguageAiPromptCustomizationModel: {
      _embedded?: {
        promptCustomizations?: components["schemas"]["LanguageAiPromptCustomizationModel"][];
      };
    };
    CollectionModelLanguageConfigItemModel: {
      _embedded?: {
        languageConfigs?: components["schemas"]["LanguageConfigItemModel"][];
      };
    };
    CollectionModelLanguageInfoModel: {
      _embedded?: {
        languageInfos?: components["schemas"]["LanguageInfoModel"][];
      };
    };
    CollectionModelLanguageModel: {
      _embedded?: {
        languages?: components["schemas"]["LanguageModel"][];
      };
    };
    CollectionModelOrganizationInvitationModel: {
      _embedded?: {
        organizationInvitations?: components["schemas"]["OrganizationInvitationModel"][];
      };
    };
    CollectionModelProjectInvitationModel: {
      _embedded?: {
        invitations?: components["schemas"]["ProjectInvitationModel"][];
      };
    };
    CollectionModelProjectTransferOptionModel: {
      _embedded?: {
        transferOptions?: components["schemas"]["ProjectTransferOptionModel"][];
      };
    };
    CollectionModelScreenshotModel: {
      _embedded?: {
        screenshots?: components["schemas"]["ScreenshotModel"][];
      };
    };
    CollectionModelSimpleOrganizationModel: {
      _embedded?: {
        organizations?: components["schemas"]["SimpleOrganizationModel"][];
      };
    };
    CollectionModelUsedNamespaceModel: {
      _embedded?: {
        namespaces?: components["schemas"]["UsedNamespaceModel"][];
      };
    };
    CollectionModelWorkspaceModel: {
      _embedded?: {
        workspaces?: components["schemas"]["WorkspaceModel"][];
      };
    };
    ComplexEditKeyDto: {
      /** @description Custom values of the key. If not provided, custom values won't be modified */
      custom?: { [key: string]: { [key: string]: unknown } };
      /** @description Description of the key. It's also used as a context for Tolgee AI translator */
      description?: string;
      /** @description If key is pluralized. If it will be reflected in the editor. If null, value won't be modified. */
      isPlural?: boolean;
      /** @description Name of the key */
      name: string;
      namespace?: string;
      /** @description The argument name for the plural. If null, value won't be modified. If isPlural is false, this value will be ignored. */
      pluralArgName?: string;
      /** @description Keys in the document used as a context for machine translation. Keys in the same order as they appear in the document. The order is important! We are using it for graph distance calculation. */
      relatedKeysInOrder?: components["schemas"]["RelatedKeyDto"][];
      /** @description IDs of screenshots to delete */
      screenshotIdsToDelete?: number[];
      /** @description Ids of screenshots uploaded with /v2/image-upload endpoint */
      screenshotUploadedImageIds?: number[];
      screenshotsToAdd?: components["schemas"]["KeyScreenshotDto"][];
      /** @description Translation states to update, if not provided states won't be modified */
      states?: { [key: string]: "TRANSLATED" | "REVIEWED" };
      /** @description Tags of the key. If not provided tags won't be modified */
      tags?: string[];
      /** @description Translations to update */
      translations?: { [key: string]: string };
      /** @description If true, it will fail with 400 (with code plural_forms_data_loss) if plural is disabled and there are plural forms, which would be lost by the action. You can get rid of this warning by setting this value to false. */
      warnOnDataLoss?: boolean;
    };
    ComplexTagKeysRequest: {
      /** @description Include keys filtered by the provided key information */
      filterKeys?: components["schemas"]["KeyId"][];
      /** @description Exclude keys filtered by the provided key information */
      filterKeysNot?: components["schemas"]["KeyId"][];
      /** @description Include keys filtered by the provided tag information. This filter supports wildcards. For example, `draft-*` will match all tags starting with `draft-`. */
      filterTag?: string[];
      /** @description Exclude keys filtered by the provided tag information. This filter supports wildcards. For example, `draft-*` will match all tags starting with `draft-`. */
      filterTagNot?: string[];
      /** @description Specified tags will be added to filtered keys */
      tagFiltered?: string[];
      /** @description Specified tags will be added to keys not filtered by any of the specified filters. */
      tagOther?: string[];
      /** @description Specified tags will be removed from filtered keys. It supports wildcards. For example, `draft-*` will remove all tags starting with `draft-`. */
      untagFiltered?: string[];
      /** @description Specified tags will be removed from keys not filtered by any of the specified filters. It supports wildcards. For example, `draft-*` will remove all tags starting with `draft-`. */
      untagOther?: string[];
    };
    ComputedPermissionModel: {
      origin:
        | "ORGANIZATION_BASE"
        | "DIRECT"
        | "ORGANIZATION_OWNER"
        | "NONE"
        | "SERVER_ADMIN";
      permissionModel?: components["schemas"]["PermissionModel"];
      /**
       * @deprecated
       * @description Deprecated (use translateLanguageIds).
       *
       * List of languages current user has TRANSLATE permission to. If null, all languages edition is permitted.
       * @example 200001,200004
       */
      permittedLanguageIds?: number[];
      /**
       * @description Granted scopes to the user. When user has type permissions, this field contains permission scopes of the type.
       * @example KEYS_EDIT,TRANSLATIONS_VIEW
       */
      scopes: (
        | "translations.view"
        | "translations.edit"
        | "keys.edit"
        | "screenshots.upload"
        | "screenshots.delete"
        | "screenshots.view"
        | "activity.view"
        | "languages.edit"
        | "admin"
        | "project.edit"
        | "members.view"
        | "members.edit"
        | "translation-comments.add"
        | "translation-comments.edit"
        | "translation-comments.set-state"
        | "translations.state-edit"
        | "keys.view"
        | "keys.delete"
        | "keys.create"
        | "batch-jobs.view"
        | "batch-jobs.cancel"
        | "translations.batch-by-tm"
        | "translations.batch-machine"
        | "content-delivery.manage"
        | "content-delivery.publish"
        | "webhooks.manage"
        | "tasks.view"
        | "tasks.edit"
      )[];
      /**
       * @description List of languages user can change state to. If null, changing state of all language values is permitted.
       * @example 200001,200004
       */
      stateChangeLanguageIds?: number[];
      /**
       * @description List of languages user can translate to. If null, all languages editing is permitted.
       * @example 200001,200004
       */
      translateLanguageIds?: number[];
      /** @description The user's permission type. This field is null if uses granular permissions */
      type?: "NONE" | "VIEW" | "TRANSLATE" | "REVIEW" | "EDIT" | "MANAGE";
      /**
       * @description List of languages user can view. If null, all languages view is permitted.
       * @example 200001,200004
       */
      viewLanguageIds?: number[];
    };
    ConnectToSlackDto: {
      code: string;
    };
    ConnectToSlackUrlModel: {
      url: string;
    };
    ContentDeliveryConfigModel: {
      autoPublish: boolean;
      /**
       * @description This is a template that defines the structure of the resulting .zip file content.
       *
       * The template is a string that can contain the following placeholders: {namespace}, {languageTag},
       * {androidLanguageTag}, {snakeLanguageTag}, {extension}.
       *
       * For example, when exporting to JSON with the template `{namespace}/{languageTag}.{extension}`,
       * the English translations of the `home` namespace will be stored in `home/en.json`.
       *
       * The `{snakeLanguageTag}` placeholder is the same as `{languageTag}` but in snake case. (e.g., en_US).
       *
       * The Android specific `{androidLanguageTag}` placeholder is the same as `{languageTag}`
       * but in Android format. (e.g., en-rUS)
       */
      fileStructureTemplate?: string;
      /** @description Filter key IDs to be contained in export */
      filterKeyId?: number[];
      /** @description Filter key IDs not to be contained in export */
      filterKeyIdNot?: number[];
      /** @description Filter keys with prefix */
      filterKeyPrefix?: string;
      /** @description Filter translations with namespace. By default, all namespaces everything are exported. To export default namespace, use empty string. */
      filterNamespace?: string[];
      /** @description Filter translations with state. By default, all states except untranslated is exported. */
      filterState?: ("UNTRANSLATED" | "TRANSLATED" | "REVIEWED" | "DISABLED")[];
      /**
       * @description Filter keys tagged by.
       *
       * This filter works the same as `filterTagIn` but in this cases it accepts single tag only.
       */
      filterTag?: string;
      /** @description Filter keys tagged by one of provided tags */
      filterTagIn?: string[];
      /** @description Filter keys not tagged by one of provided tags */
      filterTagNotIn?: string[];
      /** @description Format to export to */
      format:
        | "JSON"
        | "JSON_TOLGEE"
        | "XLIFF"
        | "PO"
        | "APPLE_STRINGS_STRINGSDICT"
        | "APPLE_XLIFF"
        | "ANDROID_XML"
        | "COMPOSE_XML"
        | "FLUTTER_ARB"
        | "PROPERTIES"
        | "YAML_RUBY"
        | "YAML"
        | "JSON_I18NEXT"
        | "CSV"
        | "RESX_ICU"
        | "XLSX"
        | "APPLE_XCSTRINGS";
      /** Format: int64 */
      id: number;
      /**
       * @description Languages to be contained in export.
       *
       * If null, all languages are exported
       * @example en
       */
      languages?: string[];
      /** Format: int64 */
      lastPublished?: number;
      lastPublishedFiles: string[];
      /**
       * @description Message format to be used for export.
       *
       * e.g. PHP_PO: Hello %s, ICU: Hello {name}.
       *
       * This property is honored only for generic formats like JSON or YAML.
       * For specific formats like `YAML_RUBY` it's ignored.
       */
      messageFormat?:
        | "C_SPRINTF"
        | "PHP_SPRINTF"
        | "JAVA_STRING_FORMAT"
        | "APPLE_SPRINTF"
        | "RUBY_SPRINTF"
        | "I18NEXT"
        | "ICU"
        | "PYTHON_PERCENT";
      name: string;
      pruneBeforePublish: boolean;
      publicUrl?: string;
      slug: string;
      storage?: components["schemas"]["ContentStorageModel"];
      /**
       * @description Delimiter to structure file content.
       *
       * e.g. For key "home.header.title" would result in {"home": {"header": "title": {"Hello"}}} structure.
       *
       * When null, resulting file won't be structured. Works only for generic structured formats (e.g. JSON, YAML),
       * specific formats like `YAML_RUBY` don't honor this parameter.
       */
      structureDelimiter?: string;
      /**
       * @description If true, for structured formats (like JSON) arrays are supported.
       *
       * e.g. Key hello[0] will be exported as {"hello": ["..."]}
       */
      supportArrays: boolean;
    };
    ContentDeliveryConfigRequest: {
      /** @description If true, data are published to the content delivery automatically after each change. */
      autoPublish: boolean;
      /**
       * Format: int64
       * @description Id of custom storage to use for content delivery. If null, default server storage is used. Tolgee Cloud provides default Content Storage.
       */
      contentStorageId?: number;
      /**
       * @description This is a template that defines the structure of the resulting .zip file content.
       *
       * The template is a string that can contain the following placeholders: {namespace}, {languageTag},
       * {androidLanguageTag}, {snakeLanguageTag}, {extension}.
       *
       * For example, when exporting to JSON with the template `{namespace}/{languageTag}.{extension}`,
       * the English translations of the `home` namespace will be stored in `home/en.json`.
       *
       * The `{snakeLanguageTag}` placeholder is the same as `{languageTag}` but in snake case. (e.g., en_US).
       *
       * The Android specific `{androidLanguageTag}` placeholder is the same as `{languageTag}`
       * but in Android format. (e.g., en-rUS)
       */
      fileStructureTemplate?: string;
      /** @description Filter key IDs to be contained in export */
      filterKeyId?: number[];
      /** @description Filter key IDs not to be contained in export */
      filterKeyIdNot?: number[];
      /** @description Filter keys with prefix */
      filterKeyPrefix?: string;
      /** @description Filter translations with namespace. By default, all namespaces everything are exported. To export default namespace, use empty string. */
      filterNamespace?: string[];
      /** @description Filter translations with state. By default, all states except untranslated is exported. */
      filterState?: ("UNTRANSLATED" | "TRANSLATED" | "REVIEWED" | "DISABLED")[];
      /**
       * @description Filter keys tagged by.
       *
       * This filter works the same as `filterTagIn` but in this cases it accepts single tag only.
       */
      filterTag?: string;
      /** @description Filter keys tagged by one of provided tags */
      filterTagIn?: string[];
      /** @description Filter keys not tagged by one of provided tags */
      filterTagNotIn?: string[];
      /** @description Format to export to */
      format:
        | "JSON"
        | "JSON_TOLGEE"
        | "XLIFF"
        | "PO"
        | "APPLE_STRINGS_STRINGSDICT"
        | "APPLE_XLIFF"
        | "ANDROID_XML"
        | "COMPOSE_XML"
        | "FLUTTER_ARB"
        | "PROPERTIES"
        | "YAML_RUBY"
        | "YAML"
        | "JSON_I18NEXT"
        | "CSV"
        | "RESX_ICU"
        | "XLSX"
        | "APPLE_XCSTRINGS";
      /**
       * @description Languages to be contained in export.
       *
       * If null, all languages are exported
       * @example en
       */
      languages?: string[];
      /**
       * @description Message format to be used for export.
       *
       * e.g. PHP_PO: Hello %s, ICU: Hello {name}.
       *
       * This property is honored only for generic formats like JSON or YAML.
       * For specific formats like `YAML_RUBY` it's ignored.
       */
      messageFormat?:
        | "C_SPRINTF"
        | "PHP_SPRINTF"
        | "JAVA_STRING_FORMAT"
        | "APPLE_SPRINTF"
        | "RUBY_SPRINTF"
        | "I18NEXT"
        | "ICU"
        | "PYTHON_PERCENT";
      name: string;
      /**
       * @description Whether the data in the CDN should be pruned before publishing new data.
       *
       * In some cases, you might want to keep the data in the storage and only replace the files created by following publish operation.
       */
      pruneBeforePublish: boolean;
      /**
       * @description Tolgee uses a custom slug as a directory name for content storage and public content delivery URL. It is only applicable for custom storage. This field needs to be kept null for Tolgee Cloud content storage or global server storage on self-hosted instances.
       *
       * Slag has to match following regular expression: `^[a-z0-9]+(?:-[a-z0-9]+)*$`.
       *
       * If null is provided for update operation, slug will be assigned with generated value.
       */
      slug?: string;
      /**
       * @description Delimiter to structure file content.
       *
       * e.g. For key "home.header.title" would result in {"home": {"header": "title": {"Hello"}}} structure.
       *
       * When null, resulting file won't be structured. Works only for generic structured formats (e.g. JSON, YAML),
       * specific formats like `YAML_RUBY` don't honor this parameter.
       */
      structureDelimiter?: string;
      /**
       * @description If true, for structured formats (like JSON) arrays are supported.
       *
       * e.g. Key hello[0] will be exported as {"hello": ["..."]}
       */
      supportArrays: boolean;
    };
    ContentStorageModel: {
      azureContentStorageConfig?: components["schemas"]["AzureContentStorageConfigModel"];
      /** Format: int64 */
      id: number;
      name: string;
      publicUrlPrefix?: string;
      s3ContentStorageConfig?: components["schemas"]["S3ContentStorageConfigModel"];
    };
    ContentStorageRequest: {
      azureContentStorageConfig?: components["schemas"]["AzureContentStorageConfigDto"];
      name: string;
      publicUrlPrefix?: string;
      s3ContentStorageConfig?: components["schemas"]["S3ContentStorageConfigDto"];
    };
    CopyTranslationRequest: {
      keyIds: number[];
      /** Format: int64 */
      sourceLanguageId: number;
      targetLanguageIds: number[];
    };
    CreateApiKeyDto: {
      /** @description Description of the project API key */
      description?: string;
      /**
       * Format: int64
       * @description Expiration date in epoch format (milliseconds). When null key never expires.
       * @example 1661172869000
       */
      expiresAt?: number;
      /** Format: int64 */
      projectId: number;
      scopes: string[];
    };
    CreateKeyDto: {
      /**
       * @description Description of the key
       * @example This key is used on homepage. It's a label of sign up button.
       */
      description?: string;
      /** @description If key is pluralized. If it will be reflected in the editor */
      isPlural: boolean;
      /** @description Name of the key */
      name: string;
      namespace?: string;
      /** @description The argument name for the plural. If null, value will be guessed from the values provided in translations. */
      pluralArgName?: string;
      /** @description Keys in the document used as a context for machine translation. Keys in the same order as they appear in the document. The order is important! We are using it for graph distance calculation. */
      relatedKeysInOrder?: components["schemas"]["RelatedKeyDto"][];
      /** @description Ids of screenshots uploaded with /v2/image-upload endpoint */
      screenshotUploadedImageIds?: number[];
      screenshots?: components["schemas"]["KeyScreenshotDto"][];
      /** @description Translation states to update, if not provided states won't be modified */
      states?: { [key: string]: "TRANSLATED" | "REVIEWED" };
      tags?: string[];
      translations?: { [key: string]: string };
    };
    CreateMultipleTasksRequest: {
      tasks: components["schemas"]["CreateTaskRequest"][];
    };
    CreatePatDto: {
      /** @description Description of the PAT */
      description: string;
      /**
       * Format: int64
       * @description Expiration date in epoch format (milliseconds). When null, token never expires.
       * @example 1661172869000
       */
      expiresAt?: number;
    };
    CreateProjectRequest: {
      /** @description Tag of one of created languages, to select it as base language. If not provided, first language will be selected as base. */
      baseLanguageTag?: string;
      /** @description Whether to use ICU placeholder visualization in the editor and it's support. */
      icuPlaceholders: boolean;
      languages: components["schemas"]["LanguageRequest"][];
      name: string;
      /**
       * Format: int64
       * @description Organization to create the project in
       */
      organizationId: number;
      /** @description Slug of your project used in url e.g. "/v2/projects/what-a-project". If not provided, it will be generated */
      slug?: string;
    };
    CreateProviderRequest: {
      authorizationUri: string;
      clientId: string;
      clientSecret: string;
      domain: string;
      enabled: boolean;
      force: boolean;
      tokenUri: string;
    };
    CreateTaskRequest: {
      assignees: number[];
      description: string;
      /**
       * Format: int64
       * @description Due to date in epoch format (milliseconds).
       * @example 1661172869000
       */
      dueDate?: number;
      keys: number[];
      /**
       * Format: int64
       * @description Id of language, this task is attached to.
       * @example 1
       */
      languageId: number;
      name: string;
      type: "TRANSLATE" | "REVIEW";
    };
    CreditBalanceModel: {
      /** Format: int64 */
      bucketSize: number;
      /** Format: int64 */
      creditBalance: number;
      /**
       * Format: int64
       * @deprecated
       * @description Customers were able to buy extra credits separately in the past.
       *
       * This option is not available anymore and this field is kept only for backward compatibility purposes and is always 0.
       */
      extraCreditBalance: number;
    };
    DeleteKeysDto: {
      /** @description IDs of keys to delete */
      ids: number[];
    };
    DeleteKeysRequest: {
      keyIds: number[];
    };
    DocItem: {
      description?: string;
      displayName?: string;
      name: string;
    };
    DomainRequest: {
      domain: string;
      state: string;
    };
    EditKeyDto: {
      /**
       * @description Description of the key
       * @example This key is used on homepage. It's a label of sign up button.
       */
      description?: string;
      name: string;
      namespace?: string;
    };
    EditProjectRequest: {
      /** Format: int64 */
      baseLanguageId?: number;
      /** Format: int64 */
      defaultNamespaceId?: number;
      description?: string;
      /** @description Whether to use ICU placeholder visualization in the editor and it's support. */
      icuPlaceholders: boolean;
      name: string;
      slug?: string;
      useNamespaces: boolean;
    };
    EeSubscriptionModel: {
      cancelAtPeriodEnd: boolean;
      /** Format: int64 */
      currentPeriodEnd?: number;
      /** Format: int64 */
      currentUserCount: number;
      enabledFeatures: (
        | "GRANULAR_PERMISSIONS"
        | "PRIORITIZED_FEATURE_REQUESTS"
        | "PREMIUM_SUPPORT"
        | "DEDICATED_SLACK_CHANNEL"
        | "ASSISTED_UPDATES"
        | "DEPLOYMENT_ASSISTANCE"
        | "BACKUP_CONFIGURATION"
        | "TEAM_TRAINING"
        | "ACCOUNT_MANAGER"
        | "STANDARD_SUPPORT"
        | "PROJECT_LEVEL_CONTENT_STORAGES"
        | "WEBHOOKS"
        | "MULTIPLE_CONTENT_DELIVERY_CONFIGS"
        | "AI_PROMPT_CUSTOMIZATION"
        | "SLACK_INTEGRATION"
        | "TASKS"
        | "SSO"
        | "ORDER_TRANSLATION"
      )[];
      /** Format: date-time */
      lastValidCheck?: string;
      licenseKey: string;
      name: string;
      nonCommerical: boolean;
      status:
        | "ACTIVE"
        | "CANCELED"
        | "PAST_DUE"
        | "UNPAID"
        | "ERROR"
        | "TRIALING"
        | "KEY_USED_BY_ANOTHER_INSTANCE"
        | "UNKNOWN";
    };
    EntityDescriptionWithRelations: {
      data: { [key: string]: { [key: string]: unknown } };
      entityClass: string;
      /** Format: int64 */
      entityId: number;
    };
    ErrorResponseBody: {
      code: string;
      params?: { [key: string]: unknown }[];
    };
    ErrorResponseTyped: {
      code:
        | "unauthenticated"
        | "api_access_forbidden"
        | "api_key_not_found"
        | "invalid_api_key"
        | "invalid_project_api_key"
        | "project_api_key_expired"
        | "bad_credentials"
        | "mfa_enabled"
        | "invalid_otp_code"
        | "mfa_not_enabled"
        | "can_not_revoke_own_permissions"
        | "data_corrupted"
        | "invitation_code_does_not_exist_or_expired"
        | "language_tag_exists"
        | "language_name_exists"
        | "language_not_found"
        | "operation_not_permitted"
        | "registrations_not_allowed"
        | "project_not_found"
        | "resource_not_found"
        | "scope_not_found"
        | "key_exists"
        | "third_party_auth_error_message"
        | "third_party_auth_no_email"
        | "third_party_auth_non_matching_email"
        | "third_party_auth_no_sub"
        | "third_party_auth_unknown_error"
        | "email_already_verified"
        | "third_party_unauthorized"
        | "third_party_google_workspace_mismatch"
        | "third_party_switch_initiated"
        | "username_already_exists"
        | "username_or_password_invalid"
        | "user_already_has_permissions"
        | "user_already_has_role"
        | "user_not_found"
        | "file_not_image"
        | "file_too_big"
        | "invalid_timestamp"
        | "email_not_verified"
        | "missing_callback_url"
        | "invalid_jwt_token"
        | "expired_jwt_token"
        | "general_jwt_error"
        | "cannot_find_suitable_address_part"
        | "slug_not_unique"
        | "user_is_not_member_of_organization"
        | "organization_has_no_other_owner"
        | "user_has_no_project_access"
        | "user_is_organization_owner"
        | "cannot_set_your_own_permissions"
        | "user_is_organization_member"
        | "property_not_mutable"
        | "import_language_not_from_project"
        | "existing_language_not_selected"
        | "conflict_is_not_resolved"
        | "language_already_selected"
        | "cannot_parse_file"
        | "could_not_resolve_property"
        | "cannot_add_more_then_100_languages"
        | "no_languages_provided"
        | "language_with_base_language_tag_not_found"
        | "language_not_from_project"
        | "namespace_not_from_project"
        | "cannot_delete_base_language"
        | "key_not_from_project"
        | "max_screenshots_exceeded"
        | "translation_not_from_project"
        | "can_edit_only_own_comment"
        | "request_parse_error"
        | "filter_by_value_state_not_valid"
        | "import_has_expired"
        | "tag_not_from_project"
        | "translation_text_too_long"
        | "invalid_recaptcha_token"
        | "cannot_leave_owning_project"
        | "cannot_leave_project_with_organization_role"
        | "dont_have_direct_permissions"
        | "tag_too_log"
        | "too_many_uploaded_images"
        | "one_or_more_images_not_found"
        | "screenshot_not_of_key"
        | "service_not_found"
        | "too_many_requests"
        | "translation_not_found"
        | "out_of_credits"
        | "key_not_found"
        | "organization_not_found"
        | "cannot_find_base_language"
        | "base_language_not_found"
        | "no_exported_result"
        | "cannot_set_your_own_role"
        | "only_translate_review_or_view_permission_accepts_view_languages"
        | "oauth2_token_url_not_set"
        | "oauth2_user_url_not_set"
        | "email_already_invited_or_member"
        | "price_not_found"
        | "invoice_not_from_organization"
        | "invoice_not_found"
        | "plan_not_found"
        | "plan_not_available_any_more"
        | "no_auto_translation_method"
        | "cannot_translate_base_language"
        | "pat_not_found"
        | "invalid_pat"
        | "pat_expired"
        | "operation_unavailable_for_account_type"
        | "validation_email_is_not_valid"
        | "current_password_required"
        | "cannot_create_organization"
        | "wrong_current_password"
        | "wrong_param_type"
        | "expired_super_jwt_token"
        | "cannot_delete_your_own_account"
        | "cannot_sort_by_this_column"
        | "namespace_not_found"
        | "namespace_exists"
        | "invalid_authentication_method"
        | "unknown_sort_property"
        | "only_review_permission_accepts_state_change_languages"
        | "only_translate_or_review_permission_accepts_translate_languages"
        | "cannot_set_language_permissions_for_admin_scope"
        | "cannot_set_view_languages_without_translations_view_scope"
        | "cannot_set_translate_languages_without_translations_edit_scope"
        | "cannot_set_state_change_languages_without_translations_state_edit_scope"
        | "language_not_permitted"
        | "scopes_has_to_be_set"
        | "set_exactly_one_of_scopes_or_type"
        | "translation_exists"
        | "import_keys_error"
        | "provide_only_one_of_screenshots_and_screenshot_uploaded_image_ids"
        | "multiple_projects_not_supported"
        | "plan_translation_limit_exceeded"
        | "feature_not_enabled"
        | "license_key_not_found"
        | "cannot_set_view_languages_without_for_level_based_permissions"
        | "cannot_set_different_translate_and_state_change_languages_for_level_based_permissions"
        | "cannot_disable_your_own_account"
        | "subscription_not_found"
        | "invoice_does_not_have_usage"
        | "customer_not_found"
        | "subscription_not_active"
        | "organization_already_subscribed"
        | "organization_not_subscribed"
        | "license_key_used_by_another_instance"
        | "translation_spending_limit_exceeded"
        | "credit_spending_limit_exceeded"
        | "seats_spending_limit_exceeded"
        | "this_instance_is_already_licensed"
        | "big_meta_not_from_project"
        | "mt_service_not_enabled"
        | "project_not_selected"
        | "organization_not_selected"
        | "plan_has_subscribers"
        | "translation_failed"
        | "batch_job_not_found"
        | "key_exists_in_namespace"
        | "tag_is_blank"
        | "execution_failed_on_management_error"
        | "translation_api_rate_limit"
        | "cannot_finalize_activity"
        | "formality_not_supported_by_service"
        | "language_not_supported_by_service"
        | "rate_limited"
        | "pat_access_not_allowed"
        | "pak_access_not_allowed"
        | "cannot_modify_disabled_translation"
        | "azure_config_required"
        | "s3_config_required"
        | "content_storage_config_required"
        | "content_storage_test_failed"
        | "content_storage_config_invalid"
        | "invalid_connection_string"
        | "cannot_create_azure_storage_client"
        | "s3_access_key_required"
        | "azure_connection_string_required"
        | "s3_secret_key_required"
        | "cannot_store_file_to_content_storage"
        | "unexpected_error_while_publishing_to_content_storage"
        | "webhook_responded_with_non_200_status"
        | "unexpected_error_while_executing_webhook"
        | "content_storage_is_in_use"
        | "cannot_set_state_for_missing_translation"
        | "no_project_id_provided"
        | "license_key_not_provided"
        | "subscription_already_canceled"
        | "user_is_subscribed_to_paid_plan"
        | "cannot_create_free_plan_without_fixed_type"
        | "cannot_modify_plan_free_status"
        | "key_id_not_provided"
        | "free_self_hosted_seat_limit_exceeded"
        | "advanced_params_not_supported"
        | "plural_forms_not_found_for_language"
        | "nested_plurals_not_supported"
        | "message_is_not_plural"
        | "content_outside_plural_forms"
        | "invalid_plural_form"
        | "multiple_plurals_not_supported"
        | "custom_values_json_too_long"
        | "unsupported_po_message_format"
        | "plural_forms_data_loss"
        | "current_user_does_not_own_image"
        | "user_cannot_view_this_organization"
        | "user_is_not_owner_of_organization"
        | "pak_created_for_different_project"
        | "custom_slug_is_only_applicable_for_custom_storage"
        | "invalid_slug_format"
        | "batch_job_cancellation_timeout"
        | "import_failed"
        | "cannot_add_more_then_1000_languages"
        | "no_data_to_import"
        | "multiple_namespaces_mapped_to_single_file"
        | "multiple_mappings_for_same_file_language_name"
        | "multiple_mappings_for_null_file_language_name"
        | "too_many_mappings_for_file"
        | "missing_placeholder_in_template"
        | "tag_not_found"
        | "cannot_parse_encrypted_slack_login_data"
        | "slack_workspace_not_found"
        | "cannot_fetch_user_details_from_slack"
        | "slack_missing_scope"
        | "slack_not_connected_to_your_account"
        | "slack_invalid_command"
        | "slack_not_subscribed_yet"
        | "slack_connection_failed"
        | "tolgee_account_already_connected"
        | "slack_not_configured"
        | "slack_workspace_already_connected"
        | "slack_connection_error"
        | "email_verification_code_not_valid"
        | "cannot_subscribe_to_free_plan"
        | "plan_auto_assignment_only_for_free_plans"
        | "plan_auto_assignment_only_for_private_plans"
        | "task_not_found"
        | "task_not_finished"
        | "task_not_open"
        | "translation_agency_not_found"
        | "this_feature_is_not_implemented_in_oss"
        | "sso_token_exchange_failed"
        | "sso_user_info_retrieval_failed"
        | "sso_id_token_expired"
        | "sso_user_cannot_create_organization"
        | "sso_cant_verify_user"
        | "sso_auth_missing_domain"
        | "sso_domain_not_found_or_disabled"
        | "native_authentication_disabled"
        | "invitation_organization_mismatch"
        | "user_is_managed_by_organization"
        | "cannot_set_sso_provider_missing_fields"
        | "namespaces_cannot_be_disabled_when_namespace_exists"
        | "namespace_cannot_be_used_when_feature_is_disabled"
        | "sso_domain_not_allowed"
        | "sso_login_forced_for_this_account"
        | "date_has_to_be_in_the_future"
        | "custom_plan_and_plan_id_cannot_be_set_together"
        | "specify_plan_id_or_custom_plan"
        | "custom_plans_has_to_be_private"
        | "cannot_create_free_plan_with_prices"
        | "subscription_not_scheduled_for_cancellation"
        | "cannot_cancel_trial"
        | "cannot_update_without_modification"
        | "current_subscription_is_not_trialing";
      params?: { [key: string]: unknown }[];
    };
    ExistenceEntityDescription: {
      data: { [key: string]: { [key: string]: unknown } };
      entityClass: string;
      /** Format: int64 */
      entityId: number;
      exists?: boolean;
      relations: {
        [key: string]: components["schemas"]["EntityDescriptionWithRelations"];
      };
    };
    ExportFormatModel: {
      defaultFileStructureTemplate: string;
      extension: string;
      format:
        | "JSON"
        | "JSON_TOLGEE"
        | "XLIFF"
        | "PO"
        | "APPLE_STRINGS_STRINGSDICT"
        | "APPLE_XLIFF"
        | "ANDROID_XML"
        | "COMPOSE_XML"
        | "FLUTTER_ARB"
        | "PROPERTIES"
        | "YAML_RUBY"
        | "YAML"
        | "JSON_I18NEXT"
        | "CSV"
        | "RESX_ICU"
        | "XLSX"
        | "APPLE_XCSTRINGS";
      mediaType: string;
    };
    ExportParams: {
      /**
       * @description This is a template that defines the structure of the resulting .zip file content.
       *
       * The template is a string that can contain the following placeholders: {namespace}, {languageTag},
       * {androidLanguageTag}, {snakeLanguageTag}, {extension}.
       *
       * For example, when exporting to JSON with the template `{namespace}/{languageTag}.{extension}`,
       * the English translations of the `home` namespace will be stored in `home/en.json`.
       *
       * The `{snakeLanguageTag}` placeholder is the same as `{languageTag}` but in snake case. (e.g., en_US).
       *
       * The Android specific `{androidLanguageTag}` placeholder is the same as `{languageTag}`
       * but in Android format. (e.g., en-rUS)
       */
      fileStructureTemplate?: string;
      /** @description Filter key IDs to be contained in export */
      filterKeyId?: number[];
      /** @description Filter key IDs not to be contained in export */
      filterKeyIdNot?: number[];
      /** @description Filter keys with prefix */
      filterKeyPrefix?: string;
      /** @description Filter translations with namespace. By default, all namespaces everything are exported. To export default namespace, use empty string. */
      filterNamespace?: string[];
      /** @description Filter translations with state. By default, all states except untranslated is exported. */
      filterState?: ("UNTRANSLATED" | "TRANSLATED" | "REVIEWED" | "DISABLED")[];
      /**
       * @description Filter keys tagged by.
       *
       * This filter works the same as `filterTagIn` but in this cases it accepts single tag only.
       */
      filterTag?: string;
      /** @description Filter keys tagged by one of provided tags */
      filterTagIn?: string[];
      /** @description Filter keys not tagged by one of provided tags */
      filterTagNotIn?: string[];
      /** @description Format to export to */
      format:
        | "JSON"
        | "JSON_TOLGEE"
        | "XLIFF"
        | "PO"
        | "APPLE_STRINGS_STRINGSDICT"
        | "APPLE_XLIFF"
        | "ANDROID_XML"
        | "COMPOSE_XML"
        | "FLUTTER_ARB"
        | "PROPERTIES"
        | "YAML_RUBY"
        | "YAML"
        | "JSON_I18NEXT"
        | "CSV"
        | "RESX_ICU"
        | "XLSX"
        | "APPLE_XCSTRINGS";
      /**
       * @description Languages to be contained in export.
       *
       * If null, all languages are exported
       * @example en
       */
      languages?: string[];
      /**
       * @description Message format to be used for export.
       *
       * e.g. PHP_PO: Hello %s, ICU: Hello {name}.
       *
       * This property is honored only for generic formats like JSON or YAML.
       * For specific formats like `YAML_RUBY` it's ignored.
       */
      messageFormat?:
        | "C_SPRINTF"
        | "PHP_SPRINTF"
        | "JAVA_STRING_FORMAT"
        | "APPLE_SPRINTF"
        | "RUBY_SPRINTF"
        | "I18NEXT"
        | "ICU"
        | "PYTHON_PERCENT";
      /**
       * @description Delimiter to structure file content.
       *
       * e.g. For key "home.header.title" would result in {"home": {"header": "title": {"Hello"}}} structure.
       *
       * When null, resulting file won't be structured. Works only for generic structured formats (e.g. JSON, YAML),
       * specific formats like `YAML_RUBY` don't honor this parameter.
       */
      structureDelimiter?: string;
      /**
       * @description If true, for structured formats (like JSON) arrays are supported.
       *
       * e.g. Key hello[0] will be exported as {"hello": ["..."]}
       */
      supportArrays: boolean;
      zip: boolean;
    };
    GenerateSlugDto: {
      name: string;
      oldSlug?: string;
    };
    GetKeysRequestDto: {
      keys: components["schemas"]["KeyDefinitionDto"][];
      /** @description Tags to return language translations in */
      languageTags: string[];
    };
    HierarchyItem: {
      requires: components["schemas"]["HierarchyItem"][];
      scope:
        | "translations.view"
        | "translations.edit"
        | "keys.edit"
        | "screenshots.upload"
        | "screenshots.delete"
        | "screenshots.view"
        | "activity.view"
        | "languages.edit"
        | "admin"
        | "project.edit"
        | "members.view"
        | "members.edit"
        | "translation-comments.add"
        | "translation-comments.edit"
        | "translation-comments.set-state"
        | "translations.state-edit"
        | "keys.view"
        | "keys.delete"
        | "keys.create"
        | "batch-jobs.view"
        | "batch-jobs.cancel"
        | "translations.batch-by-tm"
        | "translations.batch-machine"
        | "content-delivery.manage"
        | "content-delivery.publish"
        | "webhooks.manage"
        | "tasks.view"
        | "tasks.edit";
    };
    IdentifyRequest: {
      anonymousUserId: string;
    };
    ImageUploadInfoDto: {
      location?: string;
    };
    ImportAddFilesResultModel: {
      errors: components["schemas"]["ErrorResponseBody"][];
      result?: components["schemas"]["PagedModelImportLanguageModel"];
      warnings: components["schemas"]["ErrorResponseBody"][];
    };
    ImportFileIssueModel: {
      /** Format: int64 */
      id: number;
      params: components["schemas"]["ImportFileIssueParamModel"][];
      type:
        | "KEY_IS_NOT_STRING"
        | "MULTIPLE_VALUES_FOR_KEY_AND_LANGUAGE"
        | "VALUE_IS_NOT_STRING"
        | "KEY_IS_EMPTY"
        | "VALUE_IS_EMPTY"
        | "PO_MSGCTXT_NOT_SUPPORTED"
        | "ID_ATTRIBUTE_NOT_PROVIDED"
        | "TARGET_NOT_PROVIDED"
        | "TRANSLATION_TOO_LONG"
        | "KEY_IS_BLANK"
        | "TRANSLATION_DEFINED_IN_ANOTHER_FILE"
        | "INVALID_CUSTOM_VALUES"
        | "DESCRIPTION_TOO_LONG";
    };
    ImportFileIssueParamModel: {
      type:
        | "KEY_NAME"
        | "KEY_ID"
        | "LANGUAGE_ID"
        | "KEY_INDEX"
        | "VALUE"
        | "LINE"
        | "FILE_NODE_ORIGINAL"
        | "LANGUAGE_NAME";
      value?: string;
    };
    /** @description Definition of mapping for each file to import. */
    ImportFileMapping: {
      /** @description Name of the file to import. This is the name of the file provided in `files` request part or in uploaded archive. */
      fileName: string;
      /**
       * @description Format of the file. If not provided, Tolgee will try to guess the format from the file name or file contents.
       *
       * It is recommended to provide these values to prevent any issues with format detection.
       */
      format?:
        | "CSV_ICU"
        | "CSV_JAVA"
        | "CSV_PHP"
        | "CSV_RUBY"
        | "JSON_I18NEXT"
        | "JSON_ICU"
        | "JSON_JAVA"
        | "JSON_PHP"
        | "JSON_RUBY"
        | "JSON_C"
        | "PO_PHP"
        | "PO_C"
        | "PO_JAVA"
        | "PO_ICU"
        | "PO_RUBY"
        | "PO_PYTHON"
        | "STRINGS"
        | "STRINGSDICT"
        | "APPLE_XLIFF"
        | "APPLE_XCSTRINGS"
        | "PROPERTIES_ICU"
        | "PROPERTIES_JAVA"
        | "PROPERTIES_UNKNOWN"
        | "ANDROID_XML"
        | "COMPOSE_XML"
        | "FLUTTER_ARB"
        | "YAML_RUBY"
        | "YAML_JAVA"
        | "YAML_ICU"
        | "YAML_PHP"
        | "YAML_UNKNOWN"
        | "XLIFF_ICU"
        | "XLIFF_JAVA"
        | "XLIFF_PHP"
        | "XLIFF_RUBY"
        | "RESX_ICU"
        | "XLSX_ICU"
        | "XLSX_JAVA"
        | "XLSX_PHP"
        | "XLSX_RUBY";
      /**
       * @description The existing language tag in the Tolgee platform to which the imported language should be mapped.
       *
       * When null, Tolgee will try to guess the language from the file contents or file name.
       */
      languageTag?: string;
      /**
       * @description Tags of languages to be imported. When null, all languages from will be imported.
       *
       * This field is useful when the file contains multiple languages and you want to import only some of them. For example when importing Apple String Catalog (APPLE_XCSTRINGS), you might want only to import the base language.
       */
      languageTagsToImport?: string[];
      /** @description Namespace to import the file to. If not provided, the key will be imported without namespace. */
      namespace?: string;
    };
    ImportKeysDto: {
      keys: components["schemas"]["ImportKeysItemDto"][];
    };
    ImportKeysItemDto: {
      /**
       * @description Description of key
       * @example This key is used on homepage. It's a label of sign up button.
       */
      description?: string;
      /**
       * @description Key name to set translations for
       * @example what_a_key_to_translate
       */
      name: string;
      /** @description The namespace of the key. (When empty or null default namespace will be used) */
      namespace?: string;
      /**
       * @description Tags of the key
       * @example homepage,user-profile
       */
      tags?: string[];
      /**
       * @description Object mapping language tag to translation
       * @example [object Object]
       */
      translations: { [key: string]: string };
    };
    ImportKeysResolvableDto: {
      keys: components["schemas"]["ImportKeysResolvableItemDto"][];
    };
    ImportKeysResolvableItemDto: {
      /**
       * @description Key name to set translations for
       * @example what_a_key_to_translate
       */
      name: string;
      /** @description The namespace of the key. (When empty or null default namespace will be used) */
      namespace?: string;
      screenshots?: components["schemas"]["KeyScreenshotDto"][];
      /** @description Object mapping language tag to translation */
      translations: {
        [key: string]: components["schemas"]["ImportTranslationResolvableDto"];
      };
    };
    ImportLanguageModel: {
      /** Format: int32 */
      conflictCount: number;
      existingLanguageAbbreviation?: string;
      /** Format: int64 */
      existingLanguageId?: number;
      existingLanguageName?: string;
      existingLanguageTag?: string;
      /** Format: int64 */
      id: number;
      /** Format: int64 */
      importFileId: number;
      /** Format: int32 */
      importFileIssueCount: number;
      importFileName: string;
      name: string;
      namespace?: string;
      /** Format: int32 */
      resolvedCount: number;
      /** Format: int32 */
      totalCount: number;
    };
    ImportNamespaceModel: {
      /**
       * Format: int64
       * @description The id of namespace. When null, namespace doesn't exist and will be created by import.
       * @example 10000048
       */
      id?: number;
      /** @example homepage */
      name: string;
    };
    ImportSettingsModel: {
      /** @description If true, placeholders from other formats will be converted to ICU when possible */
      convertPlaceholdersToIcu: boolean;
      /** @description If false, only updates keys, skipping the creation of new keys */
      createNewKeys: boolean;
      /** @description If true, key descriptions will be overridden by the import */
      overrideKeyDescriptions: boolean;
    };
    ImportSettingsRequest: {
      /** @description If true, placeholders from other formats will be converted to ICU when possible */
      convertPlaceholdersToIcu: boolean;
      /** @description If false, only updates keys, skipping the creation of new keys */
      createNewKeys: boolean;
      /** @description If true, key descriptions will be overridden by the import */
      overrideKeyDescriptions: boolean;
    };
    ImportTranslationModel: {
      /** Format: int64 */
      conflictId?: number;
      conflictText?: string;
      existingKeyIsPlural: boolean;
      /** Format: int64 */
      id: number;
      isPlural: boolean;
      keyDescription?: string;
      /** Format: int64 */
      keyId: number;
      keyName: string;
      override: boolean;
      resolved: boolean;
      text?: string;
    };
    /** @description Object mapping language tag to translation */
    ImportTranslationResolvableDto: {
      /**
       * @description Determines, how conflict is resolved.
       *
       * - KEEP: Translation is not changed
       * - OVERRIDE: Translation is overridden
       * - NEW: New translation is created
       * - FORCE_OVERRIDE: Translation is updated, created or kept.
       *
       * @example OVERRIDE
       */
      resolution: "KEEP" | "OVERRIDE" | "NEW" | "FORCE_OVERRIDE";
      /**
       * @description Translation text
       * @example Hello! I am a translation!
       */
      text: string;
    };
    InitialDataModel: {
      announcement?: components["schemas"]["AnnouncementDto"];
      eeSubscription?: components["schemas"]["EeSubscriptionModel"];
      languageTag?: string;
      preferredOrganization?: components["schemas"]["PrivateOrganizationModel"];
      serverConfiguration: components["schemas"]["PublicConfigurationDTO"];
      userInfo?: components["schemas"]["PrivateUserAccountModel"];
    };
    JwtAuthenticationResponse: {
      accessToken?: string;
      tokenType?: string;
    };
    KeyDefinitionDto: {
      name: string;
      namespace?: string;
    };
    /** @description Disabled languages */
    KeyDisabledLanguageModel: {
      /** Format: int64 */
      id: number;
      tag: string;
    };
    KeyDisabledLanguagesModel: {
      /** @description Disabled languages */
      disabledLanguages: components["schemas"]["KeyDisabledLanguageModel"][];
      /**
       * Format: int64
       * @description Id of key record
       */
      id: number;
      /**
       * @description Name of key
       * @example this_is_super_key
       */
      name: string;
      /**
       * @description Namespace of key
       * @example homepage
       */
      namespace?: string;
    };
    /** @description Exclude keys filtered by the provided key information */
    KeyId: {
      /**
       * Format: int64
       * @description If key id is provided, name and namespace are ignored.
       */
      id?: number;
      name?: string;
      namespace?: string;
    };
    KeyImportResolvableResultModel: {
      /** @description List of keys */
      keys: components["schemas"]["KeyModel"][];
      /** @description Map uploadedImageId to screenshot */
      screenshots: { [key: string]: components["schemas"]["ScreenshotModel"] };
    };
    KeyInScreenshotModel: {
      /** Format: int64 */
      keyId: number;
      keyName: string;
      keyNamespace?: string;
      originalText?: string;
      position?: components["schemas"]["KeyInScreenshotPosition"];
    };
    KeyInScreenshotPosition: {
      /** Format: int32 */
      height: number;
      /** Format: int32 */
      width: number;
      /** Format: int32 */
      x: number;
      /** Format: int32 */
      y: number;
    };
    KeyInScreenshotPositionDto: {
      /** Format: int32 */
      height: number;
      /** Format: int32 */
      width: number;
      /** Format: int32 */
      x: number;
      /** Format: int32 */
      y: number;
    };
    KeyModel: {
      /** @description Custom values of the key */
      custom?: { [key: string]: { [key: string]: unknown } };
      /**
       * @description Description of key
       * @example This key is used on homepage. It's a label of sign up button.
       */
      description?: string;
      /**
       * Format: int64
       * @description Id of key record
       */
      id: number;
      /**
       * @description Name of key
       * @example this_is_super_key
       */
      name: string;
      /**
       * @description Namespace of key
       * @example homepage
       */
      namespace?: string;
    };
    KeyScreenshotDto: {
      positions?: components["schemas"]["KeyInScreenshotPositionDto"][];
      text?: string;
      /**
       * Format: int64
       * @description Ids of screenshot uploaded with /v2/image-upload endpoint
       */
      uploadedImageId: number;
    };
    KeySearchResultView: {
      baseTranslation?: string;
      description?: string;
      /** Format: int64 */
      id: number;
      name: string;
      namespace?: string;
      translation?: string;
    };
    KeySearchSearchResultModel: {
      baseTranslation?: string;
      description?: string;
      /** Format: int64 */
      id: number;
      name: string;
      namespace?: string;
      translation?: string;
      view?: components["schemas"]["KeySearchResultView"];
    };
    /** @description Tasks related to this key */
    KeyTaskViewModel: {
      done: boolean;
      /** Format: int64 */
      languageId: number;
      languageTag: string;
      /** Format: int64 */
      number: number;
      type: "TRANSLATE" | "REVIEW";
      userAssigned: boolean;
    };
    KeyWithBaseTranslationModel: {
      /**
       * @description Base translation
       * @example This is translation
       */
      baseTranslation?: string;
      /**
       * Format: int64
       * @description Id of key record
       */
      id: number;
      /**
       * @description Name of key
       * @example this_is_super_key
       */
      name: string;
      /**
       * @description Namespace of key
       * @example homepage
       */
      namespace?: string;
    };
    KeyWithDataModel: {
      /** @description Custom values of the key */
      custom: { [key: string]: { [key: string]: unknown } };
      /**
       * @description Description of key
       * @example This key is used on homepage. It's a label of sign up button.
       */
      description?: string;
      /**
       * Format: int64
       * @description Id of key record
       */
      id: number;
      /** @description If key is pluralized. If it will be reflected in the editor */
      isPlural: boolean;
      /**
       * @description Name of key
       * @example this_is_super_key
       */
      name: string;
      /**
       * @description Namespace of key
       * @example homepage
       */
      namespace?: string;
      /** @description The argument name for the plural */
      pluralArgName?: string;
      /** @description Screenshots of the key */
      screenshots: components["schemas"]["ScreenshotModel"][];
      /** @description Tags of key */
      tags: components["schemas"]["TagModel"][];
      /**
       * @description Translations object containing values updated in this request
       * @example [object Object]
       */
      translations: {
        [key: string]: components["schemas"]["TranslationModel"];
      };
    };
    KeyWithTranslationsModel: {
      /** @description There is a context available for this key */
      contextPresent: boolean;
      /**
       * @description The namespace of the key
       * @example homepage
       */
      keyDescription?: string;
      /**
       * Format: int64
       * @description Id of key record
       */
      keyId: number;
      /**
       * @description Is this key a plural?
       * @example true
       */
      keyIsPlural: boolean;
      /**
       * @description Name of key
       * @example this_is_super_key
       */
      keyName: string;
      /**
       * @description The namespace of the key
       * @example homepage
       */
      keyNamespace?: string;
      /**
       * Format: int64
       * @description The namespace id of the key
       * @example 100000282
       */
      keyNamespaceId?: number;
      /**
       * @description The placeholder name for plural parameter
       * @example value
       */
      keyPluralArgName?: string;
      /** @description Tags of key */
      keyTags: components["schemas"]["TagModel"][];
      /**
       * Format: int64
       * @description Count of screenshots provided for the key
       * @example 1
       */
      screenshotCount: number;
      /** @description Key screenshots. Not provided when API key hasn't screenshots.view scope permission. */
      screenshots?: components["schemas"]["ScreenshotModel"][];
      /** @description Tasks related to this key */
      tasks?: components["schemas"]["KeyTaskViewModel"][];
      /**
       * @description Translations object
       * @example
       *     {
       *       "en": {
       *         "id": 100000003,
       *         "text": "This is super translation!"
       *         "state": "TRANSLATED",
       *         "commentCount": 1
       *       }
       *     }
       */
      translations: {
        [key: string]: components["schemas"]["TranslationViewModel"];
      };
    };
    KeysScopeView: {
      /** Format: int64 */
      characterCount: number;
      /** Format: int64 */
      keyCount: number;
      /** Format: int64 */
      keyCountIncludingConflicts: number;
      /** Format: int64 */
      wordCount: number;
    };
    KeysWithTranslationsPageModel: {
      _embedded?: {
        keys?: components["schemas"]["KeyWithTranslationsModel"][];
      };
      /**
       * @description Cursor to get next data
       * @example eyJrZXlJZCI6eyJkaXJlY3Rpb24iOiJBU0MiLCJ2YWx1ZSI6IjEwMDAwMDAxMjAifX0=
       */
      nextCursor?: string;
      page?: components["schemas"]["PageMetadata"];
      /** @description Provided languages data */
      selectedLanguages: components["schemas"]["LanguageModel"][];
    };
    LanguageAiPromptCustomizationModel: {
      /**
       * @description The language description used in the  prompt that helps AI translator to fine tune results for specific language
       * @example For arabic language, we are super formal. Always use these translations:
       * Paper -> ورقة
       * Office -> مكتب
       */
      description?: string;
      language: components["schemas"]["LanguageModel"];
    };
    LanguageConfigItemModel: {
      /**
       * @deprecated
       * @description Services to be used for suggesting (deprecated: use enabledServicesInfo)
       */
      enabledServices: (
        | "GOOGLE"
        | "AWS"
        | "DEEPL"
        | "AZURE"
        | "BAIDU"
        | "TOLGEE"
      )[];
      /** @description Info about enabled services */
      enabledServicesInfo: components["schemas"]["MtServiceInfo"][];
      /**
       * @deprecated
       * @description Service used for automated translating (deprecated: use primaryServiceInfo)
       */
      primaryService?:
        | "GOOGLE"
        | "AWS"
        | "DEEPL"
        | "AZURE"
        | "BAIDU"
        | "TOLGEE";
      primaryServiceInfo?: components["schemas"]["MtServiceInfo"];
      /**
       * Format: int64
       * @description When null, its a default configuration applied to not configured languages
       */
      targetLanguageId?: number;
      /** @description When null, its a default configuration applied to not configured languages */
      targetLanguageName?: string;
      /** @description When null, its a default configuration applied to not configured languages */
      targetLanguageTag?: string;
    };
    LanguageInfoModel: {
      /** Format: int64 */
      languageId?: number;
      languageTag?: string;
      supportedServices: components["schemas"]["MtSupportedService"][];
    };
    /**
     * @description Maps the languages from imported files to languages existing in the Tolgee platform.
     *
     * Use this field only when your files contain multiple languages (e.g., XLIFF files).
     *
     * Otherwise, use the `languageTag` property of `fileMappings`.
     *
     * Example: In xliff files, there are `source-language` and `target-language` attributes defined on `file` element. Using this field you can map source and target values to languages stored in the Tolgee Platform.
     */
    LanguageMapping: {
      /**
       * @description The language from the imported file.
       *
       * For xliff files, this is the `source-language` or the `target-language` attribute value of `file` element.
       * @example en-US
       */
      importLanguage: string;
      /**
       * @description The tag of language existing in the Tolgee platform to which the imported language should be mapped.
       * @example en-US
       */
      platformLanguageTag: string;
    };
    LanguageModel: {
      /** @description Whether is base language of project */
      base: boolean;
      /**
       * @description Language flag emoji as UTF-8 emoji
       * @example 🇨🇿
       */
      flagEmoji?: string;
      /** Format: int64 */
      id: number;
      /**
       * @description Language name in english
       * @example Czech
       */
      name: string;
      /**
       * @description Language name in this language
       * @example čeština
       */
      originalName?: string;
      /**
       * @description Language tag according to BCP 47 definition
       * @example cs-CZ
       */
      tag: string;
    };
    LanguageRequest: {
      /**
       * @description Language flag emoji as UTF-8 emoji
       * @example 🇨🇿
       */
      flagEmoji?: string;
      /**
       * @description Language name in english
       * @example Czech
       */
      name: string;
      /**
       * @description Language name in this language
       * @example čeština
       */
      originalName: string;
      /**
       * @description Language tag according to BCP 47 definition
       * @example cs-CZ
       */
      tag: string;
    };
    LanguageStatsModel: {
      languageFlagEmoji?: string;
      /** Format: int64 */
      languageId?: number;
      languageName?: string;
      languageOriginalName?: string;
      languageTag?: string;
      /** Format: int64 */
      reviewedKeyCount: number;
      /** Format: double */
      reviewedPercentage: number;
      /** Format: int64 */
      reviewedWordCount: number;
      /** Format: int64 */
      translatedKeyCount: number;
      /** Format: double */
      translatedPercentage: number;
      /** Format: int64 */
      translatedWordCount: number;
      /** Format: int64 */
      untranslatedKeyCount: number;
      /** Format: double */
      untranslatedPercentage: number;
      /** Format: int64 */
      untranslatedWordCount: number;
    };
    LoginRequest: {
      otp?: string;
      password: string;
      username: string;
    };
    MachineTranslationLanguagePropsDto: {
      /**
       * @deprecated
       * @description List of enabled services (deprecated: use enabledServicesInfo)
       */
      enabledServices?: (
        | "GOOGLE"
        | "AWS"
        | "DEEPL"
        | "AZURE"
        | "BAIDU"
        | "TOLGEE"
      )[];
      /** @description Info about enabled services */
      enabledServicesInfo?: components["schemas"]["MtServiceInfo"][];
      /**
       * @deprecated
       * @description This service will be used for automated translation
       */
      primaryService?:
        | "GOOGLE"
        | "AWS"
        | "DEEPL"
        | "AZURE"
        | "BAIDU"
        | "TOLGEE";
      primaryServiceInfo?: components["schemas"]["MtServiceInfo"];
      /**
       * Format: int64
       * @description The language to apply those rules. If null, then this settings are default.
       */
      targetLanguageId?: number;
    };
    MachineTranslationProviderModel: {
      /**
       * @description BCP 47 tags of languages supported by the translation service. When null, all possible languages are supported.
       *
       * Please note that Tolgee tries to fall back to a higher subtag if the subtag is not supported.
       *
       * E.g., if `pt-BR` is not supported. Tolgee fallbacks to `pt`.
       */
      supportedLanguages?: string[];
    };
    MachineTranslationRequest: {
      keyIds: number[];
      targetLanguageIds: number[];
    };
    ModifiedEntityModel: {
      description?: { [key: string]: { [key: string]: unknown } };
      entityClass: string;
      /** Format: int64 */
      entityId: number;
      exists?: boolean;
      modifications?: {
        [key: string]: components["schemas"]["PropertyModification"];
      };
      relations?: {
        [key: string]: components["schemas"]["ExistenceEntityDescription"];
      };
    };
    MtServiceDTO: {
      defaultEnabledForProject: boolean;
      enabled: boolean;
    };
    /** @description Info about enabled services */
    MtServiceInfo: {
      formality?: "FORMAL" | "INFORMAL" | "DEFAULT";
      serviceType: "GOOGLE" | "AWS" | "DEEPL" | "AZURE" | "BAIDU" | "TOLGEE";
    };
    MtServicesDTO: {
      defaultPrimaryService?:
        | "GOOGLE"
        | "AWS"
        | "DEEPL"
        | "AZURE"
        | "BAIDU"
        | "TOLGEE";
      services: { [key: string]: components["schemas"]["MtServiceDTO"] };
    };
    MtSupportedService: {
      formalitySupported: boolean;
      serviceType: "GOOGLE" | "AWS" | "DEEPL" | "AZURE" | "BAIDU" | "TOLGEE";
    };
    NamespaceModel: {
      /**
       * Format: int64
       * @description The id of namespace
       * @example 10000048
       */
      id: number;
      /** @example homepage */
      name: string;
    };
    OAuthPublicConfigDTO: {
      clientId?: string;
      enabled: boolean;
    };
    OAuthPublicExtendsConfigDTO: {
      authorizationUrl?: string;
      clientId?: string;
      enabled: boolean;
      scopes?: string[];
    };
    OrganizationDto: {
      /** @example This is a beautiful organization full of beautiful and clever people */
      description?: string;
      /** @example Beautiful organization */
      name: string;
      /** @example btforg */
      slug?: string;
    };
    OrganizationInvitationModel: {
      code: string;
      /** Format: date-time */
      createdAt: string;
      createdBy?: components["schemas"]["SimpleUserAccountModel"];
      /** Format: int64 */
      id: number;
      invitedUserEmail?: string;
      invitedUserName?: string;
      type: "MEMBER" | "OWNER";
    };
    OrganizationInviteUserDto: {
      /** @description Email to send invitation to */
      email?: string;
      /** @description Name of invited user */
      name?: string;
      roleType: "MEMBER" | "OWNER";
    };
    OrganizationModel: {
      avatar?: components["schemas"]["Avatar"];
      basePermissions: components["schemas"]["PermissionModel"];
      /**
       * @description The role of currently authorized user.
       *
       * Can be null when user has direct access to one of the projects owned by the organization.
       */
      currentUserRole?: "MEMBER" | "OWNER";
      /** @example This is a beautiful organization full of beautiful and clever people */
      description?: string;
      /** Format: int64 */
      id: number;
      /** @example Beautiful organization */
      name: string;
      /** @example btforg */
      slug: string;
    };
    PageMetadata: {
      /** Format: int64 */
      number?: number;
      /** Format: int64 */
      size?: number;
      /** Format: int64 */
      totalElements?: number;
      /** Format: int64 */
      totalPages?: number;
    };
    Pageable: {
      /** Format: int32 */
      page?: number;
      /** Format: int32 */
      size?: number;
      sort?: string[];
    };
    PagedModelApiKeyModel: {
      _embedded?: {
        apiKeys?: components["schemas"]["ApiKeyModel"][];
      };
      page?: components["schemas"]["PageMetadata"];
    };
    PagedModelBatchJobModel: {
      _embedded?: {
        batchJobs?: components["schemas"]["BatchJobModel"][];
      };
      page?: components["schemas"]["PageMetadata"];
    };
    PagedModelContentDeliveryConfigModel: {
      _embedded?: {
        contentDeliveryConfigs?: components["schemas"]["ContentDeliveryConfigModel"][];
      };
      page?: components["schemas"]["PageMetadata"];
    };
    PagedModelContentStorageModel: {
      _embedded?: {
        contentStorages?: components["schemas"]["ContentStorageModel"][];
      };
      page?: components["schemas"]["PageMetadata"];
    };
    PagedModelImportFileIssueModel: {
      _embedded?: {
        importFileIssues?: components["schemas"]["ImportFileIssueModel"][];
      };
      page?: components["schemas"]["PageMetadata"];
    };
    PagedModelImportLanguageModel: {
      _embedded?: {
        languages?: components["schemas"]["ImportLanguageModel"][];
      };
      page?: components["schemas"]["PageMetadata"];
    };
    PagedModelImportTranslationModel: {
      _embedded?: {
        translations?: components["schemas"]["ImportTranslationModel"][];
      };
      page?: components["schemas"]["PageMetadata"];
    };
    PagedModelKeyModel: {
      _embedded?: {
        keys?: components["schemas"]["KeyModel"][];
      };
      page?: components["schemas"]["PageMetadata"];
    };
    PagedModelKeySearchSearchResultModel: {
      _embedded?: {
        keys?: components["schemas"]["KeySearchSearchResultModel"][];
      };
      page?: components["schemas"]["PageMetadata"];
    };
    PagedModelLanguageModel: {
      _embedded?: {
        languages?: components["schemas"]["LanguageModel"][];
      };
      page?: components["schemas"]["PageMetadata"];
    };
    PagedModelModifiedEntityModel: {
      _embedded?: {
        modifiedEntities?: components["schemas"]["ModifiedEntityModel"][];
      };
      page?: components["schemas"]["PageMetadata"];
    };
    PagedModelNamespaceModel: {
      _embedded?: {
        namespaces?: components["schemas"]["NamespaceModel"][];
      };
      page?: components["schemas"]["PageMetadata"];
    };
    PagedModelOrganizationModel: {
      _embedded?: {
        organizations?: components["schemas"]["OrganizationModel"][];
      };
      page?: components["schemas"]["PageMetadata"];
    };
    PagedModelPatModel: {
      _embedded?: {
        pats?: components["schemas"]["PatModel"][];
      };
      page?: components["schemas"]["PageMetadata"];
    };
    PagedModelProjectActivityModel: {
      _embedded?: {
        activities?: components["schemas"]["ProjectActivityModel"][];
      };
      page?: components["schemas"]["PageMetadata"];
    };
    PagedModelProjectModel: {
      _embedded?: {
        projects?: components["schemas"]["ProjectModel"][];
      };
      page?: components["schemas"]["PageMetadata"];
    };
    PagedModelProjectWithStatsModel: {
      _embedded?: {
        projects?: components["schemas"]["ProjectWithStatsModel"][];
      };
      page?: components["schemas"]["PageMetadata"];
    };
    PagedModelSimpleUserAccountModel: {
      _embedded?: {
        users?: components["schemas"]["SimpleUserAccountModel"][];
      };
      page?: components["schemas"]["PageMetadata"];
    };
    PagedModelTagModel: {
      _embedded?: {
        tags?: components["schemas"]["TagModel"][];
      };
      page?: components["schemas"]["PageMetadata"];
    };
    PagedModelTaskModel: {
      _embedded?: {
        tasks?: components["schemas"]["TaskModel"][];
      };
      page?: components["schemas"]["PageMetadata"];
    };
    PagedModelTaskWithProjectModel: {
      _embedded?: {
        tasks?: components["schemas"]["TaskWithProjectModel"][];
      };
      page?: components["schemas"]["PageMetadata"];
    };
    PagedModelTranslationCommentModel: {
      _embedded?: {
        translationComments?: components["schemas"]["TranslationCommentModel"][];
      };
      page?: components["schemas"]["PageMetadata"];
    };
    PagedModelTranslationHistoryModel: {
      _embedded?: {
        revisions?: components["schemas"]["TranslationHistoryModel"][];
      };
      page?: components["schemas"]["PageMetadata"];
    };
    PagedModelTranslationMemoryItemModel: {
      _embedded?: {
        translationMemoryItems?: components["schemas"]["TranslationMemoryItemModel"][];
      };
      page?: components["schemas"]["PageMetadata"];
    };
    PagedModelUserAccountInProjectModel: {
      _embedded?: {
        users?: components["schemas"]["UserAccountInProjectModel"][];
      };
      page?: components["schemas"]["PageMetadata"];
    };
    PagedModelUserAccountModel: {
      _embedded?: {
        users?: components["schemas"]["UserAccountModel"][];
      };
      page?: components["schemas"]["PageMetadata"];
    };
    PagedModelUserAccountWithOrganizationRoleModel: {
      _embedded?: {
        usersInOrganization?: components["schemas"]["UserAccountWithOrganizationRoleModel"][];
      };
      page?: components["schemas"]["PageMetadata"];
    };
    PagedModelWebhookConfigModel: {
      _embedded?: {
        webhookConfigs?: components["schemas"]["WebhookConfigModel"][];
      };
      page?: components["schemas"]["PageMetadata"];
    };
    PatModel: {
      /** Format: int64 */
      createdAt: number;
      description: string;
      /** Format: int64 */
      expiresAt?: number;
      /** Format: int64 */
      id: number;
      /** Format: int64 */
      lastUsedAt?: number;
      /** Format: int64 */
      updatedAt: number;
    };
    PatWithUserModel: {
      /** Format: int64 */
      createdAt: number;
      description: string;
      /** Format: int64 */
      expiresAt?: number;
      /** Format: int64 */
      id: number;
      /** Format: int64 */
      lastUsedAt?: number;
      /** Format: int64 */
      updatedAt: number;
      user: components["schemas"]["SimpleUserAccountModel"];
    };
    /**
     * @description Current user's direct permission
     * @example MANAGE
     */
    PermissionModel: {
      /**
       * @deprecated
       * @description Deprecated (use translateLanguageIds).
       *
       * List of languages current user has TRANSLATE permission to. If null, all languages edition is permitted.
       * @example 200001,200004
       */
      permittedLanguageIds?: number[];
      /**
       * @description Granted scopes to the user. When user has type permissions, this field contains permission scopes of the type.
       * @example KEYS_EDIT,TRANSLATIONS_VIEW
       */
      scopes: (
        | "translations.view"
        | "translations.edit"
        | "keys.edit"
        | "screenshots.upload"
        | "screenshots.delete"
        | "screenshots.view"
        | "activity.view"
        | "languages.edit"
        | "admin"
        | "project.edit"
        | "members.view"
        | "members.edit"
        | "translation-comments.add"
        | "translation-comments.edit"
        | "translation-comments.set-state"
        | "translations.state-edit"
        | "keys.view"
        | "keys.delete"
        | "keys.create"
        | "batch-jobs.view"
        | "batch-jobs.cancel"
        | "translations.batch-by-tm"
        | "translations.batch-machine"
        | "content-delivery.manage"
        | "content-delivery.publish"
        | "webhooks.manage"
        | "tasks.view"
        | "tasks.edit"
      )[];
      /**
       * @description List of languages user can change state to. If null, changing state of all language values is permitted.
       * @example 200001,200004
       */
      stateChangeLanguageIds?: number[];
      /**
       * @description List of languages user can translate to. If null, all languages editing is permitted.
       * @example 200001,200004
       */
      translateLanguageIds?: number[];
      /** @description The user's permission type. This field is null if uses granular permissions */
      type?: "NONE" | "VIEW" | "TRANSLATE" | "REVIEW" | "EDIT" | "MANAGE";
      /**
       * @description List of languages user can view. If null, all languages view is permitted.
       * @example 200001,200004
       */
      viewLanguageIds?: number[];
    };
    PermissionWithAgencyModel: {
      agency?: components["schemas"]["TranslationAgencySimpleModel"];
      /**
       * @deprecated
       * @description Deprecated (use translateLanguageIds).
       *
       * List of languages current user has TRANSLATE permission to. If null, all languages edition is permitted.
       * @example 200001,200004
       */
      permittedLanguageIds?: number[];
      /**
       * @description Granted scopes to the user. When user has type permissions, this field contains permission scopes of the type.
       * @example KEYS_EDIT,TRANSLATIONS_VIEW
       */
      scopes: (
        | "translations.view"
        | "translations.edit"
        | "keys.edit"
        | "screenshots.upload"
        | "screenshots.delete"
        | "screenshots.view"
        | "activity.view"
        | "languages.edit"
        | "admin"
        | "project.edit"
        | "members.view"
        | "members.edit"
        | "translation-comments.add"
        | "translation-comments.edit"
        | "translation-comments.set-state"
        | "translations.state-edit"
        | "keys.view"
        | "keys.delete"
        | "keys.create"
        | "batch-jobs.view"
        | "batch-jobs.cancel"
        | "translations.batch-by-tm"
        | "translations.batch-machine"
        | "content-delivery.manage"
        | "content-delivery.publish"
        | "webhooks.manage"
        | "tasks.view"
        | "tasks.edit"
      )[];
      /**
       * @description List of languages user can change state to. If null, changing state of all language values is permitted.
       * @example 200001,200004
       */
      stateChangeLanguageIds?: number[];
      /**
       * @description List of languages user can translate to. If null, all languages editing is permitted.
       * @example 200001,200004
       */
      translateLanguageIds?: number[];
      /** @description The user's permission type. This field is null if uses granular permissions */
      type?: "NONE" | "VIEW" | "TRANSLATE" | "REVIEW" | "EDIT" | "MANAGE";
      /**
       * @description List of languages user can view. If null, all languages view is permitted.
       * @example 200001,200004
       */
      viewLanguageIds?: number[];
    };
    PlanIncludedUsageModel: {
      /** Format: int64 */
      mtCredits: number;
      /** Format: int64 */
      seats: number;
      /** Format: int64 */
      translationSlots: number;
      /** Format: int64 */
      translations: number;
    };
    PlanPricesModel: {
      perSeat: number;
      perThousandMtCredits?: number;
      perThousandTranslations?: number;
      subscriptionMonthly: number;
      subscriptionYearly: number;
    };
    PlausibleDto: {
      domain?: string;
      scriptUrl: string;
      url: string;
    };
    PreTranslationByTmRequest: {
      keyIds: number[];
      targetLanguageIds: number[];
    };
    PrepareSetEeLicenceKeyModel: {
      plan: components["schemas"]["SelfHostedEePlanModel"];
      usage: components["schemas"]["UsageModel"];
    };
    PrivateOrganizationModel: {
      activeCloudSubscription?: components["schemas"]["PublicCloudSubscriptionModel"];
      avatar?: components["schemas"]["Avatar"];
      basePermissions: components["schemas"]["PermissionModel"];
      /**
       * @description The role of currently authorized user.
       *
       * Can be null when user has direct access to one of the projects owned by the organization.
       */
      currentUserRole?: "MEMBER" | "OWNER";
      /** @example This is a beautiful organization full of beautiful and clever people */
      description?: string;
      /** @example Features organization has enabled */
      enabledFeatures: (
        | "GRANULAR_PERMISSIONS"
        | "PRIORITIZED_FEATURE_REQUESTS"
        | "PREMIUM_SUPPORT"
        | "DEDICATED_SLACK_CHANNEL"
        | "ASSISTED_UPDATES"
        | "DEPLOYMENT_ASSISTANCE"
        | "BACKUP_CONFIGURATION"
        | "TEAM_TRAINING"
        | "ACCOUNT_MANAGER"
        | "STANDARD_SUPPORT"
        | "PROJECT_LEVEL_CONTENT_STORAGES"
        | "WEBHOOKS"
        | "MULTIPLE_CONTENT_DELIVERY_CONFIGS"
        | "AI_PROMPT_CUSTOMIZATION"
        | "SLACK_INTEGRATION"
        | "TASKS"
        | "SSO"
        | "ORDER_TRANSLATION"
      )[];
      /** Format: int64 */
      id: number;
      /** @example Beautiful organization */
      name: string;
      organizationModel?: components["schemas"]["OrganizationModel"];
      quickStart?: components["schemas"]["QuickStartModel"];
      /** @example btforg */
      slug: string;
    };
    PrivateUserAccountModel: {
      accountType: "LOCAL" | "MANAGED" | "THIRD_PARTY";
      avatar?: components["schemas"]["Avatar"];
      deletable: boolean;
      emailAwaitingVerification?: string;
      globalServerRole: "USER" | "ADMIN";
      /** Format: int64 */
      id: number;
      mfaEnabled: boolean;
      name?: string;
      needsSuperJwtToken: boolean;
      username: string;
    };
    ProjectActivityAuthorModel: {
      avatar?: components["schemas"]["Avatar"];
      deleted: boolean;
      /** Format: int64 */
      id: number;
      name?: string;
      username?: string;
    };
    ProjectActivityModel: {
      author?: components["schemas"]["ProjectActivityAuthorModel"];
      counts?: { [key: string]: number };
      meta?: { [key: string]: { [key: string]: unknown } };
      modifiedEntities?: {
        [key: string]: components["schemas"]["ModifiedEntityModel"][];
      };
      params?: { [key: string]: unknown };
      /** Format: int64 */
      revisionId: number;
      /** Format: int64 */
      timestamp: number;
      type:
        | "UNKNOWN"
        | "SET_TRANSLATION_STATE"
        | "SET_TRANSLATIONS"
        | "DISMISS_AUTO_TRANSLATED_STATE"
        | "SET_OUTDATED_FLAG"
        | "TRANSLATION_COMMENT_ADD"
        | "TRANSLATION_COMMENT_DELETE"
        | "TRANSLATION_COMMENT_EDIT"
        | "TRANSLATION_COMMENT_SET_STATE"
        | "SCREENSHOT_DELETE"
        | "SCREENSHOT_ADD"
        | "KEY_TAGS_EDIT"
        | "KEY_NAME_EDIT"
        | "KEY_DELETE"
        | "CREATE_KEY"
        | "COMPLEX_EDIT"
        | "IMPORT"
        | "CREATE_LANGUAGE"
        | "EDIT_LANGUAGE"
        | "DELETE_LANGUAGE"
        | "HARD_DELETE_LANGUAGE"
        | "CREATE_PROJECT"
        | "EDIT_PROJECT"
        | "NAMESPACE_EDIT"
        | "BATCH_PRE_TRANSLATE_BY_TM"
        | "BATCH_MACHINE_TRANSLATE"
        | "AUTO_TRANSLATE"
        | "BATCH_CLEAR_TRANSLATIONS"
        | "BATCH_COPY_TRANSLATIONS"
        | "BATCH_SET_TRANSLATION_STATE"
        | "BATCH_TAG_KEYS"
        | "BATCH_UNTAG_KEYS"
        | "BATCH_SET_KEYS_NAMESPACE"
        | "AUTOMATION"
        | "CONTENT_DELIVERY_CONFIG_CREATE"
        | "CONTENT_DELIVERY_CONFIG_UPDATE"
        | "CONTENT_DELIVERY_CONFIG_DELETE"
        | "CONTENT_STORAGE_CREATE"
        | "CONTENT_STORAGE_UPDATE"
        | "CONTENT_STORAGE_DELETE"
        | "WEBHOOK_CONFIG_CREATE"
        | "WEBHOOK_CONFIG_UPDATE"
        | "WEBHOOK_CONFIG_DELETE"
        | "COMPLEX_TAG_OPERATION"
        | "TASKS_CREATE"
        | "TASK_CREATE"
        | "TASK_UPDATE"
        | "TASK_KEYS_UPDATE"
        | "TASK_FINISH"
        | "TASK_CLOSE"
        | "TASK_REOPEN"
        | "TASK_KEY_UPDATE"
        | "ORDER_TRANSLATION";
    };
    ProjectAiPromptCustomizationModel: {
      /**
       * @description The project description used in the  prompt that helps AI translator to understand the context of your project.
       * @example We are Dunder Mifflin, a paper company. We sell paper. This is an project of translations for out paper selling app.
       */
      description?: string;
    };
    ProjectInvitationModel: {
      code?: string;
      /** Format: date-time */
      createdAt: string;
      createdBy?: components["schemas"]["SimpleUserAccountModel"];
      /** Format: int64 */
      id: number;
      invitedUserEmail?: string;
      invitedUserName?: string;
      permission: components["schemas"]["PermissionWithAgencyModel"];
      permittedLanguageIds?: number[];
      type?: "NONE" | "VIEW" | "TRANSLATE" | "REVIEW" | "EDIT" | "MANAGE";
    };
    ProjectInviteUserDto: {
      /**
       * Format: int64
       * @description Id of invited agency
       */
      agencyId?: number;
      /** @description Email to send invitation to */
      email?: string;
      /**
       * @deprecated
       * @description Deprecated -> use translate languages
       */
      languages?: number[];
      /** @description Name of invited user */
      name?: string;
      /**
       * @description Granted scopes for the invited user
       * @example translations.view,translations.edit
       */
      scopes?: string[];
      /**
       * @deprecated
       * @description Languages user can change translation state (review)
       */
      stateChangeLanguages?: number[];
      /**
       * @deprecated
       * @description Languages user can translate to
       */
      translateLanguages?: number[];
      type?: "NONE" | "VIEW" | "TRANSLATE" | "REVIEW" | "EDIT" | "MANAGE";
      /**
       * @deprecated
       * @description Languages user can view
       */
      viewLanguages?: number[];
    };
    ProjectModel: {
      avatar?: components["schemas"]["Avatar"];
      baseLanguage?: components["schemas"]["LanguageModel"];
      computedPermission: components["schemas"]["ComputedPermissionModel"];
      defaultNamespace?: components["schemas"]["NamespaceModel"];
      description?: string;
      directPermission?: components["schemas"]["PermissionModel"];
      /** @description Whether to disable ICU placeholder visualization in the editor and it's support. */
      icuPlaceholders: boolean;
      /** Format: int64 */
      id: number;
      name: string;
      organizationOwner?: components["schemas"]["SimpleOrganizationModel"];
      organizationRole?: "MEMBER" | "OWNER";
      slug?: string;
      useNamespaces: boolean;
    };
    ProjectStatistics: {
      /** Format: int64 */
      keyCount: number;
      /** Format: int64 */
      languageCount: number;
      /** Format: int64 */
      projectId: number;
      translationStatePercentages: { [key: string]: number };
    };
    ProjectStatsModel: {
      /** Format: int64 */
      baseWordsCount: number;
      /** Format: int64 */
      keyCount: number;
      /** Format: int32 */
      languageCount: number;
      languageStats: components["schemas"]["LanguageStatsModel"][];
      /** Format: int64 */
      membersCount: number;
      /** Format: int64 */
      projectId: number;
      /** Format: double */
      reviewedPercentage: number;
      /** Format: int64 */
      tagCount: number;
      /** Format: int64 */
      taskCount: number;
      /** Format: double */
      translatedPercentage: number;
    };
    ProjectTransferOptionModel: {
      /** Format: int64 */
      id: number;
      name: string;
      slug: string;
    };
    ProjectWithStatsModel: {
      avatar?: components["schemas"]["Avatar"];
      baseLanguage?: components["schemas"]["LanguageModel"];
      computedPermission: components["schemas"]["ComputedPermissionModel"];
      description?: string;
      directPermission?: components["schemas"]["PermissionModel"];
      /** @description Whether to disable ICU placeholder visualization in the editor and it's support. */
      icuPlaceholders: boolean;
      /** Format: int64 */
      id: number;
      languages: components["schemas"]["LanguageModel"][];
      name: string;
      organizationOwner?: components["schemas"]["SimpleOrganizationModel"];
      organizationRole?: "MEMBER" | "OWNER";
      slug?: string;
      stats: components["schemas"]["ProjectStatistics"];
    };
    PropertyModification: {
      new?: { [key: string]: unknown };
      old?: { [key: string]: unknown };
    };
    PublicBillingConfigurationDTO: {
      enabled: boolean;
    };
    /** @example Current active subscription info */
    PublicCloudSubscriptionModel: {
      cancelAtPeriodEnd: boolean;
      currentBillingPeriod?: "MONTHLY" | "YEARLY";
      status:
        | "ACTIVE"
        | "CANCELED"
        | "PAST_DUE"
        | "UNPAID"
        | "ERROR"
        | "TRIALING"
        | "KEY_USED_BY_ANOTHER_INSTANCE"
        | "UNKNOWN";
      /** Format: int64 */
      trialEnd?: number;
    };
    PublicConfigurationDTO: {
      allowRegistrations: boolean;
      appName: string;
      authMethods?: components["schemas"]["AuthMethodsDTO"];
      authentication: boolean;
      billing: components["schemas"]["PublicBillingConfigurationDTO"];
      capterraTracker?: string;
      chatwootToken?: string;
      clientSentryDsn?: string;
      contentDeliveryConfigured: boolean;
      ga4Tag?: string;
      internalControllerEnabled: boolean;
      machineTranslationServices: components["schemas"]["MtServicesDTO"];
      /** Format: int64 */
      maxTranslationTextLength: number;
      /** Format: int32 */
      maxUploadFileSize: number;
      nativeEnabled: boolean;
      needsEmailVerification: boolean;
      passwordResettable: boolean;
      plausible: components["schemas"]["PlausibleDto"];
      postHogApiKey?: string;
      postHogHost?: string;
      recaptchaSiteKey?: string;
      screenshotsUrl: string;
      showVersion: boolean;
      slack: components["schemas"]["SlackDTO"];
      /** Format: int32 */
      translationsViewLanguagesLimit: number;
      userCanCreateOrganizations: boolean;
      userSourceField: boolean;
      version: string;
    };
    PublicInvitationModel: {
      code: string;
      createdBy?: components["schemas"]["SimpleUserAccountModel"];
      /** Format: int64 */
      id: number;
      organizationName?: string;
      projectName?: string;
    };
    PublicUsageModel: {
      /**
       * Format: int64
       * @description The maximum amount organization can spend on MT credit usage before they reach the spending limit
       */
      availablePayAsYouGoMtCredits: number;
      /**
       * Format: int64
       * @description Current balance of standard credits. Standard credits are refilled every month
       */
      creditBalance: number;
      /**
       * Format: int64
       * @description Date when credits will be refilled. (In epoch format)
       */
      creditBalanceNextRefillAt: number;
      /**
       * Format: int64
       * @description Date when credits were refilled. (In epoch format)
       */
      creditBalanceRefilledAt: number;
      /**
       * Format: int64
       * @description Currently used credits over credits included in plan and extra credits
       */
      currentPayAsYouGoMtCredits: number;
      /**
       * Format: int64
       * @description How many translations slots are currently used by organization
       */
      currentTranslationSlots: number;
      /**
       * Format: int64
       * @description How many non-empty translations are currently stored by organization
       */
      currentTranslations: number;
      /**
       * Format: int64
       * @deprecated
       * @description Customers were able to buy extra credits separately in the past.
       *
       * This option is not available anymore and this field is kept only for backward compatibility purposes and is always 0.
       */
      extraCreditBalance: number;
      /**
       * Format: int64
       * @description How many credits are included in your current plan
       */
      includedMtCredits: number;
      /**
       * Format: int64
       * @description How many translation slots are included in current subscription plan. How many translation slots can organization use without additional costs
       */
      includedTranslationSlots: number;
      /**
       * Format: int64
       * @description How many translations are included in current subscription plan. How many translations can organization use without additional costs
       */
      includedTranslations: number;
      /** Format: int64 */
      organizationId: number;
      /**
       * Format: int64
       * @description How many translations can be stored within your organization
       */
      translationSlotsLimit: number;
      /**
       * Format: int64
       * @description How many translations can be stored until reaching the limit. (For pay us you go, the top limit is the spending limit)
       */
      translationsLimit: number;
    };
    QuickStartModel: {
      completedSteps: string[];
      finished: boolean;
      open: boolean;
    };
    RegenerateApiKeyDto: {
      /**
       * Format: int64
       * @description Expiration date in epoch format (milliseconds). When null key never expires.
       * @example 1661172869000
       */
      expiresAt?: number;
    };
    RegeneratePatDto: {
      /**
       * Format: int64
       * @description Expiration date in epoch format (milliseconds). When null key never expires.
       * @example 1661172869000
       */
      expiresAt?: number;
    };
    /** @description Keys in the document used as a context for machine translation. Keys in the same order as they appear in the document. The order is important! We are using it for graph distance calculation. */
    RelatedKeyDto: {
      keyName: string;
      namespace?: string;
    };
    ResetPassword: {
      code: string;
      email: string;
      password?: string;
    };
    ResetPasswordRequest: {
      callbackUrl: string;
      email: string;
    };
    RevealedApiKeyModel: {
      description: string;
      /** Format: int64 */
      expiresAt?: number;
      /** Format: int64 */
      id: number;
      /** @description Resulting user's api key */
      key: string;
      /** Format: int64 */
      lastUsedAt?: number;
      /** Format: int64 */
      projectId: number;
      projectName: string;
      scopes: string[];
      userFullName?: string;
      username?: string;
    };
    RevealedPatModel: {
      /** Format: int64 */
      createdAt: number;
      description: string;
      /** Format: int64 */
      expiresAt?: number;
      /** Format: int64 */
      id: number;
      /** Format: int64 */
      lastUsedAt?: number;
      token: string;
      /** Format: int64 */
      updatedAt: number;
    };
    S3ContentStorageConfigDto: {
      accessKey?: string;
      bucketName: string;
      contentStorageType?: "S3" | "AZURE";
      enabled?: boolean;
      endpoint: string;
      secretKey?: string;
      signingRegion: string;
    };
    S3ContentStorageConfigModel: {
      bucketName: string;
      endpoint: string;
      signingRegion: string;
    };
    ScreenshotInfoDto: {
      location?: string;
      positions?: components["schemas"]["KeyInScreenshotPositionDto"][];
      text?: string;
    };
    /** @description Screenshots of the key */
    ScreenshotModel: {
      /** Format: date-time */
      createdAt?: string;
      fileUrl: string;
      /**
       * @description File name, which may be downloaded from the screenshot path.
       *
       * When images are secured. Encrypted timestamp is appended to the filename.
       */
      filename: string;
      /** Format: int32 */
      height?: number;
      /** Format: int64 */
      id: number;
      keyReferences: components["schemas"]["KeyInScreenshotModel"][];
      location?: string;
      middleSized?: string;
      middleSizedUrl?: string;
      /**
       * @description Thumbnail file name, which may be downloaded from the screenshot path.
       *
       * When images are secured. Encrypted timestamp is appended to the filename.
       */
      thumbnail: string;
      thumbnailUrl: string;
      /** Format: int32 */
      width?: number;
    };
    SelectAllResponse: {
      ids: number[];
    };
    SelfHostedEePlanModel: {
      enabledFeatures: (
        | "GRANULAR_PERMISSIONS"
        | "PRIORITIZED_FEATURE_REQUESTS"
        | "PREMIUM_SUPPORT"
        | "DEDICATED_SLACK_CHANNEL"
        | "ASSISTED_UPDATES"
        | "DEPLOYMENT_ASSISTANCE"
        | "BACKUP_CONFIGURATION"
        | "TEAM_TRAINING"
        | "ACCOUNT_MANAGER"
        | "STANDARD_SUPPORT"
        | "PROJECT_LEVEL_CONTENT_STORAGES"
        | "WEBHOOKS"
        | "MULTIPLE_CONTENT_DELIVERY_CONFIGS"
        | "AI_PROMPT_CUSTOMIZATION"
        | "SLACK_INTEGRATION"
        | "TASKS"
        | "SSO"
        | "ORDER_TRANSLATION"
      )[];
      free: boolean;
      hasYearlyPrice: boolean;
      /** Format: int64 */
      id: number;
      includedUsage: components["schemas"]["PlanIncludedUsageModel"];
      name: string;
      nonCommercial: boolean;
      prices: components["schemas"]["PlanPricesModel"];
      public: boolean;
    };
    SetDisabledLanguagesRequest: {
      languageIds: number[];
    };
    SetFileNamespaceRequest: {
      namespace?: string;
    };
    SetKeysNamespaceRequest: {
      keyIds: number[];
      namespace?: string;
    };
    SetLanguagePromptCustomizationRequest: {
      /**
       * @description The language description used in the  prompt that helps AI translator to fine tune results for specific language
       * @example For arabic language, we are super formal. Always use these translations:
       * Paper -> ورقة
       * Office -> مكتب
       */
      description?: string;
    };
    SetLicenseKeyDto: {
      licenseKey: string;
    };
    SetMachineTranslationSettingsDto: {
      settings: components["schemas"]["MachineTranslationLanguagePropsDto"][];
    };
    SetOrganizationRoleDto: {
      roleType: "MEMBER" | "OWNER";
    };
    SetProjectPromptCustomizationRequest: {
      /**
       * @description The project description used in the  prompt that helps AI translator to understand the context of your project.
       * @example We are Dunder Mifflin, a paper company. We sell paper. This is an project of translations for out paper selling app.
       */
      description?: string;
    };
    SetTranslationsResponseModel: {
      /**
       * Format: int64
       * @description Id of key record
       */
      keyId: number;
      keyIsPlural: boolean;
      /**
       * @description Name of key
       * @example this_is_super_key
       */
      keyName: string;
      /**
       * @description The namespace of the key
       * @example homepage
       */
      keyNamespace?: string;
      /**
       * @description Translations object containing values updated in this request
       * @example [object Object]
       */
      translations: {
        [key: string]: components["schemas"]["TranslationModel"];
      };
    };
    SetTranslationsStateStateRequest: {
      keyIds: number[];
      languageIds: number[];
      state: "UNTRANSLATED" | "TRANSLATED" | "REVIEWED" | "DISABLED";
    };
    SetTranslationsWithKeyDto: {
      /**
       * @description Key name to set translations for
       * @example what_a_key_to_translate
       */
      key: string;
      /**
       * @description List of languages to return translations for.
       *
       * If not provided, only modified translation will be provided.
       *
       * @example en,de,fr
       */
      languagesToReturn?: string[];
      /** @description The namespace of the key. (When empty or null default namespace will be used) */
      namespace?: string;
      /**
       * @description Object mapping language tag to translation
       * @example [object Object]
       */
      translations: { [key: string]: string };
    };
    SignUpDto: {
      callbackUrl?: string;
      email: string;
      invitationCode?: string;
      name: string;
      organizationName?: string;
      password: string;
      recaptchaToken?: string;
      /** @description Where did the user find us? */
      userSource?: string;
    };
    SimpleOrganizationModel: {
      avatar?: components["schemas"]["Avatar"];
      basePermissions: components["schemas"]["PermissionModel"];
      /** @example This is a beautiful organization full of beautiful and clever people */
      description?: string;
      /** Format: int64 */
      id: number;
      /** @example Beautiful organization */
      name: string;
      /** @example btforg */
      slug: string;
    };
    SimpleProjectModel: {
      avatar?: components["schemas"]["Avatar"];
      baseLanguage?: components["schemas"]["LanguageModel"];
      description?: string;
      icuPlaceholders: boolean;
      /** Format: int64 */
      id: number;
      name: string;
      slug?: string;
    };
    SimpleUserAccountModel: {
      avatar?: components["schemas"]["Avatar"];
      deleted: boolean;
      /** Format: int64 */
      id: number;
      name?: string;
      username: string;
    };
    SingleStepImportRequest: {
      /** @description If true, placeholders from other formats will be converted to ICU when possible */
      convertPlaceholdersToIcu: boolean;
      /** @description If false, only updates keys, skipping the creation of new keys */
      createNewKeys: boolean;
      /** @description Definition of mapping for each file to import. */
      fileMappings: components["schemas"]["ImportFileMapping"][];
      /**
       * @description Whether to override existing translation data.
       *
       * When set to `KEEP`, existing translations will be kept.
       *
       * When set to `OVERRIDE`, existing translations will be overwrote.
       *
       * When set to `NO_FORCE`, error will be thrown on conflict.
       */
      forceMode: "OVERRIDE" | "KEEP" | "NO_FORCE";
      /**
       * @description Maps the languages from imported files to languages existing in the Tolgee platform.
       *
       * Use this field only when your files contain multiple languages (e.g., XLIFF files).
       *
       * Otherwise, use the `languageTag` property of `fileMappings`.
       *
       * Example: In xliff files, there are `source-language` and `target-language` attributes defined on `file` element. Using this field you can map source and target values to languages stored in the Tolgee Platform.
       */
      languageMappings?: components["schemas"]["LanguageMapping"][];
      /** @description If true, key descriptions will be overridden by the import */
      overrideKeyDescriptions: boolean;
      /** @description If yes, keys from project that were not included in import will be deleted. */
      removeOtherKeys?: boolean;
      /**
       * @description When importing files in structured formats (e.g., JSON, YAML), this field defines the delimiter which will be used in names of imported keys.
       * @example .
       */
      structureDelimiter?: string;
      /** @description Keys created by this import will be tagged with these tags. It add tags only to new keys. The keys that already exist will not be tagged. */
      tagNewKeys: string[];
    };
    SlackCommandDto: {
      channel_id: string;
      channel_name: string;
      command: string;
      team_domain: string;
      team_id: string;
      text: string;
      token?: string;
      trigger_id?: string;
      user_id: string;
      user_name: string;
    };
    SlackDTO: {
      connected: boolean;
      enabled: boolean;
    };
    SlackUserInfoModel: {
      slackAvatar: string;
      slackId: string;
      slackName?: string;
      slackRealName?: string;
      teamName: string;
    };
    SsoGlobalPublicConfigDTO: {
      clientId?: string;
      customLoginText?: string;
      customLogoUrl?: string;
      domain?: string;
      enabled: boolean;
    };
    SsoOrganizationsPublicConfigDTO: {
      enabled: boolean;
    };
    SsoTenantModel: {
      authorizationUri: string;
      clientId: string;
      clientSecret: string;
      domain: string;
      enabled: boolean;
      force: boolean;
      global: boolean;
      tokenUri: string;
    };
    SsoUrlResponse: {
      redirectUrl: string;
    };
    StorageTestResult: {
      message?:
        | "unauthenticated"
        | "api_access_forbidden"
        | "api_key_not_found"
        | "invalid_api_key"
        | "invalid_project_api_key"
        | "project_api_key_expired"
        | "bad_credentials"
        | "mfa_enabled"
        | "invalid_otp_code"
        | "mfa_not_enabled"
        | "can_not_revoke_own_permissions"
        | "data_corrupted"
        | "invitation_code_does_not_exist_or_expired"
        | "language_tag_exists"
        | "language_name_exists"
        | "language_not_found"
        | "operation_not_permitted"
        | "registrations_not_allowed"
        | "project_not_found"
        | "resource_not_found"
        | "scope_not_found"
        | "key_exists"
        | "third_party_auth_error_message"
        | "third_party_auth_no_email"
        | "third_party_auth_non_matching_email"
        | "third_party_auth_no_sub"
        | "third_party_auth_unknown_error"
        | "email_already_verified"
        | "third_party_unauthorized"
        | "third_party_google_workspace_mismatch"
        | "third_party_switch_initiated"
        | "username_already_exists"
        | "username_or_password_invalid"
        | "user_already_has_permissions"
        | "user_already_has_role"
        | "user_not_found"
        | "file_not_image"
        | "file_too_big"
        | "invalid_timestamp"
        | "email_not_verified"
        | "missing_callback_url"
        | "invalid_jwt_token"
        | "expired_jwt_token"
        | "general_jwt_error"
        | "cannot_find_suitable_address_part"
        | "slug_not_unique"
        | "user_is_not_member_of_organization"
        | "organization_has_no_other_owner"
        | "user_has_no_project_access"
        | "user_is_organization_owner"
        | "cannot_set_your_own_permissions"
        | "user_is_organization_member"
        | "property_not_mutable"
        | "import_language_not_from_project"
        | "existing_language_not_selected"
        | "conflict_is_not_resolved"
        | "language_already_selected"
        | "cannot_parse_file"
        | "could_not_resolve_property"
        | "cannot_add_more_then_100_languages"
        | "no_languages_provided"
        | "language_with_base_language_tag_not_found"
        | "language_not_from_project"
        | "namespace_not_from_project"
        | "cannot_delete_base_language"
        | "key_not_from_project"
        | "max_screenshots_exceeded"
        | "translation_not_from_project"
        | "can_edit_only_own_comment"
        | "request_parse_error"
        | "filter_by_value_state_not_valid"
        | "import_has_expired"
        | "tag_not_from_project"
        | "translation_text_too_long"
        | "invalid_recaptcha_token"
        | "cannot_leave_owning_project"
        | "cannot_leave_project_with_organization_role"
        | "dont_have_direct_permissions"
        | "tag_too_log"
        | "too_many_uploaded_images"
        | "one_or_more_images_not_found"
        | "screenshot_not_of_key"
        | "service_not_found"
        | "too_many_requests"
        | "translation_not_found"
        | "out_of_credits"
        | "key_not_found"
        | "organization_not_found"
        | "cannot_find_base_language"
        | "base_language_not_found"
        | "no_exported_result"
        | "cannot_set_your_own_role"
        | "only_translate_review_or_view_permission_accepts_view_languages"
        | "oauth2_token_url_not_set"
        | "oauth2_user_url_not_set"
        | "email_already_invited_or_member"
        | "price_not_found"
        | "invoice_not_from_organization"
        | "invoice_not_found"
        | "plan_not_found"
        | "plan_not_available_any_more"
        | "no_auto_translation_method"
        | "cannot_translate_base_language"
        | "pat_not_found"
        | "invalid_pat"
        | "pat_expired"
        | "operation_unavailable_for_account_type"
        | "validation_email_is_not_valid"
        | "current_password_required"
        | "cannot_create_organization"
        | "wrong_current_password"
        | "wrong_param_type"
        | "expired_super_jwt_token"
        | "cannot_delete_your_own_account"
        | "cannot_sort_by_this_column"
        | "namespace_not_found"
        | "namespace_exists"
        | "invalid_authentication_method"
        | "unknown_sort_property"
        | "only_review_permission_accepts_state_change_languages"
        | "only_translate_or_review_permission_accepts_translate_languages"
        | "cannot_set_language_permissions_for_admin_scope"
        | "cannot_set_view_languages_without_translations_view_scope"
        | "cannot_set_translate_languages_without_translations_edit_scope"
        | "cannot_set_state_change_languages_without_translations_state_edit_scope"
        | "language_not_permitted"
        | "scopes_has_to_be_set"
        | "set_exactly_one_of_scopes_or_type"
        | "translation_exists"
        | "import_keys_error"
        | "provide_only_one_of_screenshots_and_screenshot_uploaded_image_ids"
        | "multiple_projects_not_supported"
        | "plan_translation_limit_exceeded"
        | "feature_not_enabled"
        | "license_key_not_found"
        | "cannot_set_view_languages_without_for_level_based_permissions"
        | "cannot_set_different_translate_and_state_change_languages_for_level_based_permissions"
        | "cannot_disable_your_own_account"
        | "subscription_not_found"
        | "invoice_does_not_have_usage"
        | "customer_not_found"
        | "subscription_not_active"
        | "organization_already_subscribed"
        | "organization_not_subscribed"
        | "license_key_used_by_another_instance"
        | "translation_spending_limit_exceeded"
        | "credit_spending_limit_exceeded"
        | "seats_spending_limit_exceeded"
        | "this_instance_is_already_licensed"
        | "big_meta_not_from_project"
        | "mt_service_not_enabled"
        | "project_not_selected"
        | "organization_not_selected"
        | "plan_has_subscribers"
        | "translation_failed"
        | "batch_job_not_found"
        | "key_exists_in_namespace"
        | "tag_is_blank"
        | "execution_failed_on_management_error"
        | "translation_api_rate_limit"
        | "cannot_finalize_activity"
        | "formality_not_supported_by_service"
        | "language_not_supported_by_service"
        | "rate_limited"
        | "pat_access_not_allowed"
        | "pak_access_not_allowed"
        | "cannot_modify_disabled_translation"
        | "azure_config_required"
        | "s3_config_required"
        | "content_storage_config_required"
        | "content_storage_test_failed"
        | "content_storage_config_invalid"
        | "invalid_connection_string"
        | "cannot_create_azure_storage_client"
        | "s3_access_key_required"
        | "azure_connection_string_required"
        | "s3_secret_key_required"
        | "cannot_store_file_to_content_storage"
        | "unexpected_error_while_publishing_to_content_storage"
        | "webhook_responded_with_non_200_status"
        | "unexpected_error_while_executing_webhook"
        | "content_storage_is_in_use"
        | "cannot_set_state_for_missing_translation"
        | "no_project_id_provided"
        | "license_key_not_provided"
        | "subscription_already_canceled"
        | "user_is_subscribed_to_paid_plan"
        | "cannot_create_free_plan_without_fixed_type"
        | "cannot_modify_plan_free_status"
        | "key_id_not_provided"
        | "free_self_hosted_seat_limit_exceeded"
        | "advanced_params_not_supported"
        | "plural_forms_not_found_for_language"
        | "nested_plurals_not_supported"
        | "message_is_not_plural"
        | "content_outside_plural_forms"
        | "invalid_plural_form"
        | "multiple_plurals_not_supported"
        | "custom_values_json_too_long"
        | "unsupported_po_message_format"
        | "plural_forms_data_loss"
        | "current_user_does_not_own_image"
        | "user_cannot_view_this_organization"
        | "user_is_not_owner_of_organization"
        | "pak_created_for_different_project"
        | "custom_slug_is_only_applicable_for_custom_storage"
        | "invalid_slug_format"
        | "batch_job_cancellation_timeout"
        | "import_failed"
        | "cannot_add_more_then_1000_languages"
        | "no_data_to_import"
        | "multiple_namespaces_mapped_to_single_file"
        | "multiple_mappings_for_same_file_language_name"
        | "multiple_mappings_for_null_file_language_name"
        | "too_many_mappings_for_file"
        | "missing_placeholder_in_template"
        | "tag_not_found"
        | "cannot_parse_encrypted_slack_login_data"
        | "slack_workspace_not_found"
        | "cannot_fetch_user_details_from_slack"
        | "slack_missing_scope"
        | "slack_not_connected_to_your_account"
        | "slack_invalid_command"
        | "slack_not_subscribed_yet"
        | "slack_connection_failed"
        | "tolgee_account_already_connected"
        | "slack_not_configured"
        | "slack_workspace_already_connected"
        | "slack_connection_error"
        | "email_verification_code_not_valid"
        | "cannot_subscribe_to_free_plan"
        | "plan_auto_assignment_only_for_free_plans"
        | "plan_auto_assignment_only_for_private_plans"
        | "task_not_found"
        | "task_not_finished"
        | "task_not_open"
        | "translation_agency_not_found"
        | "this_feature_is_not_implemented_in_oss"
        | "sso_token_exchange_failed"
        | "sso_user_info_retrieval_failed"
        | "sso_id_token_expired"
        | "sso_user_cannot_create_organization"
        | "sso_cant_verify_user"
        | "sso_auth_missing_domain"
        | "sso_domain_not_found_or_disabled"
        | "native_authentication_disabled"
        | "invitation_organization_mismatch"
        | "user_is_managed_by_organization"
        | "cannot_set_sso_provider_missing_fields"
        | "namespaces_cannot_be_disabled_when_namespace_exists"
        | "namespace_cannot_be_used_when_feature_is_disabled"
        | "sso_domain_not_allowed"
        | "sso_login_forced_for_this_account"
        | "date_has_to_be_in_the_future"
        | "custom_plan_and_plan_id_cannot_be_set_together"
        | "specify_plan_id_or_custom_plan"
        | "custom_plans_has_to_be_private"
        | "cannot_create_free_plan_with_prices"
        | "subscription_not_scheduled_for_cancellation"
        | "cannot_cancel_trial"
        | "cannot_update_without_modification"
        | "current_subscription_is_not_trialing";
      params?: { [key: string]: unknown }[];
      success: boolean;
    };
    StreamingResponseBody: { [key: string]: unknown };
    SuggestRequestDto: {
      /** @description Text value of base translation. Useful, when base translation is not stored yet. */
      baseText?: string;
      /** @description Whether base text is plural. This value is ignored if baseText is null. */
      isPlural?: boolean;
      /**
       * Format: int64
       * @description Key Id to get results for. Use when key is stored already.
       */
      keyId?: number;
      plural?: boolean;
      /** @description List of services to use. If null, then all enabled services are used. */
      services?: ("GOOGLE" | "AWS" | "DEEPL" | "AZURE" | "BAIDU" | "TOLGEE")[];
      /** Format: int64 */
      targetLanguageId: number;
    };
    SuggestResultModel: {
      /** @description If true, the base translation was empty and no translation was provided. */
      baseBlank: boolean;
      /**
       * @deprecated
       * @description String translations provided by enabled services. (deprecated, use `result` instead)
       * @example
       *     {
       *       "GOOGLE": "This was translated by Google",
       *       "TOLGEE": "This was translated by Tolgee Translator",
       *     }
       */
      machineTranslations?: { [key: string]: string };
      /**
       * @description Results provided by enabled services.
       * @example [object Object]
       */
      result?: { [key: string]: components["schemas"]["TranslationItemModel"] };
    };
    SumUsageItemModel: {
      total: number;
      /** Format: int64 */
      unusedQuantity: number;
      /** Format: int64 */
      usedQuantity: number;
      /** Format: int64 */
      usedQuantityOverPlan: number;
    };
    SuperTokenRequest: {
      /** @description Has to be provided when TOTP enabled */
      otp?: string;
      /** @description Has to be provided when TOTP not enabled */
      password?: string;
    };
    TagKeyDto: {
      name: string;
    };
    TagKeysRequest: {
      keyIds: number[];
      tags: string[];
    };
    /** @description Tags of key */
    TagModel: {
      /** Format: int64 */
      id: number;
      name: string;
    };
    TaskKeysResponse: {
      keys: number[];
    };
    TaskModel: {
      agency?: components["schemas"]["TranslationAgencySimpleModel"];
      assignees: components["schemas"]["SimpleUserAccountModel"][];
      author?: components["schemas"]["SimpleUserAccountModel"];
      /** Format: int64 */
      baseCharacterCount: number;
      /** Format: int64 */
      baseWordCount: number;
      /** Format: int64 */
      closedAt?: number;
      /** Format: int64 */
      createdAt?: number;
      description: string;
      /** Format: int64 */
      doneItems: number;
      /** Format: int64 */
      dueDate?: number;
      language: components["schemas"]["LanguageModel"];
      name: string;
      /** Format: int64 */
      number: number;
      state: "NEW" | "IN_PROGRESS" | "DONE" | "CLOSED";
      /** Format: int64 */
      totalItems: number;
      type: "TRANSLATE" | "REVIEW";
    };
    TaskPerUserReportModel: {
      /** Format: int64 */
      baseCharacterCount: number;
      /** Format: int64 */
      baseWordCount: number;
      /** Format: int64 */
      doneItems: number;
      user: components["schemas"]["SimpleUserAccountModel"];
    };
    TaskWithProjectModel: {
      agency?: components["schemas"]["TranslationAgencySimpleModel"];
      assignees: components["schemas"]["SimpleUserAccountModel"][];
      author?: components["schemas"]["SimpleUserAccountModel"];
      /** Format: int64 */
      baseCharacterCount: number;
      /** Format: int64 */
      baseWordCount: number;
      /** Format: int64 */
      closedAt?: number;
      /** Format: int64 */
      createdAt?: number;
      description: string;
      /** Format: int64 */
      doneItems: number;
      /** Format: int64 */
      dueDate?: number;
      language: components["schemas"]["LanguageModel"];
      name: string;
      /** Format: int64 */
      number: number;
      project: components["schemas"]["SimpleProjectModel"];
      state: "NEW" | "IN_PROGRESS" | "DONE" | "CLOSED";
      /** Format: int64 */
      totalItems: number;
      type: "TRANSLATE" | "REVIEW";
    };
    TextNode: { [key: string]: unknown };
    TranslationAgencySimpleModel: {
      avatar?: components["schemas"]["Avatar"];
      /** Format: int64 */
      id: number;
      name: string;
      url?: string;
    };
    TranslationCommentDto: {
      state: "RESOLUTION_NOT_NEEDED" | "NEEDS_RESOLUTION" | "RESOLVED";
      text: string;
    };
    TranslationCommentModel: {
      author: components["schemas"]["SimpleUserAccountModel"];
      /**
       * Format: date-time
       * @description Date when it was created
       */
      createdAt: string;
      /**
       * Format: int64
       * @description Id of translation comment record
       */
      id: number;
      /** @description State of translation */
      state: "RESOLUTION_NOT_NEEDED" | "NEEDS_RESOLUTION" | "RESOLVED";
      /** @description Text of comment */
      text: string;
      /**
       * Format: date-time
       * @description Date when it was updated
       */
      updatedAt: string;
    };
    TranslationCommentWithLangKeyDto: {
      /** Format: int64 */
      keyId: number;
      /** Format: int64 */
      languageId: number;
      state: "RESOLUTION_NOT_NEEDED" | "NEEDS_RESOLUTION" | "RESOLVED";
      text: string;
    };
    TranslationHistoryModel: {
      author?: components["schemas"]["SimpleUserAccountModel"];
      /** @description Modified fields */
      modifications?: {
        [key: string]: components["schemas"]["PropertyModification"];
      };
      revisionType: "ADD" | "MOD" | "DEL";
      /**
       * Format: int64
       * @description Unix timestamp of the revision
       */
      timestamp: number;
    };
    /**
     * @description Results provided by enabled services.
     * @example [object Object]
     */
    TranslationItemModel: {
      contextDescription?: string;
      output: string;
    };
    TranslationMemoryItemModel: {
      baseText: string;
      keyName: string;
      /** Format: float */
      similarity: number;
      targetText: string;
    };
    /**
     * @description Translations object containing values updated in this request
     * @example [object Object]
     */
    TranslationModel: {
      /** @description Was translated using Translation Memory or Machine translation service? */
      auto: boolean;
      /**
       * Format: int64
       * @description Id of translation record
       */
      id: number;
      /** @description Which machine translation service was used to auto translate this */
      mtProvider?: "GOOGLE" | "AWS" | "DEEPL" | "AZURE" | "BAIDU" | "TOLGEE";
      /** @description Whether base language translation was changed after this translation was updated */
      outdated: boolean;
      /** @description State of translation */
      state: "UNTRANSLATED" | "TRANSLATED" | "REVIEWED" | "DISABLED";
      /** @description Translation text */
      text?: string;
    };
    /**
     * @description Translations object
     * @example
     *     {
     *       "en": {
     *         "id": 100000003,
     *         "text": "This is super translation!"
     *         "state": "TRANSLATED",
     *         "commentCount": 1
     *       }
     *     }
     */
    TranslationViewModel: {
      /** @description Was translated using Translation Memory or Machine translation service? */
      auto: boolean;
      /**
       * Format: int64
       * @description Count of translation comments
       */
      commentCount: number;
      /** @description Was translation memory used to translate this? */
      fromTranslationMemory: boolean;
      /**
       * Format: int64
       * @description Id of translation record
       */
      id: number;
      /** @description Which machine translation service was used to auto translate this */
      mtProvider?: "GOOGLE" | "AWS" | "DEEPL" | "AZURE" | "BAIDU" | "TOLGEE";
      /** @description Whether base language translation was changed after this translation was updated */
      outdated: boolean;
      /** @description State of translation */
      state: "UNTRANSLATED" | "TRANSLATED" | "REVIEWED" | "DISABLED";
      /** @description Translation text */
      text?: string;
      /**
       * Format: int64
       * @description Count of unresolved translation comments
       */
      unresolvedCommentCount: number;
    };
    TranslationWithCommentModel: {
      comment: components["schemas"]["TranslationCommentModel"];
      translation: components["schemas"]["TranslationModel"];
    };
    UntagKeysRequest: {
      keyIds: number[];
      tags: string[];
    };
    UpdateNamespaceDto: {
      name: string;
    };
    UpdatePatDto: {
      /** @description New description of the PAT */
      description: string;
    };
    UpdateTaskKeyRequest: {
      done: boolean;
    };
    UpdateTaskKeyResponse: {
      /** @description Task key is marked as done */
      done: boolean;
      /** @description Task progress is 100% */
      taskFinished: boolean;
    };
    UpdateTaskKeysRequest: {
      /** @description Keys to add to task */
      addKeys?: number[];
      /** @description Keys to remove from task */
      removeKeys?: number[];
    };
    UpdateTaskRequest: {
      assignees: number[];
      description: string;
      /**
       * Format: int64
       * @description Due to date in epoch format (milliseconds).
       * @example 1661172869000
       */
      dueDate?: number;
      name: string;
    };
    UploadedImageModel: {
      /** Format: date-time */
      createdAt: string;
      fileUrl: string;
      filename: string;
      /** Format: int64 */
      id: number;
      location?: string;
      requestFilename: string;
    };
    UsageModel: {
      /** @description Relevant for invoices only. When there are applied stripe credits, we need to reduce the total price by this amount. */
      appliedStripeCredits?: number;
      credits?: components["schemas"]["SumUsageItemModel"];
      seats: components["schemas"]["AverageProportionalUsageItemModel"];
      subscriptionPrice?: number;
      total: number;
      translations: components["schemas"]["AverageProportionalUsageItemModel"];
    };
    UsedNamespaceModel: {
      /**
       * Format: int64
       * @description The id of namespace. Null for default namespace.
       * @example 10000048
       */
      id?: number;
      /**
       * @description Name of namespace. Null if default.
       * @example homepage
       */
      name?: string;
    };
    UserAccountInProjectModel: {
      avatar?: components["schemas"]["Avatar"];
      computedPermission: components["schemas"]["ComputedPermissionModel"];
      directPermission?: components["schemas"]["PermissionWithAgencyModel"];
      /** Format: int64 */
      id: number;
      name?: string;
      organizationBasePermission: components["schemas"]["PermissionModel"];
      organizationRole?: "MEMBER" | "OWNER";
      username: string;
    };
    UserAccountModel: {
      avatar?: components["schemas"]["Avatar"];
      deleted: boolean;
      disabled: boolean;
      emailAwaitingVerification?: string;
      globalServerRole: "USER" | "ADMIN";
      /** Format: int64 */
      id: number;
      name?: string;
      username: string;
    };
    UserAccountWithOrganizationRoleModel: {
      avatar?: components["schemas"]["Avatar"];
      /** Format: int64 */
      id: number;
      name: string;
      organizationRole?: "MEMBER" | "OWNER";
      projectsWithDirectPermission: components["schemas"]["SimpleProjectModel"][];
      username: string;
    };
    UserMfaRecoveryRequestDto: {
      password: string;
    };
    UserPreferencesModel: {
      language?: string;
      /** Format: int64 */
      preferredOrganizationId?: number;
    };
    UserTotpDisableRequestDto: {
      password: string;
    };
    UserTotpEnableRequestDto: {
      otp: string;
      password: string;
      totpKey: string;
    };
    UserUpdatePasswordRequestDto: {
      currentPassword: string;
      password: string;
    };
    UserUpdateRequestDto: {
      /** @description Callback url for link sent in e-mail. This may be omitted, when server has set frontEndUrl in properties. */
      callbackUrl?: string;
      currentPassword?: string;
      email: string;
      name: string;
    };
    V2EditApiKeyDto: {
      description?: string;
      scopes: string[];
    };
    WebhookConfigModel: {
      /**
       * Format: int64
       * @description Date of the first failed webhook request. If the last webhook request is successful, this value is set to null.
       */
      firstFailed?: number;
      /** Format: int64 */
      id: number;
      /**
       * Format: int64
       * @description Date of the last webhook request.
       */
      lastExecuted?: number;
      url: string;
      webhookSecret: string;
    };
    WebhookConfigRequest: {
      url: string;
    };
    WebhookTestResponse: {
      success: boolean;
    };
    WorkspaceModel: {
      /** Format: int64 */
      id: number;
      slackTeamId: string;
      slackTeamName: string;
    };
  };
}

export interface operations {
  /** Exports data as ZIP of jsons */
  doExportJsonZip: {
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/zip": components["schemas"]["StreamingResponseBody"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  getAuthenticationUrl: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["SsoUrlResponse"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DomainRequest"];
      };
    };
  };
  /** Authenticates user using third party oAuth service */
  authenticateUser_1: {
    parameters: {
      path: {
        serviceType: string;
      };
      query: {
        code?: string;
        redirect_uri?: string;
        invitationCode?: string;
        domain?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["JwtAuthenticationResponse"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  getPublicConfiguration: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["PublicConfigurationDTO"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  authenticateUser: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["JwtAuthenticationResponse"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["LoginRequest"];
      };
    };
  };
  invitationInfo: {
    parameters: {
      path: {
        code: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["PublicInvitationModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  resetPasswordRequest: {
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ResetPasswordRequest"];
      };
    };
  };
  /** Checks the password reset code from e-mail */
  resetPasswordSet: {
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ResetPassword"];
      };
    };
  };
  resetPasswordValidate: {
    parameters: {
      path: {
        code: string;
        email: string;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  /** When E-mail verification is enabled, null is returned. Otherwise JWT token is provided. */
  signUp: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["JwtAuthenticationResponse"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SignUpDto"];
      };
    };
  };
  validateEmail: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": boolean;
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TextNode"];
      };
    };
  };
  /** It checks whether the code from email is valid */
  verifyEmail: {
    parameters: {
      path: {
        userId: number;
        code: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["JwtAuthenticationResponse"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  getOrganizations: {
    parameters: {
      query: {
        /** Zero-based page index (0..N) */
        page?: number;
        /** The size of the page to be returned */
        size?: number;
        /** Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        sort?: string[];
        search?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["PagedModelOrganizationModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  getUsers: {
    parameters: {
      query: {
        /** Zero-based page index (0..N) */
        page?: number;
        /** The size of the page to be returned */
        size?: number;
        /** Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        sort?: string[];
        search?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["PagedModelUserAccountModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  deleteUser: {
    parameters: {
      path: {
        userId: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  /** Disables user account. User will not be able to log in, but their user data will be preserved, so you can enable the user later using the `enable` endpoint. */
  disableUser: {
    parameters: {
      path: {
        userId: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  /** Enables previously disabled user. */
  enableUser: {
    parameters: {
      path: {
        userId: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  /** Generates a JWT token for the user with provided ID. This is useful, when need to debug of the user's account. Or when an operation is required to be executed on behalf of the user. */
  generateUserToken: {
    parameters: {
      path: {
        userId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": string;
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  /** Set's the global role on the Tolgee Platform server. */
  setRole: {
    parameters: {
      path: {
        userId: number;
        role: "USER" | "ADMIN";
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  /** Returns the latest announcement for the currently authenticated user */
  getLatest: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["AnnouncementDto"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  /** Dismisses the latest announcement for the currently authenticated user */
  dismiss: {
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  allByUser: {
    parameters: {
      query: {
        pageable: components["schemas"]["Pageable"];
        filterProjectId?: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["PagedModelApiKeyModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  /** Creates new API key with provided scopes */
  create_13: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["RevealedApiKeyModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateApiKeyDto"];
      };
    };
  };
  getScopes: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": string;
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  /** Returns info the API key which user currently authenticated with. Otherwise responds with 400 status code. */
  getCurrent_1: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["ApiKeyWithLanguagesModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  update_9: {
    parameters: {
      path: {
        apiKeyId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["ApiKeyModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["V2EditApiKeyDto"];
      };
    };
  };
  delete_13: {
    parameters: {
      path: {
        apiKeyId: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  regenerate_1: {
    parameters: {
      path: {
        apiKeyId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["RevealedApiKeyModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["RegenerateApiKeyDto"];
      };
    };
  };
  /** Returns specific API key info */
  get_21: {
    parameters: {
      path: {
        keyId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["ApiKeyModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  getChangedAuthProvider: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["AuthProviderDto"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  acceptChangeAuthProvider: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["JwtAuthenticationResponse"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  rejectChangeAuthProvider: {
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  getCurrentAuthProvider: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["AuthProviderDto"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  getInfo_5: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["EeSubscriptionModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  /** Get info about the upcoming EE subscription. This will show, how much the subscription will cost when key is applied. */
  prepareSetLicenseKey: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["PrepareSetEeLicenceKeyModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SetLicenseKeyDto"];
      };
    };
  };
  /** This will refresh the subscription information from the license server and update the subscription info. */
  refreshSubscription: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["EeSubscriptionModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  /** This will remove the licence key from the instance. */
  release: {
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  setLicenseKey: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["EeSubscriptionModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SetLicenseKeyDto"];
      };
    };
  };
  upload: {
    responses: {
      /** Created */
      201: {
        content: {
          "*/*": components["schemas"]["UploadedImageModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
    requestBody: {
      content: {
        "multipart/form-data": {
          /** Format: binary */
          image: string;
          info?: components["schemas"]["ImageUploadInfoDto"];
        };
      };
    };
  };
  delete_12: {
    parameters: {
      path: {
        ids: number[];
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  acceptInvitation: {
    parameters: {
      path: {
        code: string;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  deleteInvitation: {
    parameters: {
      path: {
        invitationId: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  /** Returns all organizations, which is current user allowed to view */
  getAll_10: {
    parameters: {
      query: {
        /** Zero-based page index (0..N) */
        page?: number;
        /** The size of the page to be returned */
        size?: number;
        /** Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        sort?: string[];
        filterCurrentUserOwner?: boolean;
        search?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["PagedModelOrganizationModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  create_12: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["OrganizationModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["OrganizationDto"];
      };
    };
  };
  get_20: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["OrganizationModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  update_8: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["OrganizationModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["OrganizationDto"];
      };
    };
  };
  /** Deletes organization and all its data including projects */
  delete_11: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  uploadAvatar_2: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["OrganizationModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
    requestBody: {
      content: {
        "multipart/form-data": {
          /** Format: binary */
          avatar: string;
        };
      };
    };
  };
  removeAvatar_2: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["OrganizationModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  /** Generates invitation link for organization, so users can join organization. The invitation can also be sent to an e-mail address. */
  inviteUser_1: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["OrganizationInvitationModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["OrganizationInviteUserDto"];
      };
    };
  };
  /** Remove current user from organization */
  leaveOrganization: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  /** Returns all organization projects the user has access to */
  getAllProjects_1: {
    parameters: {
      path: {
        id: number;
      };
      query: {
        /** Zero-based page index (0..N) */
        page?: number;
        /** The size of the page to be returned */
        size?: number;
        /** Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        sort?: string[];
        search?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["PagedModelProjectModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  /** Returns all users in organization. The result also contains users who are only members of projects in the organization. */
  getAllUsers_1: {
    parameters: {
      path: {
        id: number;
      };
      query: {
        /** Zero-based page index (0..N) */
        page?: number;
        /** The size of the page to be returned */
        size?: number;
        /** Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        sort?: string[];
        search?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["PagedModelUserAccountWithOrganizationRoleModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  getInvitations: {
    parameters: {
      path: {
        organizationId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["CollectionModelOrganizationInvitationModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  /** Returns machine translation credit balance for organization */
  getOrganizationCredits: {
    parameters: {
      path: {
        organizationId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["CreditBalanceModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  /** Returns all projects (including statistics) where current user has any permission (except none) */
  getAllWithStatistics_2: {
    parameters: {
      query: {
        /** Zero-based page index (0..N) */
        page?: number;
        /** The size of the page to be returned */
        size?: number;
        /** Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        sort?: string[];
        search?: string;
      };
      path: {
        organizationId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["PagedModelProjectWithStatsModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  /** Set default granular (scope-based) permissions for organization users, who don't have direct project permissions set. */
  setBasePermissions: {
    parameters: {
      path: {
        organizationId: number;
      };
      query: {
        /** Granted scopes to all projects for all organization users without direct project permissions set. */
        scopes: string[];
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  /** Sets default (level-based) permission for organization */
  setBasePermissions_1: {
    parameters: {
      path: {
        organizationId: number;
        permissionType:
          | "NONE"
          | "VIEW"
          | "TRANSLATE"
          | "REVIEW"
          | "EDIT"
          | "MANAGE";
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  /**
   * This endpoint allows the owner of an organization to connect a Slack workspace to their organization.
   * Checks if the Slack integration feature is enabled for the organization and proceeds with the connection.
   */
  connectWorkspace: {
    parameters: {
      path: {
        organizationId: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ConnectToSlackDto"];
      };
    };
  };
  /** Returns URL to which user should be redirected to connect Slack workspace */
  connectToSlack: {
    parameters: {
      path: {
        organizationId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["ConnectToSlackUrlModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  /** Returns a list of workspaces connected to the organization */
  getConnectedWorkspaces: {
    parameters: {
      path: {
        organizationId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["CollectionModelWorkspaceModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  /** Disconnects a workspace from the organization */
  disconnectWorkspace: {
    parameters: {
      path: {
        workspaceId: number;
        organizationId: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  findProvider: {
    parameters: {
      path: {
        organizationId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["SsoTenantModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  setProvider: {
    parameters: {
      path: {
        organizationId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["SsoTenantModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateProviderRequest"];
      };
    };
  };
  getUsage: {
    parameters: {
      path: {
        organizationId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["PublicUsageModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  removeUser: {
    parameters: {
      path: {
        organizationId: number;
        userId: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  /** Sets user role in organization. Owner or Member. */
  setUserRole: {
    parameters: {
      path: {
        organizationId: number;
        userId: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SetOrganizationRoleDto"];
      };
    };
  };
  get_19: {
    parameters: {
      path: {
        slug: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["OrganizationModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  /** Returns all organization projects the user has access to */
  getAllProjects: {
    parameters: {
      path: {
        slug: string;
      };
      query: {
        /** Zero-based page index (0..N) */
        page?: number;
        /** The size of the page to be returned */
        size?: number;
        /** Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        sort?: string[];
        search?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["PagedModelProjectModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  /** Returns all projects (including statistics) where current user has any permission (except none) */
  getAllWithStatistics_1: {
    parameters: {
      query: {
        /** Zero-based page index (0..N) */
        page?: number;
        /** The size of the page to be returned */
        size?: number;
        /** Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        sort?: string[];
        search?: string;
      };
      path: {
        slug: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["PagedModelProjectWithStatsModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  getAll_9: {
    parameters: {
      query: {
        /** Zero-based page index (0..N) */
        page?: number;
        /** The size of the page to be returned */
        size?: number;
        /** Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        sort?: string[];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["PagedModelPatModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  create_11: {
    responses: {
      /** Created */
      201: {
        content: {
          "*/*": components["schemas"]["RevealedPatModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreatePatDto"];
      };
    };
  };
  /** Returns current Personal Access Token. If the request is not authenticated with a Personal Access Token, it will return 400 response status. */
  getCurrent: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["PatWithUserModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  get_18: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["PatModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  /** Updates Personal Access Token */
  update_7: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["PatModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdatePatDto"];
      };
    };
  };
  /** Deletes Personal Access Token */
  delete_10: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  /** Regenerates Personal Access Token. It generates new token value and updates its time of expiration. */
  regenerate: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["RevealedPatModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["RegeneratePatDto"];
      };
    };
  };
  /** Returns preferred organization. If server allows users to create organization, preferred organization is automatically created if user doesn't have access to any organization. */
  getPreferred: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["PrivateOrganizationModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  /** Returns all projects where current user has any permission */
  getAll: {
    parameters: {
      query: {
        /** Filter projects by id */
        filterId?: number[];
        /** Filter projects without id */
        filterNotId?: number[];
        /** Zero-based page index (0..N) */
        page?: number;
        /** The size of the page to be returned */
        size?: number;
        /** Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        sort?: string[];
        search?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["PagedModelProjectModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  /** Creates a new project with languages and initial settings. */
  createProject: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["ProjectModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateProjectRequest"];
      };
    };
  };
  /** Returns all projects (including statistics) where current user has any permission */
  getAllWithStatistics: {
    parameters: {
      query: {
        /** Zero-based page index (0..N) */
        page?: number;
        /** The size of the page to be returned */
        size?: number;
        /** Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        sort?: string[];
        search?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["PagedModelProjectWithStatsModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  get_4: {
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["ProjectModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  editProject: {
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["ProjectModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["EditProjectRequest"];
      };
    };
  };
  deleteProject: {
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  getActivity: {
    parameters: {
      query: {
        /** Zero-based page index (0..N) */
        page?: number;
        /** The size of the page to be returned */
        size?: number;
        /** Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        sort?: string[];
      };
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["PagedModelProjectActivityModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  getSingleRevision: {
    parameters: {
      path: {
        revisionId: number;
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["ProjectActivityModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  getModifiedEntitiesByRevision: {
    parameters: {
      query: {
        /** Zero-based page index (0..N) */
        page?: number;
        /** The size of the page to be returned */
        size?: number;
        /** Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        sort?: string[];
        /** Filters results by specific entity class */
        filterEntityClass?: string[];
      };
      path: {
        revisionId: number;
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["PagedModelModifiedEntityModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  getPromptProjectCustomization: {
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["ProjectAiPromptCustomizationModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  setPromptProjectCustomization: {
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["ProjectAiPromptCustomizationModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SetProjectPromptCustomizationRequest"];
      };
    };
  };
  getAllKeys: {
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["CollectionModelKeyModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  /**
   * Returns all project key with any disabled language.
   *
   * If key has no disabled language, it is not returned.
   */
  getDisabledLanguages_2: {
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["CollectionModelKeyDisabledLanguagesModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  /** Returns all API keys for specified project */
  allByProject: {
    parameters: {
      query: {
        pageable: components["schemas"]["Pageable"];
      };
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["PagedModelApiKeyModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  /** Returns default auto translation settings for project (deprecated: use per language config with null language id) */
  getAutoTranslationSettings: {
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["AutoTranslationConfigModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  /** Sets default auto-translation settings for project (deprecated: use per language config with null language id) */
  setAutoTranslationSettings: {
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["AutoTranslationConfigModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AutoTranslationSettingsDto"];
      };
    };
  };
  uploadAvatar_1: {
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["ProjectModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
    requestBody: {
      content: {
        "multipart/form-data": {
          /** Format: binary */
          avatar: string;
        };
      };
    };
  };
  removeAvatar_1: {
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["ProjectModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  list_3: {
    parameters: {
      query: {
        /** Zero-based page index (0..N) */
        page?: number;
        /** The size of the page to be returned */
        size?: number;
        /** Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        sort?: string[];
      };
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["PagedModelBatchJobModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  get_12: {
    parameters: {
      path: {
        id: number;
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["BatchJobModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  /** Stops batch operation if possible. */
  cancel: {
    parameters: {
      path: {
        id: number;
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  /** Stores a bigMeta for a project */
  store_2: {
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["BigMetaDto"];
      };
    };
  };
  list_2: {
    parameters: {
      query: {
        /** Zero-based page index (0..N) */
        page?: number;
        /** The size of the page to be returned */
        size?: number;
        /** Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        sort?: string[];
      };
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["PagedModelContentDeliveryConfigModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  create_6: {
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["ContentDeliveryConfigModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ContentDeliveryConfigRequest"];
      };
    };
  };
  get_9: {
    parameters: {
      path: {
        id: number;
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["ContentDeliveryConfigModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  update_4: {
    parameters: {
      path: {
        id: number;
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["ContentDeliveryConfigModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ContentDeliveryConfigRequest"];
      };
    };
  };
  /** Immediately publishes content to the configured Content Delivery */
  post: {
    parameters: {
      path: {
        id: number;
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  delete_7: {
    parameters: {
      path: {
        id: number;
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  list_1: {
    parameters: {
      query: {
        /** Zero-based page index (0..N) */
        page?: number;
        /** The size of the page to be returned */
        size?: number;
        /** Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        sort?: string[];
      };
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["PagedModelContentStorageModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  create_5: {
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["ContentStorageModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ContentStorageRequest"];
      };
    };
  };
  test_1: {
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["StorageTestResult"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ContentStorageRequest"];
      };
    };
  };
  get_8: {
    parameters: {
      path: {
        contentStorageId: number;
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["ContentStorageModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  update_3: {
    parameters: {
      path: {
        contentStorageId: number;
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["ContentStorageModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ContentStorageRequest"];
      };
    };
  };
  delete_6: {
    parameters: {
      path: {
        contentStorageId: number;
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  /** Tests existing Content Storage with new configuration. (Uses existing secrets, if nulls provided) */
  testExisting: {
    parameters: {
      path: {
        id: number;
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["StorageTestResult"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ContentStorageRequest"];
      };
    };
  };
  /** Returns all running and pending batch operations. Completed batch operations are returned only if they are not older than 1 hour. If user doesn't have permission to view all batch operations, only their operations are returned. */
  currentJobs: {
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["CollectionModelBatchJobModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  exportData: {
    parameters: {
      query: {
        /**
         * Languages to be contained in export.
         *
         * If null, all languages are exported
         */
        languages?: string[];
        /** Format to export to */
        format?:
          | "JSON"
          | "JSON_TOLGEE"
          | "XLIFF"
          | "PO"
          | "APPLE_STRINGS_STRINGSDICT"
          | "APPLE_XLIFF"
          | "ANDROID_XML"
          | "COMPOSE_XML"
          | "FLUTTER_ARB"
          | "PROPERTIES"
          | "YAML_RUBY"
          | "YAML"
          | "JSON_I18NEXT"
          | "CSV"
          | "RESX_ICU"
          | "XLSX"
          | "APPLE_XCSTRINGS";
        /**
         * Delimiter to structure file content.
         *
         * e.g. For key "home.header.title" would result in {"home": {"header": "title": {"Hello"}}} structure.
         *
         * When null, resulting file won't be structured. Works only for generic structured formats (e.g. JSON, YAML),
         * specific formats like `YAML_RUBY` don't honor this parameter.
         */
        structureDelimiter?: string;
        /** Filter key IDs to be contained in export */
        filterKeyId?: number[];
        /** Filter key IDs not to be contained in export */
        filterKeyIdNot?: number[];
        /**
         * Filter keys tagged by.
         *
         * This filter works the same as `filterTagIn` but in this cases it accepts single tag only.
         */
        filterTag?: string;
        /** Filter keys tagged by one of provided tags */
        filterTagIn?: string[];
        /** Filter keys not tagged by one of provided tags */
        filterTagNotIn?: string[];
        /** Filter keys with prefix */
        filterKeyPrefix?: string;
        /** Filter translations with state. By default, all states except untranslated is exported. */
        filterState?: (
          | "UNTRANSLATED"
          | "TRANSLATED"
          | "REVIEWED"
          | "DISABLED"
        )[];
        /** Filter translations with namespace. By default, all namespaces everything are exported. To export default namespace, use empty string. */
        filterNamespace?: string[];
        /**
         * If false, it doesn't return zip of files, but it returns single file.
         *
         * This is possible only when single language is exported. Otherwise it returns "400 - Bad Request" response.
         */
        zip?: boolean;
        /**
         * Message format to be used for export.
         *
         * e.g. PHP_PO: Hello %s, ICU: Hello {name}.
         *
         * This property is honored only for generic formats like JSON or YAML.
         * For specific formats like `YAML_RUBY` it's ignored.
         */
        messageFormat?:
          | "C_SPRINTF"
          | "PHP_SPRINTF"
          | "JAVA_STRING_FORMAT"
          | "APPLE_SPRINTF"
          | "RUBY_SPRINTF"
          | "I18NEXT"
          | "ICU"
          | "PYTHON_PERCENT";
        /**
         * This is a template that defines the structure of the resulting .zip file content.
         *
         * The template is a string that can contain the following placeholders: {namespace}, {languageTag},
         * {androidLanguageTag}, {snakeLanguageTag}, {extension}.
         *
         * For example, when exporting to JSON with the template `{namespace}/{languageTag}.{extension}`,
         * the English translations of the `home` namespace will be stored in `home/en.json`.
         *
         * The `{snakeLanguageTag}` placeholder is the same as `{languageTag}` but in snake case. (e.g., en_US).
         *
         * The Android specific `{androidLanguageTag}` placeholder is the same as `{languageTag}`
         * but in Android format. (e.g., en-rUS)
         */
        fileStructureTemplate?: string;
        /**
         * If true, for structured formats (like JSON) arrays are supported.
         *
         * e.g. Key hello[0] will be exported as {"hello": ["..."]}
         */
        supportArrays?: boolean;
      };
      path: {
        projectId: number;
      };
    };
    responses: {
      /**
       * When multiple files are exported, they are zipped and returned as a single zip file.
       * When a single file is exported, it is returned directly.
       */
      200: {
        content: {
          "application/*": unknown;
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  /** Exports data (post). Useful when exceeding allowed URL size. */
  exportPost: {
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      /**
       * When multiple files are exported, they are zipped and returned as a single zip file.
       * When a single file is exported, it is returned directly.
       */
      200: {
        content: {
          "application/*": unknown;
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ExportParams"];
      };
    };
  };
  /** Prepares provided files to import. */
  addFiles: {
    parameters: {
      query: {
        /** When importing files in structured formats (e.g., JSON, YAML), this field defines the delimiter which will be used in names of imported keys. */
        structureDelimiter?: string;
      };
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["ImportAddFilesResultModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
    requestBody: {
      content: {
        "multipart/form-data": {
          files: string[];
        };
      };
    };
  };
  /** Deletes prepared import data. */
  cancelImport: {
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  /** Returns import settings for the authenticated user and the project. */
  get_10: {
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["ImportSettingsModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  /** Stores import settings for the authenticated user and the project. */
  store: {
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["ImportSettingsModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ImportSettingsRequest"];
      };
    };
  };
  /** Returns all existing and imported namespaces */
  getAllNamespaces_2: {
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["CollectionModelImportNamespaceModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  /** Imports the data prepared in previous step */
  applyImport: {
    parameters: {
      query: {
        /** Whether override or keep all translations with unresolved conflicts */
        forceMode?: "OVERRIDE" | "KEEP" | "NO_FORCE";
      };
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  /** Imports the data prepared in previous step. Streams current status. */
  applyImportStreaming: {
    parameters: {
      query: {
        /** Whether override or keep all translations with unresolved conflicts */
        forceMode?: "OVERRIDE" | "KEEP" | "NO_FORCE";
      };
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/x-ndjson": components["schemas"]["StreamingResponseBody"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  /** Returns the result of preparation. */
  getImportResult: {
    parameters: {
      query: {
        /** Zero-based page index (0..N) */
        page?: number;
        /** The size of the page to be returned */
        size?: number;
        /** Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        sort?: string[];
      };
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["PagedModelImportLanguageModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  /** Sets namespace for file to import. */
  selectNamespace: {
    parameters: {
      path: {
        fileId: number;
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SetFileNamespaceRequest"];
      };
    };
  };
  /** Returns issues for uploaded file. */
  getImportFileIssues: {
    parameters: {
      path: {
        importFileId: number;
        projectId: number;
      };
      query: {
        /** Zero-based page index (0..N) */
        page?: number;
        /** The size of the page to be returned */
        size?: number;
        /** Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        sort?: string[];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["PagedModelImportFileIssueModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  /** Resets existing language paired with language to import. */
  resetExistingLanguage: {
    parameters: {
      path: {
        importLanguageId: number;
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  /** Sets existing language to pair with language to import. Data will be imported to selected existing language when applied. */
  selectExistingLanguage: {
    parameters: {
      path: {
        importLanguageId: number;
        existingLanguageId: number;
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  /** Returns language prepared to import. */
  getImportLanguage: {
    parameters: {
      path: {
        languageId: number;
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["ImportLanguageModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  /** Deletes language prepared to import. */
  deleteLanguage: {
    parameters: {
      path: {
        languageId: number;
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  /** Resolves all translation conflicts for provided language. The old translations will be kept. */
  resolveTranslationSetKeepExisting_2: {
    parameters: {
      path: {
        languageId: number;
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  /** Resolves all translation conflicts for provided language. The old translations will be overridden. */
  resolveTranslationSetOverride_2: {
    parameters: {
      path: {
        languageId: number;
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  /** Returns translations prepared to import. */
  getImportTranslations: {
    parameters: {
      path: {
        projectId: number;
        languageId: number;
      };
      query: {
        /** Whether only translations, which are in conflict with existing translations should be returned */
        onlyConflicts?: boolean;
        /** Whether only translations with unresolved conflictswith existing translations should be returned */
        onlyUnresolved?: boolean;
        /** String to search in translation text or key */
        search?: string;
        /** Zero-based page index (0..N) */
        page?: number;
        /** The size of the page to be returned */
        size?: number;
        /** Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        sort?: string[];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["PagedModelImportTranslationModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  /** Resolves translation conflict. The old translation will be kept. */
  resolveTranslationSetKeepExisting: {
    parameters: {
      path: {
        languageId: number;
        translationId: number;
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  /** Resolves translation conflict. The old translation will be overridden. */
  resolveTranslationSetOverride: {
    parameters: {
      path: {
        languageId: number;
        translationId: number;
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  getProjectInvitations: {
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["CollectionModelProjectInvitationModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  inviteUser: {
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["ProjectInvitationModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ProjectInviteUserDto"];
      };
    };
  };
  getAll_1: {
    parameters: {
      query: {
        /** Zero-based page index (0..N) */
        page?: number;
        /** The size of the page to be returned */
        size?: number;
        /** Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        sort?: string[];
      };
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["PagedModelKeyModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  create_2: {
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      /** Created */
      201: {
        content: {
          "*/*": components["schemas"]["KeyWithDataModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateKeyDto"];
      };
    };
  };
  /** Delete one or multiple keys by their IDs in request body. Useful for larger requests esxceeding allowed URL length. */
  delete_4: {
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DeleteKeysDto"];
      };
    };
  };
  create_1: {
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      /** Created */
      201: {
        content: {
          "*/*": components["schemas"]["KeyWithDataModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateKeyDto"];
      };
    };
  };
  /** Imports new keys with translations. If key already exists, its translations and tags are not updated. */
  importKeys_2: {
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ImportKeysDto"];
      };
    };
  };
  /** Import's new keys with translations. Translations can be updated, when specified. */
  importKeys: {
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["KeyImportResolvableResultModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ImportKeysResolvableDto"];
      };
    };
  };
  /** Returns information about keys. (KeyData, Screenshots, Translation in specified language)If key is not found, it's not included in the response. */
  getInfo: {
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["CollectionModelKeyWithDataModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["GetKeysRequestDto"];
      };
    };
  };
  /**
   * This endpoint helps you to find desired key by keyName, base translation or translation in specified language.
   *
   * Sort is ignored for this request.
   */
  searchForKey: {
    parameters: {
      query: {
        /** Search query */
        search: string;
        /** Language to search in */
        languageTag?: string;
        /** Zero-based page index (0..N) */
        page?: number;
        /** The size of the page to be returned */
        size?: number;
        /** Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        sort?: string[];
      };
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["PagedModelKeySearchSearchResultModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  /** Returns all key IDs for specified filter values. This way, you can apply the same filter as in the translation view and get the resulting key IDs for future use. */
  selectKeys_2: {
    parameters: {
      query: {
        /**
         * Translation state in the format: languageTag,state. You can use this parameter multiple times.
         *
         * When used with multiple states for same language it is applied with logical OR.
         *
         * When used with multiple languages, it is applied with logical AND.
         */
        filterState?: string[];
        /**
         * Languages to be contained in response.
         *
         * To add multiple languages, repeat this param (eg. ?languages=en&languages=de)
         */
        languages?: string[];
        /** String to search in key name or translation text */
        search?: string;
        /** Selects key with provided names. Use this param multiple times to fetch more keys. */
        filterKeyName?: string[];
        /** Selects key with provided ID. Use this param multiple times to fetch more keys. */
        filterKeyId?: number[];
        /** Selects only keys for which the translation is missing in any returned language. It only filters for translations included in returned languages. */
        filterUntranslatedAny?: boolean;
        /** Selects only keys, where translation is provided in any language */
        filterTranslatedAny?: boolean;
        /** Selects only keys where the translation is missing for the specified language. The specified language must be included in the returned languages. Otherwise, this filter doesn't apply. */
        filterUntranslatedInLang?: string;
        /** Selects only keys, where translation is provided in specified language */
        filterTranslatedInLang?: string;
        /** Selects only keys with screenshots */
        filterHasScreenshot?: boolean;
        /** Selects only keys without screenshots */
        filterHasNoScreenshot?: boolean;
        /**
         * Filter namespaces.
         *
         * To filter default namespace, set to empty string.
         */
        filterNamespace?: string[];
        /** Selects only keys with provided tag */
        filterTag?: string[];
        /** Selects only keys, where translation in provided langs is in outdated state */
        filterOutdatedLanguage?: string[];
        /** Selects only keys, where translation in provided langs is not in outdated state */
        filterNotOutdatedLanguage?: string[];
        /** Selects only key affected by activity with specidfied revision ID */
        filterRevisionId?: number[];
        /** Select only keys which were not successfully translated by batch job with provided id */
        filterFailedKeysOfJob?: number;
        /** Select only keys which are in specified task */
        filterTaskNumber?: number[];
        /** Filter task keys which are `not done` */
        filterTaskKeysNotDone?: boolean;
        /** Filter task keys which are `done` */
        filterTaskKeysDone?: boolean;
      };
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["SelectAllResponse"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  delete_2: {
    parameters: {
      path: {
        ids: number[];
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  get_6: {
    parameters: {
      path: {
        id: number;
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["KeyModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  edit: {
    parameters: {
      path: {
        id: number;
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["KeyModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["EditKeyDto"];
      };
    };
  };
  getBigMeta: {
    parameters: {
      path: {
        id: number;
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["CollectionModelKeyWithBaseTranslationModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  /** Edits key name, translations, tags, screenshots, and other data */
  complexEdit: {
    parameters: {
      path: {
        id: number;
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["KeyWithDataModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ComplexEditKeyDto"];
      };
    };
  };
  /** Returns languages, in which key is disabled */
  getDisabledLanguages: {
    parameters: {
      path: {
        id: number;
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["CollectionModelLanguageModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  /** Sets languages, in which key is disabled */
  setDisabledLanguages: {
    parameters: {
      path: {
        id: number;
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["CollectionModelLanguageModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SetDisabledLanguagesRequest"];
      };
    };
  };
  /**
   * Uses enabled auto-translation methods.
   * You need to set at least one of useMachineTranslation or useTranslationMemory to true.
   *
   * This will replace the the existing translation with the result obtained from specified source!
   */
  autoTranslate: {
    parameters: {
      path: {
        keyId: number;
        projectId: number;
      };
      query: {
        /**
         * Tags of languages to auto-translate.
         * When no languages provided, it translates only untranslated languages.
         */
        languages?: string[];
        useMachineTranslation?: boolean;
        useTranslationMemory?: boolean;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  getKeyScreenshots_1: {
    parameters: {
      path: {
        keyId: number;
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["CollectionModelScreenshotModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  uploadScreenshot_1: {
    parameters: {
      path: {
        keyId: number;
        projectId: number;
      };
    };
    responses: {
      /** Created */
      201: {
        content: {
          "*/*": components["schemas"]["ScreenshotModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
    requestBody: {
      content: {
        "multipart/form-data": {
          /** Format: binary */
          screenshot: string;
          info?: components["schemas"]["ScreenshotInfoDto"];
        };
      };
    };
  };
  deleteScreenshots_1: {
    parameters: {
      path: {
        ids: number[];
        keyId: number;
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  /** Tags a key with tag. If tag with provided name doesn't exist, it is created */
  tagKey: {
    parameters: {
      path: {
        keyId: number;
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["TagModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TagKeyDto"];
      };
    };
  };
  /** Removes tag with provided id from key with provided id */
  removeTag: {
    parameters: {
      path: {
        keyId: number;
        tagId: number;
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  getLanguagePromptCustomizations: {
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["CollectionModelLanguageAiPromptCustomizationModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  getAll_7: {
    parameters: {
      path: {
        projectId: number;
      };
      query: {
        /** Zero-based page index (0..N) */
        page?: number;
        /** The size of the page to be returned */
        size?: number;
        /** Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        sort?: string[];
        /** Filter languages by id */
        filterId?: number[];
        /** Filter languages without id */
        filterNotId?: number[];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["PagedModelLanguageModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  createLanguage: {
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["LanguageModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["LanguageRequest"];
      };
    };
  };
  get_16: {
    parameters: {
      path: {
        languageId: number;
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["LanguageModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  editLanguage: {
    parameters: {
      path: {
        languageId: number;
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["LanguageModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["LanguageRequest"];
      };
    };
  };
  deleteLanguage_2: {
    parameters: {
      path: {
        languageId: number;
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  setLanguagePromptCustomization: {
    parameters: {
      path: {
        languageId: number;
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["LanguageAiPromptCustomizationModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SetLanguagePromptCustomizationRequest"];
      };
    };
  };
  leaveProject: {
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  /** Returns machine translation credit balance for specified project */
  getProjectCredits: {
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["CreditBalanceModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  /** Get enabled services and configured formality for each language */
  getMachineTranslationLanguageInfo: {
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["CollectionModelLanguageInfoModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  getMachineTranslationSettings: {
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["CollectionModelLanguageConfigItemModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  setMachineTranslationSettings: {
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["CollectionModelLanguageConfigItemModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SetMachineTranslationSettingsDto"];
      };
    };
  };
  /** List all batch operations started by current user */
  myList: {
    parameters: {
      query: {
        /** Zero-based page index (0..N) */
        page?: number;
        /** The size of the page to be returned */
        size?: number;
        /** Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        sort?: string[];
      };
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["PagedModelBatchJobModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  /** Returns information about a namespace by its name */
  getByName: {
    parameters: {
      path: {
        name: string;
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["NamespaceModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  getAllNamespaces: {
    parameters: {
      query: {
        /** Zero-based page index (0..N) */
        page?: number;
        /** The size of the page to be returned */
        size?: number;
        /** Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        sort?: string[];
      };
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["PagedModelNamespaceModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  update_1: {
    parameters: {
      path: {
        id: number;
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["NamespaceModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateNamespaceDto"];
      };
    };
  };
  getPerLanguageAutoTranslationSettings: {
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["CollectionModelAutoTranslationConfigModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  setPerLanguageAutoTranslationSettings: {
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["CollectionModelAutoTranslationConfigModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AutoTranslationSettingsDto"][];
      };
    };
  };
  /** Unlike the /v2/projects/{projectId}/import endpoint, imports the data in single request by provided files and parameters. This is useful for automated importing via API or CLI. */
  doImport: {
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
    requestBody: {
      content: {
        "multipart/form-data": {
          files: string[];
          params: components["schemas"]["SingleStepImportRequest"];
        };
      };
    };
  };
  /** Clear translation values for provided keys in selected languages. */
  clearTranslations: {
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["BatchJobModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ClearTranslationsRequest"];
      };
    };
  };
  /** Copy translation values from one language to other languages. */
  copyTranslations: {
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["BatchJobModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CopyTranslationRequest"];
      };
    };
  };
  deleteKeys: {
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["BatchJobModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DeleteKeysRequest"];
      };
    };
  };
  /** Translate provided keys to provided languages through primary MT provider. */
  machineTranslation: {
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["BatchJobModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["MachineTranslationRequest"];
      };
    };
  };
  /** Pre-translate provided keys to provided languages by TM. */
  translate: {
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["BatchJobModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PreTranslationByTmRequest"];
      };
    };
  };
  setKeysNamespace: {
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["BatchJobModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SetKeysNamespaceRequest"];
      };
    };
  };
  setTranslationState_2: {
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["BatchJobModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SetTranslationsStateStateRequest"];
      };
    };
  };
  tagKeys: {
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["BatchJobModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TagKeysRequest"];
      };
    };
  };
  untagKeys: {
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["BatchJobModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UntagKeysRequest"];
      };
    };
  };
  getProjectStats: {
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["ProjectStatsModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  getProjectDailyActivity: {
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": { [key: string]: number };
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  /** Suggests machine translations from enabled services */
  suggestMachineTranslations: {
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["SuggestResultModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SuggestRequestDto"];
      };
    };
  };
  /** Suggests machine translations from enabled services. The results are streamed to the output in ndjson format. If an error occurs when for any service provider used, the error information is returned as a part of the result item, while the response has 200 status code. */
  suggestMachineTranslationsStreaming: {
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/x-ndjson": components["schemas"]["StreamingResponseBody"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SuggestRequestDto"];
      };
    };
  };
  /** Suggests machine translations from translation memory. The result is always sorted by similarity, so sorting is not supported. */
  suggestTranslationMemory: {
    parameters: {
      query: {
        /** Zero-based page index (0..N) */
        page?: number;
        /** The size of the page to be returned */
        size?: number;
        /** Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        sort?: string[];
      };
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["PagedModelTranslationMemoryItemModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SuggestRequestDto"];
      };
    };
  };
  executeComplexTagOperation: {
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ComplexTagKeysRequest"];
      };
    };
  };
  getAll_3: {
    parameters: {
      query: {
        search?: string;
        /** Zero-based page index (0..N) */
        page?: number;
        /** The size of the page to be returned */
        size?: number;
        /** Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        sort?: string[];
      };
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["PagedModelTagModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  getTasks_1: {
    parameters: {
      query: {
        /** Filter tasks by state */
        filterState?: ("NEW" | "IN_PROGRESS" | "DONE" | "CLOSED")[];
        /** Filter tasks without state */
        filterNotState?: ("NEW" | "IN_PROGRESS" | "DONE" | "CLOSED")[];
        /** Filter tasks by assignee */
        filterAssignee?: number[];
        /** Filter tasks by type */
        filterType?: ("TRANSLATE" | "REVIEW")[];
        /** Filter tasks by id */
        filterId?: number[];
        /** Filter tasks without id */
        filterNotId?: number[];
        /** Filter tasks by project */
        filterProject?: number[];
        /** Filter tasks without project */
        filterNotProject?: number[];
        /** Filter tasks by language */
        filterLanguage?: number[];
        /** Filter tasks by key */
        filterKey?: number[];
        /** Filter tasks by agency */
        filterAgency?: number[];
        /** Exclude "done" tasks which are older than specified timestamp */
        filterDoneMinClosedAt?: number;
        /** Exclude tasks which were closed before specified timestamp */
        filterNotClosedBefore?: number;
        /** Zero-based page index (0..N) */
        page?: number;
        /** The size of the page to be returned */
        size?: number;
        /** Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        sort?: string[];
        search?: string;
      };
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["PagedModelTaskModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  createTask: {
    parameters: {
      query: {
        filterState?: (
          | "UNTRANSLATED"
          | "TRANSLATED"
          | "REVIEWED"
          | "DISABLED"
        )[];
        filterOutdated?: boolean;
      };
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["TaskModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateTaskRequest"];
      };
    };
  };
  calculateScope: {
    parameters: {
      query: {
        filterState?: (
          | "UNTRANSLATED"
          | "TRANSLATED"
          | "REVIEWED"
          | "DISABLED"
        )[];
        filterOutdated?: boolean;
      };
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["KeysScopeView"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CalculateScopeRequest"];
      };
    };
  };
  createTasks: {
    parameters: {
      query: {
        filterState?: (
          | "UNTRANSLATED"
          | "TRANSLATED"
          | "REVIEWED"
          | "DISABLED"
        )[];
        filterOutdated?: boolean;
      };
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateMultipleTasksRequest"];
      };
    };
  };
  getPossibleAssignees: {
    parameters: {
      query: {
        /** Filter users by id */
        filterId?: number[];
        /** Filter only users that have at least following scopes */
        filterMinimalScope?: string;
        /** Filter only users that can view language */
        filterViewLanguageId?: number;
        /** Filter only users that can edit language */
        filterEditLanguageId?: number;
        /** Filter only users that can edit state of language */
        filterStateLanguageId?: number;
        /** Zero-based page index (0..N) */
        page?: number;
        /** The size of the page to be returned */
        size?: number;
        /** Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        sort?: string[];
        search?: string;
      };
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["PagedModelSimpleUserAccountModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  getTask: {
    parameters: {
      path: {
        taskNumber: number;
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["TaskModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  updateTask: {
    parameters: {
      path: {
        taskNumber: number;
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["TaskModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateTaskRequest"];
      };
    };
  };
  /** If the tasks is blocked by other tasks, it returns numbers of these tasks. */
  getBlockingTasks: {
    parameters: {
      path: {
        taskNumber: number;
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": number[];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  closeTask: {
    parameters: {
      path: {
        taskNumber: number;
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["TaskModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  finishTask: {
    parameters: {
      path: {
        taskNumber: number;
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["TaskModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  getTaskKeys: {
    parameters: {
      path: {
        taskNumber: number;
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["TaskKeysResponse"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  updateTaskKeys: {
    parameters: {
      path: {
        taskNumber: number;
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateTaskKeysRequest"];
      };
    };
  };
  /** Mark key as done, which updates task progress. */
  updateTaskKey: {
    parameters: {
      path: {
        taskNumber: number;
        keyId: number;
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["UpdateTaskKeyResponse"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateTaskKeyRequest"];
      };
    };
  };
  /** Detailed statistics for every assignee */
  getPerUserReport: {
    parameters: {
      path: {
        taskNumber: number;
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["TaskPerUserReportModel"][];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  reopenTask: {
    parameters: {
      path: {
        taskNumber: number;
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["TaskModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  /** Detailed statistics about the task results */
  getXlsxReport: {
    parameters: {
      path: {
        taskNumber: number;
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": string;
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  /** Returns organizations to which project can be transferred */
  getTransferOptions: {
    parameters: {
      query: {
        search?: string;
      };
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["CollectionModelProjectTransferOptionModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  /** Transfers project's ownership to organization */
  transferProjectToOrganization: {
    parameters: {
      path: {
        projectId: number;
        organizationId: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  getTranslations: {
    parameters: {
      query: {
        /** Cursor to get next data */
        cursor?: string;
        /**
         * Translation state in the format: languageTag,state. You can use this parameter multiple times.
         *
         * When used with multiple states for same language it is applied with logical OR.
         *
         * When used with multiple languages, it is applied with logical AND.
         */
        filterState?: string[];
        /**
         * Languages to be contained in response.
         *
         * To add multiple languages, repeat this param (eg. ?languages=en&languages=de)
         */
        languages?: string[];
        /** String to search in key name or translation text */
        search?: string;
        /** Selects key with provided names. Use this param multiple times to fetch more keys. */
        filterKeyName?: string[];
        /** Selects key with provided ID. Use this param multiple times to fetch more keys. */
        filterKeyId?: number[];
        /** Selects only keys for which the translation is missing in any returned language. It only filters for translations included in returned languages. */
        filterUntranslatedAny?: boolean;
        /** Selects only keys, where translation is provided in any language */
        filterTranslatedAny?: boolean;
        /** Selects only keys where the translation is missing for the specified language. The specified language must be included in the returned languages. Otherwise, this filter doesn't apply. */
        filterUntranslatedInLang?: string;
        /** Selects only keys, where translation is provided in specified language */
        filterTranslatedInLang?: string;
        /** Selects only keys with screenshots */
        filterHasScreenshot?: boolean;
        /** Selects only keys without screenshots */
        filterHasNoScreenshot?: boolean;
        /**
         * Filter namespaces.
         *
         * To filter default namespace, set to empty string.
         */
        filterNamespace?: string[];
        /** Selects only keys with provided tag */
        filterTag?: string[];
        /** Selects only keys, where translation in provided langs is in outdated state */
        filterOutdatedLanguage?: string[];
        /** Selects only keys, where translation in provided langs is not in outdated state */
        filterNotOutdatedLanguage?: string[];
        /** Selects only key affected by activity with specidfied revision ID */
        filterRevisionId?: number[];
        /** Select only keys which were not successfully translated by batch job with provided id */
        filterFailedKeysOfJob?: number;
        /** Select only keys which are in specified task */
        filterTaskNumber?: number[];
        /** Filter task keys which are `not done` */
        filterTaskKeysNotDone?: boolean;
        /** Filter task keys which are `done` */
        filterTaskKeysDone?: boolean;
        /** Zero-based page index (0..N) */
        page?: number;
        /** The size of the page to be returned */
        size?: number;
        /** Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        sort?: string[];
      };
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["KeysWithTranslationsPageModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  /** Sets translations for existing key */
  setTranslations: {
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["SetTranslationsResponseModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SetTranslationsWithKeyDto"];
      };
    };
  };
  /** Sets translations for existing key or creates new key and sets the translations to it. */
  createOrUpdateTranslations: {
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["SetTranslationsResponseModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SetTranslationsWithKeyDto"];
      };
    };
  };
  /** Creates a translation comment. Empty translation is stored, when not exists. */
  create_9: {
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      /** Created */
      201: {
        content: {
          "*/*": components["schemas"]["TranslationWithCommentModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TranslationCommentWithLangKeyDto"];
      };
    };
  };
  /** Returns all key IDs for specified filter values. This way, you can apply the same filter as in the translation view and get the resulting key IDs for future use. */
  selectKeys: {
    parameters: {
      query: {
        /**
         * Translation state in the format: languageTag,state. You can use this parameter multiple times.
         *
         * When used with multiple states for same language it is applied with logical OR.
         *
         * When used with multiple languages, it is applied with logical AND.
         */
        filterState?: string[];
        /**
         * Languages to be contained in response.
         *
         * To add multiple languages, repeat this param (eg. ?languages=en&languages=de)
         */
        languages?: string[];
        /** String to search in key name or translation text */
        search?: string;
        /** Selects key with provided names. Use this param multiple times to fetch more keys. */
        filterKeyName?: string[];
        /** Selects key with provided ID. Use this param multiple times to fetch more keys. */
        filterKeyId?: number[];
        /** Selects only keys for which the translation is missing in any returned language. It only filters for translations included in returned languages. */
        filterUntranslatedAny?: boolean;
        /** Selects only keys, where translation is provided in any language */
        filterTranslatedAny?: boolean;
        /** Selects only keys where the translation is missing for the specified language. The specified language must be included in the returned languages. Otherwise, this filter doesn't apply. */
        filterUntranslatedInLang?: string;
        /** Selects only keys, where translation is provided in specified language */
        filterTranslatedInLang?: string;
        /** Selects only keys with screenshots */
        filterHasScreenshot?: boolean;
        /** Selects only keys without screenshots */
        filterHasNoScreenshot?: boolean;
        /**
         * Filter namespaces.
         *
         * To filter default namespace, set to empty string.
         */
        filterNamespace?: string[];
        /** Selects only keys with provided tag */
        filterTag?: string[];
        /** Selects only keys, where translation in provided langs is in outdated state */
        filterOutdatedLanguage?: string[];
        /** Selects only keys, where translation in provided langs is not in outdated state */
        filterNotOutdatedLanguage?: string[];
        /** Selects only key affected by activity with specidfied revision ID */
        filterRevisionId?: number[];
        /** Select only keys which were not successfully translated by batch job with provided id */
        filterFailedKeysOfJob?: number;
        /** Select only keys which are in specified task */
        filterTaskNumber?: number[];
        /** Filter task keys which are `not done` */
        filterTaskKeysNotDone?: boolean;
        /** Filter task keys which are `done` */
        filterTaskKeysDone?: boolean;
      };
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["SelectAllResponse"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  /** Returns all translations for specified languages */
  getAllTranslations: {
    parameters: {
      path: {
        /** Comma-separated language tags to return translations in. Languages you are not permitted to see will be silently dropped and not returned. */
        languages: string[];
        projectId: number;
      };
      query: {
        /** Namespace to return */
        ns?: string;
        /**
         * Delimiter to structure response content.
         *
         * e.g. For key "home.header.title" would result in {"home": {"header": {"title": "Hello"}}} structure.
         *
         * When null, resulting file will be a flat key-value object.
         */
        structureDelimiter?: string;
        /**
         * Enables filtering of returned keys by their tags.
         * Only keys with at least one provided tag will be returned.
         * Optional, filtering is not applied if not specified.
         */
        filterTag?: string[];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": string;
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  /** Returns translation comments of translation */
  getAll_5: {
    parameters: {
      path: {
        translationId: number;
        projectId: number;
      };
      query: {
        /** Zero-based page index (0..N) */
        page?: number;
        /** The size of the page to be returned */
        size?: number;
        /** Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        sort?: string[];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["PagedModelTranslationCommentModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  create_7: {
    parameters: {
      path: {
        translationId: number;
        projectId: number;
      };
    };
    responses: {
      /** Created */
      201: {
        content: {
          "*/*": components["schemas"]["TranslationCommentModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TranslationCommentDto"];
      };
    };
  };
  get_14: {
    parameters: {
      path: {
        translationId: number;
        commentId: number;
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["TranslationCommentModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  update_5: {
    parameters: {
      path: {
        commentId: number;
        translationId: number;
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["TranslationCommentModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TranslationCommentDto"];
      };
    };
  };
  delete_8: {
    parameters: {
      path: {
        translationId: number;
        commentId: number;
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  setState: {
    parameters: {
      path: {
        translationId: number;
        commentId: number;
        state: "RESOLUTION_NOT_NEEDED" | "NEEDS_RESOLUTION" | "RESOLVED";
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["TranslationCommentModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  /** Removes "auto translated" indication */
  dismissAutoTranslatedState: {
    parameters: {
      path: {
        translationId: number;
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["TranslationModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  /** Sorting is not supported for supported. It is automatically sorted from newest to oldest. */
  getTranslationHistory: {
    parameters: {
      path: {
        translationId: number;
        projectId: number;
      };
      query: {
        /** Zero-based page index (0..N) */
        page?: number;
        /** The size of the page to be returned */
        size?: number;
        /** Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        sort?: string[];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["PagedModelTranslationHistoryModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  /** Set's "outdated" flag indicating the base translation was changed without updating current translation. */
  setOutdated: {
    parameters: {
      path: {
        translationId: number;
        state: boolean;
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["TranslationModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  setTranslationState: {
    parameters: {
      path: {
        translationId: number;
        state: "TRANSLATED" | "REVIEWED";
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["TranslationModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  /** Returns all used project namespaces. Response contains default (null) namespace if used. */
  getUsedNamespaces: {
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["CollectionModelUsedNamespaceModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  /** Returns all project users, who have permission to access project */
  getAllUsers: {
    parameters: {
      path: {
        projectId: number;
      };
      query: {
        /** Zero-based page index (0..N) */
        page?: number;
        /** The size of the page to be returned */
        size?: number;
        /** Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        sort?: string[];
        search?: string;
        /** Filter users by id */
        filterId?: number[];
        /** Filter users without id */
        filterNotId?: number[];
        /** Filter users from agency */
        filterAgency?: number[];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["PagedModelUserAccountInProjectModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  revokePermission: {
    parameters: {
      path: {
        projectId: number;
        userId: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  /** Removes user's direct project permission, explicitly set for the project. User will have now base permissions from organization or no permission if they're not organization member. */
  setOrganizationBase: {
    parameters: {
      path: {
        userId: number;
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  /** Set user's granular (scope-based) direct project permission */
  setUsersPermissions: {
    parameters: {
      path: {
        userId: number;
        projectId: number;
      };
      query: {
        /** Granted scopes */
        scopes?: string[];
        languages?: number[];
        translateLanguages?: number[];
        viewLanguages?: number[];
        stateChangeLanguages?: number[];
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  setUsersPermissions_1: {
    parameters: {
      path: {
        userId: number;
        permissionType:
          | "NONE"
          | "VIEW"
          | "TRANSLATE"
          | "REVIEW"
          | "EDIT"
          | "MANAGE";
        projectId: number;
      };
      query: {
        languages?: number[];
        translateLanguages?: number[];
        viewLanguages?: number[];
        stateChangeLanguages?: number[];
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  list: {
    parameters: {
      query: {
        /** Zero-based page index (0..N) */
        page?: number;
        /** The size of the page to be returned */
        size?: number;
        /** Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        sort?: string[];
      };
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["PagedModelWebhookConfigModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  create: {
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["WebhookConfigModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["WebhookConfigRequest"];
      };
    };
  };
  get_5: {
    parameters: {
      path: {
        id: number;
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["WebhookConfigModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  update: {
    parameters: {
      path: {
        id: number;
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["WebhookConfigModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["WebhookConfigRequest"];
      };
    };
  };
  delete_1: {
    parameters: {
      path: {
        id: number;
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  /** Sends a test request to the webhook */
  test: {
    parameters: {
      path: {
        id: number;
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["WebhookTestResponse"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  identify: {
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["IdentifyRequest"];
      };
    };
  };
  report: {
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["BusinessEventReportRequest"];
      };
    };
  };
  /** Return server configuration properties documentation */
  get_3: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["DocItem"][];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  get_2: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["CollectionModelExportFormatModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  /** Returns initial data required by the UI to load */
  get_1: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["InitialDataModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  /** Get machine translation providers */
  getInfo_4: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            [
              key: string
            ]: components["schemas"]["MachineTranslationProviderModel"];
          };
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  getHierarchy: {
    parameters: {
      query: {
        search?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["HierarchyItem"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  getRoles: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            [key: string]: (
              | "translations.view"
              | "translations.edit"
              | "keys.edit"
              | "screenshots.upload"
              | "screenshots.delete"
              | "screenshots.view"
              | "activity.view"
              | "languages.edit"
              | "admin"
              | "project.edit"
              | "members.view"
              | "members.edit"
              | "translation-comments.add"
              | "translation-comments.edit"
              | "translation-comments.set-state"
              | "translations.state-edit"
              | "keys.view"
              | "keys.delete"
              | "keys.create"
              | "batch-jobs.view"
              | "batch-jobs.cancel"
              | "translations.batch-by-tm"
              | "translations.batch-machine"
              | "content-delivery.manage"
              | "content-delivery.publish"
              | "webhooks.manage"
              | "tasks.view"
              | "tasks.edit"
            )[];
          };
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  slackCommand: {
    parameters: {
      header: {
        "X-Slack-Signature": string;
        "X-Slack-Request-Timestamp": string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": string;
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          payload?: components["schemas"]["SlackCommandDto"];
          body?: string;
        };
      };
    };
  };
  /**
   * This is triggered when bot event is triggered. E.g., when app is uninstalled from workspace.
   *
   * Heads up! The events have to be configured via Slack App configuration in Event Subscription section.
   */
  fetchBotEvent: {
    parameters: {
      header: {
        "X-Slack-Signature": string;
        "X-Slack-Request-Timestamp": string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": { [key: string]: unknown };
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": string;
      };
    };
  };
  /** This is triggered when interactivity event is triggered. E.g., when user clicks button provided in previous messages. */
  onInteractivityEvent: {
    parameters: {
      header: {
        "X-Slack-Signature": string;
        "X-Slack-Request-Timestamp": string;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": string;
      };
    };
  };
  /** Sets finished state of the quick start guide */
  setFinishedState: {
    parameters: {
      path: {
        finished: boolean;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["QuickStartModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  /** Sets open state of the quick start guide */
  setOpenState: {
    parameters: {
      path: {
        open: boolean;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["QuickStartModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  /** Marks guide step as completed */
  completeGuideStep: {
    parameters: {
      path: {
        step: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["QuickStartModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  /** Pairs user account with slack account. */
  userLogin: {
    parameters: {
      query: {
        /** The encrypted data about the desired connection between Slack account and Tolgee account */
        data: string;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  /**
   * Returns information about the connection between Slack account and Tolgee account which user is performing. The flow is the following.
   *
   * 1. User executes slash command in Slack and gets link with encrypted Slack user ID, workspace ID and the Channel ID (to send success response to)
   *
   * 2. User gets opens the link and the Tolgee Platform frontend and it uses this endpoint to get the data info about the future connection
   */
  getInfo_3: {
    parameters: {
      query: {
        /** The encrypted data */
        data: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["SlackUserInfoModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  generateOrganizationSlug: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": string;
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["GenerateSlugDto"];
      };
    };
  };
  generateProjectSlug: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": string;
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["GenerateSlugDto"];
      };
    };
  };
  validateOrganizationSlug: {
    parameters: {
      path: {
        slug: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": boolean;
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  validateProjectSlug: {
    parameters: {
      path: {
        slug: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": boolean;
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  /** Returns information about currently authenticated user. */
  getInfo_2: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["PrivateUserAccountModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  /** Updates current user's profile information. */
  updateUser: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["PrivateUserAccountModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserUpdateRequestDto"];
      };
    };
  };
  updateUserOld: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["PrivateUserAccountModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserUpdateRequestDto"];
      };
    };
  };
  delete: {
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  get: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["UserPreferencesModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  setLanguage: {
    parameters: {
      path: {
        languageTag: string;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  setPreferredOrganization: {
    parameters: {
      path: {
        organizationId: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  getTasks: {
    parameters: {
      query: {
        /** Filter tasks by state */
        filterState?: ("NEW" | "IN_PROGRESS" | "DONE" | "CLOSED")[];
        /** Filter tasks without state */
        filterNotState?: ("NEW" | "IN_PROGRESS" | "DONE" | "CLOSED")[];
        /** Filter tasks by assignee */
        filterAssignee?: number[];
        /** Filter tasks by type */
        filterType?: ("TRANSLATE" | "REVIEW")[];
        /** Filter tasks by id */
        filterId?: number[];
        /** Filter tasks without id */
        filterNotId?: number[];
        /** Filter tasks by project */
        filterProject?: number[];
        /** Filter tasks without project */
        filterNotProject?: number[];
        /** Filter tasks by language */
        filterLanguage?: number[];
        /** Filter tasks by key */
        filterKey?: number[];
        /** Filter tasks by agency */
        filterAgency?: number[];
        /** Exclude "done" tasks which are older than specified timestamp */
        filterDoneMinClosedAt?: number;
        /** Exclude tasks which were closed before specified timestamp */
        filterNotClosedBefore?: number;
        /** Zero-based page index (0..N) */
        page?: number;
        /** The size of the page to be returned */
        size?: number;
        /** Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        sort?: string[];
        search?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["PagedModelTaskWithProjectModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  uploadAvatar: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["PrivateUserAccountModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
    requestBody: {
      content: {
        "multipart/form-data": {
          /** Format: binary */
          avatar: string;
        };
      };
    };
  };
  removeAvatar: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["PrivateUserAccountModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  /** Generates new JWT token permitted to sensitive operations */
  getSuperToken: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["JwtAuthenticationResponse"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SuperTokenRequest"];
      };
    };
  };
  /** Regenerates multi-factor authentication recovery codes */
  regenerateRecoveryCodes: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": string[];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserMfaRecoveryRequestDto"];
      };
    };
  };
  /** Enables TOTP-based two-factor authentication. Invalidates all previous sessions upon success. */
  enableMfa: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["JwtAuthenticationResponse"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserTotpEnableRequestDto"];
      };
    };
  };
  /** Disables TOTP-based two-factor authentication. Invalidates all previous sessions upon success. */
  disableMfa: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["JwtAuthenticationResponse"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserTotpDisableRequestDto"];
      };
    };
  };
  /** Updates current user's password. Invalidates all previous sessions upon success. */
  updateUserPassword: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["JwtAuthenticationResponse"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserUpdatePasswordRequestDto"];
      };
    };
  };
  /** Resends email verification email to currently authenticated user. */
  sendEmailVerification: {
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
  /** Returns all organizations owned only by current user */
  getAllSingleOwnedOrganizations: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["CollectionModelSimpleOrganizationModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json":
            | components["schemas"]["ErrorResponseTyped"]
            | components["schemas"]["ErrorResponseBody"];
        };
      };
    };
  };
}

export interface external {}
