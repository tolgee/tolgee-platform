/*
 * Copyright (c) 2020. Tolgee
 */
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath libs.kotlin
    }
}

plugins {
    id("org.jlleitschuh.gradle.ktlint") version "${ktlintGradlePluginVersion}"
    id "org.gradle.test-retry"
}

subprojects {
    if (project.projectDir.exists()) {
        apply {
            plugin("org.jlleitschuh.gradle.ktlint")
        }
        extensions.configure(org.jlleitschuh.gradle.ktlint.KtlintExtension) {
            it.version.set(ktlintVersion)
        }
    }
}

project.ext {
    dbSchemaContainerName = 'tolgee_postgres_dbschema'
}

if (System.getenv().containsKey("VERSION")) {
    project.version = System.getenv().get("VERSION")
} else {
    project.version = 'local'
}

apply plugin: 'idea'

def unpackTarget = "${project.buildDir}/dependency"

project(':server-app').afterEvaluate {
    tasks.register('unpack', Copy) {
        // cleanup the unpackTarget first so we don't have duplicated dependencies or other files, which
        // can be there from previous builds
        doFirst {
            delete(unpackTarget)
        }
        from project(':server-app').tasks.named('bootJar').map {
            zipTree(it.outputs.files.singleFile)
        }
        into unpackTarget
        if (System.getenv("SKIP_SERVER_BUILD") != "true") {
            dependsOn "bootJar"
        }
    }

    tasks.register('addVersionFile', Task) {
        mustRunAfter unpack
        doLast {
            def file = new File("${unpackTarget}/BOOT-INF/classes/.VERSION")
            file.write(project.version.toString())
        }
    }

    apply from: "./gradle/webapp.gradle"
    apply from: "./gradle/docker.gradle"
    apply from: "./gradle/e2e.gradle"

    tasks.named("docker") {
        mustRunAfter copyDist
    }

    tasks.register('packResources', Zip) {
        dependsOn "unpack"
        dependsOn "copyDist"
        dependsOn "addVersionFile"
        from "${project.projectDir}/build/dependency"
        archiveFileName = "tolgee.jar"
        destinationDirectory = file("$buildDir/libs")
        entryCompression ZipEntryCompression.STORED
    }

    tasks.register('build') {
        dependsOn ':server-app:build'
        dependsOn runE2e
    }

    tasks.register('check') {
        dependsOn ':server-app:check'
        dependsOn ktlint
    }

    tasks.register('bootJar') {
        dependsOn ':server-app:bootJar'
    }

    tasks.register('startDbChangelogContainer') {
        doLast {
            exec {
                ignoreExitValue = true
                commandLine "docker", "rm", "--force", "--volumes", dbSchemaContainerName
            }
            exec {
                commandLine "docker", "run", "-e", "POSTGRES_PASSWORD=postgres", "-d", "-p55538:5432", "--name", dbSchemaContainerName, "postgres:13"
            }
            Thread.sleep(5000)
        }
    }

    tasks.register('stopDbChangelogContainer', Exec) {
        mustRunAfter ':data:diffChangelog'
        mustRunAfter ':ee-app:diffChangelog'

        commandLine "docker", "rm", "--force", "--volumes", dbSchemaContainerName
    }

    tasks.register('diffChangeLog') {
        project(':server-app').tasks.named("bootRun") {
            mustRunAfter(startDbChangelogContainer)
        }

        finalizedBy = [
            startDbChangelogContainer,
            ':server-app:bootRun',
            ':data:diffChangelog',
        ]

        if (gradle.ext.billingAppDirectory.exists()) {
            finalizedBy.add(':billing-app:diffChangelog')
        }

        if (gradle.ext.eeAppDirectoryExists) {
            finalizedBy.add(':ee-app:diffChangelog')
        }

        finalizedBy.add(stopDbChangelogContainer)

        doFirst {
            project(':server-app').bootRun
                .systemProperty('spring.profiles.active', 'dbschema')
                // Use an unlikely-to-be-used port
                .systemProperty('server.port', '61987')
        }
    }

    subprojects.forEach {
        tasks.matching { name == 'diffChangelog' }.configureEach {
            mustRunAfter ':server-app:bootRun'
        }
    }
}

subprojects {
    tasks.register('allDeps', DependencyReportTask)

    ext['hibernate.version'] = hibernateVersion
    ext['commons-lang3.version'] = commonsLang3Version
    ext['jackson.version'] = jacksonVersion

    tasks.withType(Test).configureEach {
        testLogging {
            events "passed", "skipped", "failed", "started"
        }
    }

    tasks.matching {
        it.name in [
            "classes",
            "compileJava",
            "compileKotlin",
            "kaptKotlin",
            "bootBuildInfo",
            "bootJarMainClassName",
            "jar",
            "bootJar"
        ]
    }.configureEach {
        onlyIf { System.getenv("SKIP_SERVER_BUILD") != "true" }
    }
}

// Define the setTestRetry method at the root level so it can be used by all subprojects
ext.setTestRetry = { test ->
    boolean isCiServer = System.getenv().containsKey("CI")
    boolean isRelease = System.getenv().get("CI_RELEASE") == "true"

    test.retry {
        if (isCiServer) {
            maxFailures = 20
            maxRetries = 5
        }
        failOnPassedAfterRetry = !isRelease
    }
}
