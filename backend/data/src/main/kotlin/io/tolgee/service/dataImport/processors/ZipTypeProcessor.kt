package io.tolgee.service.dataImport.processors

import io.tolgee.dtos.dataImport.ImportFileDto
import io.tolgee.exceptions.ImportCannotParseFileException
import java.io.ByteArrayInputStream
import java.util.zip.ZipEntry
import java.util.zip.ZipException
import java.util.zip.ZipInputStream

class ZipTypeProcessor : ImportArchiveProcessor {
  companion object {
    val IGNORE_PREFIXES = arrayOf("__", ".")
  }

  fun readFiles(archive: ByteArrayInputStream): Collection<ImportFileDto> {
    val zipInputStream = ZipInputStream(archive)
    var nextEntry: ZipEntry?
    // .zip archives generated by MacOs compress feature return duplicities
    // I am removing them here by adding the files to map
    val files = mutableMapOf<String, ImportFileDto>()
    while (zipInputStream.nextEntry.also { nextEntry = it } != null) {
      val fileName = nextEntry?.name?.replaceRootSlash() ?: continue

      if (files.contains(fileName)) {
        continue
      }

      if (IGNORE_PREFIXES.any { fileName.startsWith(it) }) {
        continue
      }

      val data = zipInputStream.readAllBytes()
      if (data.isEmpty()) {
        continue
      }

      files[fileName] =
        ImportFileDto(
          name = fileName,
          data = data,
        )
    }
    return files.values.sortedBy { it.name }
  }

  override fun process(file: ImportFileDto): Collection<ImportFileDto> {
    try {
      return readFiles(file.data.inputStream())
    } catch (e: ZipException) {
      throw ImportCannotParseFileException(file.name, e.message, e)
    }
  }

  private fun String.replaceRootSlash() = this.replace("^/".toRegex(), "")
}
