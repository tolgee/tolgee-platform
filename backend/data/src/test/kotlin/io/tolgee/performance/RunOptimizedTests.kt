package io.tolgee.performance

import java.io.File
import java.time.Duration
import java.time.Instant
import java.util.concurrent.TimeUnit

object RunOptimizedTests {
    @JvmStatic
    fun main(args: Array<String>) {
        val startTime = Instant.now()
        
        println("=== Tolgee Optimized Test Runner ===")
        println("Starting test execution with optimized settings...")
        
        // Set environment variables for optimized test execution
        val env = mapOf(
            "SPRING_PROFILES_ACTIVE" to "test",
            "SPRING_JPA_HIBERNATE_DDL_AUTO" to "create-drop",
            "SPRING_DATASOURCE_URL" to "jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;MODE=PostgreSQL",
            "SPRING_DATASOURCE_DRIVER_CLASS_NAME" to "org.h2.Driver",
            "SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT" to "org.hibernate.dialect.H2Dialect",
            "SPRING_JPA_PROPERTIES_HIBERNATE_FORMAT_SQL" to "false",
            "SPRING_JPA_PROPERTIES_HIBERNATE_SHOW_SQL" to "false",
            "LOGGING_LEVEL_ORG_HIBERNATE_SQL" to "ERROR",
            "LOGGING_LEVEL_ORG_HIBERNATE_TYPE_DESCRIPTOR_SQL_BASICBINDER" to "ERROR",
            "LOGGING_LEVEL_ORG_SPRINGFRAMEWORK" to "ERROR",
            "SPRING_MAIN_LAZY_INITIALIZATION" to "true"
        )
        
        // Run Gradle test command with optimized settings
        val processBuilder = ProcessBuilder(
            "./gradlew", 
            "test", 
            "--no-daemon",
            "--parallel",
            "--max-workers=4",
            "--console=plain"
        )
        
        processBuilder.environment().putAll(env)
        processBuilder.redirectErrorStream(true)
        
        val process = processBuilder.start()
        val output = process.inputStream.bufferedReader().use { it.readText() }
        
        val exitCode = process.waitFor()
        
        println(output)
        
        val endTime = Instant.now()
        val duration = Duration.between(startTime, endTime)
        
        println("=== Test Execution Summary ===")
        println("Total execution time: ${duration.toSeconds()} seconds")
        println("Exit code: $exitCode")
        
        if (exitCode == 0) {
            println("All tests passed successfully!")
        } else {
            println("Some tests failed. Check the output above for details.")
        }
        
        // Generate performance report
        generatePerformanceReport(duration)
    }
    
    private fun generatePerformanceReport(duration: Duration) {
        val reportDir = File("build/reports/performance")
        reportDir.mkdirs()
        
        val reportFile = File(reportDir, "test-performance-${Instant.now()}.txt")
        reportFile.writeText("""
            Tolgee Test Performance Report
            ==============================
            Date: ${Instant.now()}
            Total execution time: ${duration.toSeconds()} seconds
            
            Performance metrics:
            - Context load time: Measured in tests
            - Test execution time: ${duration.toSeconds()} seconds
            
            This report was generated by the Tolgee Optimized Test Runner.
        """.trimIndent())
        
        println("Performance report generated at: ${reportFile.absolutePath}")
    }
} 